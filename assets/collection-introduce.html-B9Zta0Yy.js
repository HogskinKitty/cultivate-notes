import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as l}from"./app-LOP_SVZd.js";const t={};function n(h,i){return l(),a("div",null,i[0]||(i[0]=[e(`<p>Java 集合框架是一组用于存储和操作一组对象的接口和类的集合，提供了丰富的数据结构和操作方法，以满足不同的编程需求。</p><figure><img src="https://raw.githubusercontent.com/HogskinKitty/assets-repository/master/cultivate-notes/collection.png" alt="集合体系图" tabindex="0" loading="lazy"><figcaption>集合体系图</figcaption></figure><h2 id="主要接口" tabindex="-1"><a class="header-anchor" href="#主要接口"><span>主要接口</span></a></h2><ol><li><p><code>Collection</code> 接口</p><ul><li>这是集合框架的根接口，定义了集合的基本操作，如添加、删除、遍历等。</li><li>其子接口包括 <code>List</code> 、 <code>Set</code> 和 <code>Queue</code> 。</li></ul></li><li><p><code>List</code> 接口</p><ul><li>是一个有序的、可重复的集合。</li><li>常见的实现类有 <code>ArrayList</code> 、 <code>LinkedList</code> 。</li></ul></li><li><p><code>Set</code> 接口</p><ul><li>是一个不允许重复元素的集合。</li><li>实现类如 <code>HashSet</code> 、 <code>TreeSet</code> 等。</li></ul></li><li><p><code>Queue</code> 接口</p><ul><li>用于实现队列数据结构，遵循先进先出（FIFO）原则。</li><li>例如 <code>PriorityQueue</code> 。</li></ul></li><li><p><code>Map</code> 接口</p><ul><li>用于存储键值对形式的数据。</li><li>常见的实现类有 <code>HashMap</code> 、 <code>TreeMap</code> 等。</li></ul></li></ol><h2 id="常见实现类" tabindex="-1"><a class="header-anchor" href="#常见实现类"><span>常见实现类</span></a></h2><ol><li><code>ArrayList</code>（常用） <ul><li>基于动态数组实现，支持随机访问，尾部添加和删除效率高，非尾部插入和删除效率低。</li><li>示例：</li></ul></li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ArrayList</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Apple&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Banana&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>LinkedList</code><ul><li>基于双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)实现，在插入和删除操作（特别是在列表头部和中间）时效率较高。</li><li>例如：</li></ul></li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LinkedList</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> linkedList </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">linkedList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addFirst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Orange&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">linkedList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Mango&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>HashSet</code><ul><li>基于哈希表实现，不允许重复元素，元素的存储顺序是不确定的。</li><li>用法：</li></ul></li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HashSet</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> set </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Grape&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><code>TreeSet</code><ul><li>基于红黑树实现，元素会自动按照自然顺序或指定的比较器进行排序。</li><li>示例：</li></ul></li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TreeSet</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> treeSet </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TreeSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">treeSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Pear&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><code>HashMap</code>（常用） <ul><li>基于哈希表实现，允许键值对为 <code>null</code> ，存储键值对时不保证顺序。</li><li>比如：</li></ul></li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HashMap</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> map </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Key1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><code>TreeMap</code><ul><li>基于红黑树实现，按照键的自然顺序或指定的比较器对键进行排序。</li><li>像这样：</li></ul></li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TreeMap</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Double</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> treeMap </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TreeMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">treeMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Key2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="选择合适的集合类型" tabindex="-1"><a class="header-anchor" href="#选择合适的集合类型"><span>选择合适的集合类型</span></a></h2><ol><li>如果需要快速随机访问和在尾部进行高效的添加和删除操作，选择 <code>ArrayList</code> 。</li><li>如果需要在列表的头部和中间频繁进行插入和删除操作，使用 <code>LinkedList</code> 。</li><li>当不允许重复元素且不关心元素顺序时， <code>HashSet</code> 是个好选择。</li><li>若需要元素自动排序，可考虑 <code>TreeSet</code> 。</li><li>对于键值对存储，若不关心键的顺序， <code>HashMap</code> 适用；若要对键进行排序，选择 <code>TreeMap</code> 。</li></ol><h2 id="集合的遍历" tabindex="-1"><a class="header-anchor" href="#集合的遍历"><span>集合的遍历</span></a></h2><ol><li><p>对于 <code>List</code> 集合（如 <code>ArrayList</code> 、 <code>LinkedList</code> ）：</p><ul><li>使用 for 循环通过索引遍历。</li><li>使用迭代器遍历。</li><li>增强型 for 循环遍历。</li></ul></li><li><p>对于 <code>Set</code> 集合（如 <code>HashSet</code> 、 <code>TreeSet</code> ）：</p><ul><li>通常使用迭代器或增强型 for 循环遍历。</li></ul></li><li><p>对于 <code>Map</code> 集合（如 <code>HashMap</code> 、 <code>TreeMap</code> ）：</p><ul><li>通过 <code>keySet</code> 获取键的集合，然后遍历键获取对应的值。</li><li>使用 <code>entrySet</code> 获取键值对的集合进行遍历。</li></ul></li></ol><p>总之，Java 集合框架提供了丰富的选择，理解它们的特点和适用场景对于编写高效、正确的代码至关重要。</p>`,22)]))}const p=s(t,[["render",n],["__file","collection-introduce.html.vue"]]),r=JSON.parse('{"path":"/java/collection/collection-introduce.html","title":"集合框架介绍","lang":"zh-CN","frontmatter":{"title":"集合框架介绍","order":1,"description":"Java 集合框架是一组用于存储和操作一组对象的接口和类的集合，提供了丰富的数据结构和操作方法，以满足不同的编程需求。 集合体系图集合体系图 主要接口 Collection 接口 这是集合框架的根接口，定义了集合的基本操作，如添加、删除、遍历等。 其子接口包括 List 、 Set 和 Queue 。 List 接口 是一个有序的、可重复的集合。 常见...","head":[["meta",{"property":"og:url","content":"https://hogskinkitty.line.pm/java/collection/collection-introduce.html"}],["meta",{"property":"og:site_name","content":"cultivate-notes"}],["meta",{"property":"og:title","content":"集合框架介绍"}],["meta",{"property":"og:description","content":"Java 集合框架是一组用于存储和操作一组对象的接口和类的集合，提供了丰富的数据结构和操作方法，以满足不同的编程需求。 集合体系图集合体系图 主要接口 Collection 接口 这是集合框架的根接口，定义了集合的基本操作，如添加、删除、遍历等。 其子接口包括 List 、 Set 和 Queue 。 List 接口 是一个有序的、可重复的集合。 常见..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/HogskinKitty/assets-repository/master/cultivate-notes/collection.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-01T02:30:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-01T02:30:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集合框架介绍\\",\\"image\\":[\\"https://raw.githubusercontent.com/HogskinKitty/assets-repository/master/cultivate-notes/collection.png\\"],\\"dateModified\\":\\"2024-08-01T02:30:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HogskinKitty\\",\\"url\\":\\"https://hogskinkitty.line.pm\\"}]}"]]},"headers":[{"level":2,"title":"主要接口","slug":"主要接口","link":"#主要接口","children":[]},{"level":2,"title":"常见实现类","slug":"常见实现类","link":"#常见实现类","children":[]},{"level":2,"title":"选择合适的集合类型","slug":"选择合适的集合类型","link":"#选择合适的集合类型","children":[]},{"level":2,"title":"集合的遍历","slug":"集合的遍历","link":"#集合的遍历","children":[]}],"git":{"createdTime":1722479455000,"updatedTime":1722479455000,"contributors":[{"name":"HogskinKitty","email":"zymdev@126.com","commits":1}]},"readingTime":{"minutes":2.61,"words":782},"filePathRelative":"java/collection/collection-introduce.md","localizedDate":"2024年8月1日","autoDesc":true,"excerpt":"<p>Java 集合框架是一组用于存储和操作一组对象的接口和类的集合，提供了丰富的数据结构和操作方法，以满足不同的编程需求。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/HogskinKitty/assets-repository/master/cultivate-notes/collection.png\\" alt=\\"集合体系图\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>集合体系图</figcaption></figure>\\n<h2>主要接口</h2>\\n<ol>\\n<li>\\n<p><code>Collection</code> 接口</p>\\n<ul>\\n<li>这是集合框架的根接口，定义了集合的基本操作，如添加、删除、遍历等。</li>\\n<li>其子接口包括 <code>List</code> 、 <code>Set</code> 和 <code>Queue</code> 。</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>List</code> 接口</p>\\n<ul>\\n<li>是一个有序的、可重复的集合。</li>\\n<li>常见的实现类有 <code>ArrayList</code> 、 <code>LinkedList</code> 。</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>Set</code> 接口</p>\\n<ul>\\n<li>是一个不允许重复元素的集合。</li>\\n<li>实现类如 <code>HashSet</code> 、 <code>TreeSet</code> 等。</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>Queue</code> 接口</p>\\n<ul>\\n<li>用于实现队列数据结构，遵循先进先出（FIFO）原则。</li>\\n<li>例如 <code>PriorityQueue</code> 。</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>Map</code> 接口</p>\\n<ul>\\n<li>用于存储键值对形式的数据。</li>\\n<li>常见的实现类有 <code>HashMap</code> 、 <code>TreeMap</code> 等。</li>\\n</ul>\\n</li>\\n</ol>"}');export{p as comp,r as data};
