import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as o,o as c}from"./app-LOP_SVZd.js";const d={};function t(a,e){return c(),l("div",null,e[0]||(e[0]=[o('<p>Java 是一种强类型、面向对象的编程语言，它有许多保留关键字，这些关键字在编写代码时有特殊的含义和用途。以下是 Java 关键字的详细列表和它们的简要说明：</p><h2 id="访问控制修饰符" tabindex="-1"><a class="header-anchor" href="#访问控制修饰符"><span>访问控制修饰符</span></a></h2><ul><li><code>private</code>：私有访问权限，只能在所属类内访问。</li><li><code>protected</code>：受保护访问权限，可以在同一个包内及不同包的子类中访问。</li><li><code>public</code>：公共访问权限，可以在任何地方访问。</li></ul><h2 id="类、方法和变量修饰符" tabindex="-1"><a class="header-anchor" href="#类、方法和变量修饰符"><span>类、方法和变量修饰符</span></a></h2><ul><li><code>abstract</code>：声明抽象类或抽象方法。</li><li><code>class</code>：声明一个类。</li><li><code>extends</code>：表示继承一个类。</li><li><code>final</code>：声明最终的类、方法或变量，不能被继承或修改。</li><li><code>implements</code>：表示一个类实现接口。</li><li><code>interface</code>：声明一个接口。</li><li><code>native</code>：声明一个本地方法，该方法用其他语言（如 C/C++）编写。</li><li><code>new</code>：创建新实例。</li><li><code>static</code>：声明类的静态成员。</li><li><code>strictfp</code>：用于精确浮点运算。</li><li><code>synchronized</code>：声明方法或代码块为同步。</li><li><code>transient</code>：声明变量不被序列化。</li><li><code>volatile</code>：声明变量每次使用时都从主存中获取。</li></ul><h2 id="控制语句" tabindex="-1"><a class="header-anchor" href="#控制语句"><span>控制语句</span></a></h2><ul><li><code>if</code>：条件语句。</li><li><code>else</code>：条件语句的其他分支。</li><li><code>switch</code>：开关语句。</li><li><code>case</code>：开关语句中的分支。</li><li><code>default</code>：开关语句中的默认分支。</li><li><code>for</code>：循环语句。</li><li><code>while</code>：循环语句。</li><li><code>do</code>：循环语句，与 while 结合使用。</li><li><code>break</code>：跳出当前循环或开关语句。</li><li><code>continue</code>：跳过当前循环中的剩余语句，进入下一次循环。</li><li><code>return</code>：从方法中返回结果。</li><li><code>try</code>：捕获异常的代码块。</li><li><code>catch</code>：处理 try 语句块中抛出的异常。</li><li><code>finally</code>：确保执行的代码块，不论是否发生异常。</li><li><code>throw</code>：抛出一个异常。</li><li><code>throws</code>：声明方法可能抛出的异常。</li></ul><h2 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型</span></a></h2><ul><li><code>boolean</code>：布尔类型，值为 <code>true</code> 或 <code>false</code>。</li><li><code>byte</code>：字节类型，8 位整数。</li><li><code>char</code>：字符类型，16 位 Unicode 字符。</li><li><code>short</code>：短整型，16 位整数。</li><li><code>int</code>：整型，32 位整数。</li><li><code>long</code>：长整型，64 位整数。</li><li><code>float</code>：单精度浮点型，32 位浮点数。</li><li><code>double</code>：双精度浮点型，64 位浮点数。</li></ul><h2 id="其他关键字" tabindex="-1"><a class="header-anchor" href="#其他关键字"><span>其他关键字</span></a></h2><ul><li><code>super</code>：引用父类的对象。</li><li><code>this</code>：引用当前类的对象。</li><li><code>void</code>：声明方法无返回值。</li><li><code>import</code>：引入其他包。</li><li><code>package</code>：定义包。</li></ul><h2 id="保留字-未来可能使用" tabindex="-1"><a class="header-anchor" href="#保留字-未来可能使用"><span>保留字（未来可能使用）</span></a></h2><ul><li><code>goto</code>：保留关键字，Java 中未使用。</li><li><code>const</code>：保留关键字，Java 中未使用。</li></ul>',13)]))}const s=i(d,[["render",t],["__file","keywords.html.vue"]]),p=JSON.parse('{"path":"/java/basic/keywords.html","title":"关键字","lang":"zh-CN","frontmatter":{"title":"关键字","date":"2024-07-24T00:00:00.000Z","category":["基础知识"],"tag":["Java 关键字"],"order":1,"description":"Java 是一种强类型、面向对象的编程语言，它有许多保留关键字，这些关键字在编写代码时有特殊的含义和用途。以下是 Java 关键字的详细列表和它们的简要说明： 访问控制修饰符 private：私有访问权限，只能在所属类内访问。 protected：受保护访问权限，可以在同一个包内及不同包的子类中访问。 public：公共访问权限，可以在任何地方访问。 ...","head":[["meta",{"property":"og:url","content":"https://hogskinkitty.line.pm/java/basic/keywords.html"}],["meta",{"property":"og:site_name","content":"cultivate-notes"}],["meta",{"property":"og:title","content":"关键字"}],["meta",{"property":"og:description","content":"Java 是一种强类型、面向对象的编程语言，它有许多保留关键字，这些关键字在编写代码时有特殊的含义和用途。以下是 Java 关键字的详细列表和它们的简要说明： 访问控制修饰符 private：私有访问权限，只能在所属类内访问。 protected：受保护访问权限，可以在同一个包内及不同包的子类中访问。 public：公共访问权限，可以在任何地方访问。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-30T13:27:05.000Z"}],["meta",{"property":"article:tag","content":"Java 关键字"}],["meta",{"property":"article:published_time","content":"2024-07-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-30T13:27:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关键字\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-30T13:27:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HogskinKitty\\",\\"url\\":\\"https://hogskinkitty.line.pm\\"}]}"]]},"headers":[{"level":2,"title":"访问控制修饰符","slug":"访问控制修饰符","link":"#访问控制修饰符","children":[]},{"level":2,"title":"类、方法和变量修饰符","slug":"类、方法和变量修饰符","link":"#类、方法和变量修饰符","children":[]},{"level":2,"title":"控制语句","slug":"控制语句","link":"#控制语句","children":[]},{"level":2,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[]},{"level":2,"title":"其他关键字","slug":"其他关键字","link":"#其他关键字","children":[]},{"level":2,"title":"保留字（未来可能使用）","slug":"保留字-未来可能使用","link":"#保留字-未来可能使用","children":[]}],"git":{"createdTime":1722346025000,"updatedTime":1722346025000,"contributors":[{"name":"HogskinKitty","email":"zymdev@126.com","commits":1}]},"readingTime":{"minutes":2.07,"words":621},"filePathRelative":"java/basic/keywords.md","localizedDate":"2024年7月24日","autoDesc":true,"excerpt":"<p>Java 是一种强类型、面向对象的编程语言，它有许多保留关键字，这些关键字在编写代码时有特殊的含义和用途。以下是 Java\\n关键字的详细列表和它们的简要说明：</p>\\n<h2>访问控制修饰符</h2>\\n<ul>\\n<li><code>private</code>：私有访问权限，只能在所属类内访问。</li>\\n<li><code>protected</code>：受保护访问权限，可以在同一个包内及不同包的子类中访问。</li>\\n<li><code>public</code>：公共访问权限，可以在任何地方访问。</li>\\n</ul>\\n<h2>类、方法和变量修饰符</h2>\\n<ul>\\n<li><code>abstract</code>：声明抽象类或抽象方法。</li>\\n<li><code>class</code>：声明一个类。</li>\\n<li><code>extends</code>：表示继承一个类。</li>\\n<li><code>final</code>：声明最终的类、方法或变量，不能被继承或修改。</li>\\n<li><code>implements</code>：表示一个类实现接口。</li>\\n<li><code>interface</code>：声明一个接口。</li>\\n<li><code>native</code>：声明一个本地方法，该方法用其他语言（如 C/C++）编写。</li>\\n<li><code>new</code>：创建新实例。</li>\\n<li><code>static</code>：声明类的静态成员。</li>\\n<li><code>strictfp</code>：用于精确浮点运算。</li>\\n<li><code>synchronized</code>：声明方法或代码块为同步。</li>\\n<li><code>transient</code>：声明变量不被序列化。</li>\\n<li><code>volatile</code>：声明变量每次使用时都从主存中获取。</li>\\n</ul>"}');export{s as comp,p as data};
