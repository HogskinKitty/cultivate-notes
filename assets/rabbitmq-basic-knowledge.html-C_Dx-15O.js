import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as e,b as n,d as l,o,r as a}from"./app-LOP_SVZd.js";const s={};function u(g,i){const p=a("Mermaid");return o(),r("div",null,[i[0]||(i[0]=e('<h2 id="核心组件" tabindex="-1"><a class="header-anchor" href="#核心组件"><span>核心组件</span></a></h2><p><strong>Broker（消息中间件）</strong></p><ul><li><p>RabbitMQ Server，负责接收和分发消息的应用</p></li><li><p>提供一种传输服务，维护消息的传输，将消息分发到相应队列</p></li></ul><p><strong>Producer（生产者）</strong></p><ul><li><p>投递消息的一方</p></li><li><p>创建消息，发布到 RabbitMQ 中</p></li><li><p>消息一般包含两个部分：消息体（payload）和标签（label）</p></li></ul><p><strong>Consumer（消费者）</strong></p><ul><li><p>接收消息的一方</p></li><li><p>连接到 RabbitMQ 服务器，订阅队列</p></li><li><p>消费队列中的消息</p></li></ul><p><strong>Queue（队列）</strong></p><ul><li><p>消息存储的地方</p></li><li><p>FIFO 原则：先进先出</p></li><li><p>多个消费者可以订阅同一个队列，队列中的消息会被平均分摊给多个消费者</p></li></ul><p><strong>Exchange（交换机）</strong></p><ul><li><p>接收生产者发送的消息，根据路由键转发到绑定的队列</p></li><li><p>类型：</p><ul><li>Direct：直接匹配</li><li>Topic：通配符匹配</li><li>Fanout：广播</li><li>Headers：根据消息属性匹配</li></ul></li></ul><p><strong>Binding（绑定）</strong></p><ul><li><p>Exchange 和 Queue 之间的虚拟连接</p></li><li><p>定义了 Exchange 和 Queue 之间的消息分发规则</p></li></ul><p><strong>Channel（信道）</strong></p><ul><li><p>建立在 Connection 连接之上的虚拟连接</p></li><li><p>复用 TCP 连接，减少性能开销</p></li><li><p>每个线程创建单独的 Channel，实现多线程通信</p></li></ul><p><strong>Virtual Host（虚拟主机）</strong></p><ul><li><p>权限控制的基本单位</p></li><li><p>每个 VHost 相当于一个独立的小型 RabbitMQ 服务器</p></li><li><p>拥有自己的队列、交换器和绑定关系</p></li></ul><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h2><p><strong>消息流转过程</strong></p>',19)),n(p,{id:"mermaid-176",code:"eJyFzrEKgzAQBuC9T3HgWodEEHToEjK1g3ENDmIvWmpNiQYq+PCVaGgphGbIkP+7P9ea+tnBpTzAegpZGH21DZoK4vgEXPJX09VDi5XLuXtdSm0nhDPOCwgihUWLQIKC7oJuQhBHGJFMD6N9oPGzgm4J/ST7jLvGae4RClC3vs8jlaXHcTL6jnmUJMmX4LtIGxUQ6wobyVSoZN3lH2G+RWWhj5hv+SVvirtqQQ=="}),i[1]||(i[1]=l("ol",null,[l("li",null,[l("p",null,"Producer 创建消息，发送到 Exchange")]),l("li",null,[l("p",null,"Exchange 接收到消息后，根据消息的 RoutingKey 和 Exchange 类型，查找匹配的 Queue")]),l("li",null,[l("p",null,"Exchange 将消息路由到一个或多个 Queue 中")]),l("li",null,[l("p",null,"Queue 将消息存储起来，等待 Consumer 消费")]),l("li",null,[l("p",null,"Consumer 监听（订阅）Queue，获取消息进行处理")])],-1)),i[2]||(i[2]=l("p",null,[l("strong",null,"消息投递流程")],-1)),n(p,{id:"mermaid-207",code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCgsSikszkzILEvBKFAIXEYoWAovyU0uTUIgxZV5Csa0VyRmJeeiqGbCBINrA0tRRTyhkk5ZyfV1yaCzQWLB2ga2fnaqVgqKfwtH/iy4bGZ9s6njWuB0v55ZekKuSXpRYpABUY6Sm82L7++ZSNSApcgXoDrRSMgXrXznjatAJJKhAo5WylYKKn8KxvBaqxzhBdpnoKzxeue7FuCURKw9HZW5MLALh7Z5k="}),i[3]||(i[3]=e("<ol><li><p><strong>生产者发送消息</strong></p><ul><li><p>创建 Connection（TCP 连接）</p></li><li><p>创建 Channel（信道）</p></li><li><p>声明 Exchange</p></li><li><p>发送消息到 Exchange</p></li></ul></li><li><p><strong>交换机路由消息</strong></p><ul><li><p>根据 Exchange 类型和绑定规则</p></li><li><p>将消息路由到一个或多个队列</p></li><li><p>如果没有匹配的队列，消息将被丢弃</p></li></ul></li><li><p><strong>队列存储消息</strong></p><ul><li><p>按照 FIFO 原则存储消息</p></li><li><p>如果队列已满，可能触发溢出策略</p></li><li><p>支持消息持久化到磁盘</p></li></ul></li><li><p><strong>消费者处理消息</strong></p><ul><li><p>创建 Connection 和 Channel</p></li><li><p>声明要监听的队列</p></li><li><p>订阅队列并处理消息</p></li><li><p>发送消息确认（ACK）</p></li></ul></li></ol><p><strong>通信机制</strong></p>",2)),n(p,{id:"mermaid-311",code:"eJxLL0osyFAIceJSAILi0iQI3zk/Ly81uSQzPw8sDgLO0SHOAUgSsQgZBV1dOwVnD8No54xEoHSOgiGmpBFc0ghT0hguaQyRTM1L4YK4qKQyJxWoLi0zJ8dKOc3SDFnUwxAqbpachiJuhEPcGEkcAEuGQgc="}),i[4]||(i[4]=e('<ol><li><p><strong>Connection（连接）</strong></p><ul><li><p>TCP 连接，长连接</p></li><li><p>支持多个 Channel 复用</p></li><li><p>包含认证、IP、端口等信息</p></li></ul></li><li><p><strong>Channel（信道）</strong></p><ul><li><p>轻量级连接，建立在 Connection 之上</p></li><li><p>每个线程一个 Channel</p></li><li><p>支持并发通信</p></li></ul></li><li><p><strong>心跳机制</strong></p><ul><li><p>默认心跳间隔 60 秒</p></li><li><p>检测连接是否正常</p></li><li><p>及时发现连接故障</p></li></ul></li></ol><p><strong>高级特性</strong></p><ol><li><p><strong>消息分发</strong></p><ul><li><p>Round-Robin（轮询）</p></li><li><p>Fair Dispatch（公平分发）</p></li><li><p>消息优先级</p></li></ul></li><li><p><strong>消息顺序性</strong></p><ul><li><p>单队列单消费者保证顺序</p></li><li><p>多队列或多消费者不保证顺序</p></li><li><p>消息重试可能破坏顺序</p></li></ul></li><li><p><strong>流量控制</strong></p><ul><li><p>Consumer 预取计数（prefetch count）</p></li><li><p>Publisher 流控（flow control）</p></li><li><p>内存警告（memory alarm）</p></li></ul></li></ol><h2 id="交换机类型" tabindex="-1"><a class="header-anchor" href="#交换机类型"><span>交换机类型</span></a></h2>',4)),n(p,{id:"mermaid-454",code:"eJyNkDELgzAQhff+igM3QUEFwQ4dis0uZBOHmCYasCppAhb88VUT0LYZekvI+97xHtdIMraArydY5qlr88+FZFTBbaIt6Ru2wXXy0pAKguACM5vI4noQRdsZ8iIqC800g6jaF5zG2BpjY2T9fXs/O+BhFPS3Ai43YBv44SBXHPozYFcBbHxeKEldC7W6/kpHpB+04wKoNMTkI1cksugr54gSi5K9golXr44tR+Oi684ez9KDiq2aUn5QkVUznp7e9u1+Sg=="}),i[5]||(i[5]=e('<p><strong>Direct Exchange</strong></p><ul><li><p>精确匹配路由键</p></li><li><p>消息会被转发到 BindingKey 和 RoutingKey 完全匹配的队列</p></li></ul><p><strong>Topic Exchange</strong></p><ul><li><p>模式匹配路由键</p></li><li><p>支持通配符：* (一个单词)，# (零个或多个单词)</p></li></ul><p><strong>Fanout Exchange</strong></p><ul><li><p>广播模式</p></li><li><p>忽略路由键，消息将发送给所有绑定的队列</p></li></ul><p><strong>Headers Exchange</strong></p><ul><li><p>根据消息属性匹配</p></li><li><p>性能较差，使用较少</p></li></ul><h2 id="可靠性机制" tabindex="-1"><a class="header-anchor" href="#可靠性机制"><span>可靠性机制</span></a></h2><p><strong>消息确认</strong></p><ul><li><p>Producer 确认</p><ul><li><p>Publisher Confirm：消息发送到 Exchange 的确认</p></li><li><p>Publisher Return：消息从 Exchange 路由到 Queue 的确认</p></li></ul></li><li><p>Consumer 确认</p><ul><li><p>Auto ACK：自动确认</p></li><li><p>Manual ACK：手动确认</p></li><li><p>Reject：拒绝消息</p></li></ul></li></ul><p><strong>持久化</strong></p><ul><li><p>Exchange 持久化：声明时指定 durable=true</p></li><li><p>Queue 持久化：声明时指定 durable=true</p></li><li><p>Message 持久化：发送时指定 deliveryMode=2</p></li></ul><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p><strong>异步处理</strong></p><ul><li><p>用户注册邮件通知</p></li><li><p>订单处理</p></li></ul><p><strong>应用解耦</strong></p><ul><li><p>订单系统与库存系统解耦</p></li><li><p>支付系统与物流系统解耦</p></li></ul><p><strong>流量削峰</strong></p><ul><li><p>秒杀系统</p></li><li><p>日志处理</p></li></ul><p><strong>消息通讯</strong></p><ul><li><p>即时通讯</p></li><li><p>群聊广播</p></li></ul>',22))])}const h=t(s,[["render",u],["__file","rabbitmq-basic-knowledge.html.vue"]]),m=JSON.parse('{"path":"/middleware/rabbitmq/rabbitmq-basic-knowledge.html","title":"基础知识","lang":"zh-CN","frontmatter":{"title":"基础知识","date":"2024-07-24T00:00:00.000Z","category":["中间件"],"tag":["RabbitMQ"],"order":3,"description":"核心组件 Broker（消息中间件） RabbitMQ Server，负责接收和分发消息的应用 提供一种传输服务，维护消息的传输，将消息分发到相应队列 Producer（生产者） 投递消息的一方 创建消息，发布到 RabbitMQ 中 消息一般包含两个部分：消息体（payload）和标签（label） Consumer（消费者） 接收消息的一方 连接到...","head":[["meta",{"property":"og:url","content":"https://hogskinkitty.line.pm/middleware/rabbitmq/rabbitmq-basic-knowledge.html"}],["meta",{"property":"og:site_name","content":"cultivate-notes"}],["meta",{"property":"og:title","content":"基础知识"}],["meta",{"property":"og:description","content":"核心组件 Broker（消息中间件） RabbitMQ Server，负责接收和分发消息的应用 提供一种传输服务，维护消息的传输，将消息分发到相应队列 Producer（生产者） 投递消息的一方 创建消息，发布到 RabbitMQ 中 消息一般包含两个部分：消息体（payload）和标签（label） Consumer（消费者） 接收消息的一方 连接到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-28T01:55:51.000Z"}],["meta",{"property":"article:tag","content":"RabbitMQ"}],["meta",{"property":"article:published_time","content":"2024-07-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-28T01:55:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础知识\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-28T01:55:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HogskinKitty\\",\\"url\\":\\"https://hogskinkitty.line.pm\\"}]}"]]},"headers":[{"level":2,"title":"核心组件","slug":"核心组件","link":"#核心组件","children":[]},{"level":2,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":2,"title":"交换机类型","slug":"交换机类型","link":"#交换机类型","children":[]},{"level":2,"title":"可靠性机制","slug":"可靠性机制","link":"#可靠性机制","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}],"git":{"createdTime":1732758951000,"updatedTime":1732758951000,"contributors":[{"name":"HogskinKitty","email":"zymdev@126.com","commits":1}]},"readingTime":{"minutes":4.18,"words":1253},"filePathRelative":"middleware/rabbitmq/rabbitmq-basic-knowledge.md","localizedDate":"2024年7月24日","autoDesc":true,"excerpt":"<h2>核心组件</h2>\\n<p><strong>Broker（消息中间件）</strong></p>\\n<ul>\\n<li>\\n<p>RabbitMQ Server，负责接收和分发消息的应用</p>\\n</li>\\n<li>\\n<p>提供一种传输服务，维护消息的传输，将消息分发到相应队列</p>\\n</li>\\n</ul>\\n<p><strong>Producer（生产者）</strong></p>\\n<ul>\\n<li>\\n<p>投递消息的一方</p>\\n</li>\\n<li>\\n<p>创建消息，发布到 RabbitMQ 中</p>\\n</li>\\n<li>\\n<p>消息一般包含两个部分：消息体（payload）和标签（label）</p>\\n</li>\\n</ul>"}');export{h as comp,m as data};
