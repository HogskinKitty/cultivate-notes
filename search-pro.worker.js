const{entries:V}=Object,{fromEntries:et}=Object,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":155,\"nextId\":155,\"documentIds\":{\"0\":\"14\",\"1\":\"14#字符串的特性\",\"2\":\"14#创建字符串\",\"3\":\"14#常用字符串方法\",\"4\":\"14#字符串与字符数组的转换\",\"5\":\"14#stringbuilder-和-stringbuffer\",\"6\":\"14#总结\",\"7\":\"14@0\",\"8\":\"14@1\",\"9\":\"15\",\"10\":\"15#数据类型\",\"11\":\"15#变量\",\"12\":\"15#常量\",\"13\":\"15#运算符\",\"14\":\"15#流程控制\",\"15\":\"15#数组\",\"16\":\"15#方法\",\"17\":\"15@0\",\"18\":\"15@1\",\"19\":\"16\",\"20\":\"16#单行注释\",\"21\":\"16#多行注释\",\"22\":\"16#文档注释\",\"23\":\"16@0\",\"24\":\"16@1\",\"25\":\"17\",\"26\":\"17#缓存池简介\",\"27\":\"17#整数类型缓存池\",\"28\":\"17#字符类型缓存池\",\"29\":\"17#布尔类型缓存池\",\"30\":\"17#缓存池的使用\",\"31\":\"17#总结\",\"32\":\"17@0\",\"33\":\"17@1\",\"34\":\"18\",\"35\":\"18#访问控制修饰符\",\"36\":\"18#类、方法和变量修饰符\",\"37\":\"18#控制语句\",\"38\":\"18#基本类型\",\"39\":\"18#其他关键字\",\"40\":\"18#保留字-未来可能使用\",\"41\":\"18@0\",\"42\":\"18@1\",\"43\":\"19\",\"44\":\"19#自动类型转换\",\"45\":\"19#强制类型转换\",\"46\":\"19@0\",\"47\":\"19@1\",\"48\":\"21\",\"49\":\"21#数据存储结构\",\"50\":\"21#类声明\",\"51\":\"21#核心字段\",\"52\":\"21#构造方法\",\"53\":\"21#初始容量\",\"54\":\"21#扩容机制\",\"55\":\"21#元素添加\",\"56\":\"21#元素删除\",\"57\":\"21#遍历方式\",\"58\":\"21#总结\",\"59\":\"21@0\",\"60\":\"21@1\",\"61\":\"22\",\"62\":\"22#主要接口\",\"63\":\"22#常见实现类\",\"64\":\"22#选择合适的集合类型\",\"65\":\"22#集合的遍历\",\"66\":\"23\",\"67\":\"23#数据结构\",\"68\":\"23#双向链表结构\",\"69\":\"23#初始化\",\"70\":\"23#插入元素\",\"71\":\"23#删除元素\",\"72\":\"23#获取元素\",\"73\":\"23#遍历元素\",\"74\":\"23#总结\",\"75\":\"23@0\",\"76\":\"23@1\",\"77\":\"24\",\"78\":\"24#_1-理解领域驱动设计-ddd\",\"79\":\"24#_2-定义领域模型\",\"80\":\"24#_3-微服务划分\",\"81\":\"24#_4-选择技术栈\",\"82\":\"24#_5-项目结构设计\",\"83\":\"24#_6-实现领域模型\",\"84\":\"24#_7-服务注册与发现\",\"85\":\"24#_8-配置管理\",\"86\":\"24#_9-服务间通信\",\"87\":\"24#_10-熔断和限流\",\"88\":\"24#_11-分布式事务管理\",\"89\":\"24#_12-api网关\",\"90\":\"24#_13-监控与分布式追踪\",\"91\":\"24#_14-测试与部署\",\"92\":\"24#总结\",\"93\":\"24#电商系统的主要领域划分\",\"94\":\"24#_1-用户管理-user-management\",\"95\":\"24#_2-商品管理-product-management\",\"96\":\"24#_3-订单管理-order-management\",\"97\":\"24#_4-库存管理-inventory-management\",\"98\":\"24#_5-支付管理-payment-management\",\"99\":\"24#_6-促销与优惠-promotion-and-discount\",\"100\":\"24#_7-物流与配送-logistics-and-delivery\",\"101\":\"24#_8-客户服务-customer-service\",\"102\":\"24#_9-推荐系统-recommendation-system\",\"103\":\"24#_10-通知管理-notification-management\",\"104\":\"24#领域之间的关系\",\"105\":\"24#_1-领域关系的基本原则\",\"106\":\"24#_2-领域关系的处理方式\",\"107\":\"24#_2-1-领域服务-domain-services\",\"108\":\"24#_2-2-领域事件-domain-events\",\"109\":\"24#_2-3-防腐层-anti-corruption-layer-acl\",\"110\":\"24#_2-4-应用服务-application-services\",\"111\":\"24#_3-具体领域关系的处理示例\",\"112\":\"24#_3-1-用户管理与订单管理\",\"113\":\"24#_3-2-订单管理与库存管理\",\"114\":\"24#_3-3-订单管理与支付管理\",\"115\":\"24#_3-4-商品管理与促销与优惠\",\"116\":\"24#_3-5-物流与配送与订单管理\",\"117\":\"24#总结-1\",\"118\":\"24@0\",\"119\":\"24@1\",\"120\":\"29\",\"121\":\"29#核心组件\",\"122\":\"29#工作原理\",\"123\":\"29#交换机类型\",\"124\":\"29#可靠性机制\",\"125\":\"29#应用场景\",\"126\":\"29@0\",\"127\":\"29@1\",\"128\":\"30\",\"129\":\"30#docker\",\"130\":\"30#centos\",\"131\":\"30#macos\",\"132\":\"30#windows\",\"133\":\"30#常见问题\",\"134\":\"30@0\",\"135\":\"30@1\",\"136\":\"31\",\"137\":\"31#主要特点\",\"138\":\"31#常见使用场景\",\"139\":\"31#工作原理简述\",\"140\":\"31#总结\",\"141\":\"31@0\",\"142\":\"31@1\",\"143\":\"32\",\"144\":\"32#创建连接\",\"145\":\"32#创建信道\",\"146\":\"32#声明交换机\",\"147\":\"32#声明队列\",\"148\":\"32#绑定交换机\",\"149\":\"32#消息发送\",\"150\":\"32#消息消费\",\"151\":\"32#可靠性保证\",\"152\":\"32@0\",\"153\":\"32@1\",\"154\":\"35\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,15],\"1\":[1,20],\"2\":[1,21],\"3\":[1,56],\"4\":[1,21],\"5\":[3,21],\"6\":[1,20],\"7\":[null,null,1],\"8\":[null,null,1],\"9\":[1],\"10\":[1,37],\"11\":[1,50],\"12\":[1,10],\"13\":[1,59],\"14\":[1,36],\"15\":[1,41],\"16\":[1,32],\"17\":[null,null,1],\"18\":[null,null,1],\"19\":[1,6],\"20\":[1,10],\"21\":[1,12],\"22\":[1,48],\"23\":[null,null,1],\"24\":[null,null,1],\"25\":[1,4],\"26\":[1,12],\"27\":[1,43],\"28\":[1,19],\"29\":[1,15],\"30\":[1,37],\"31\":[1,7],\"32\":[null,null,1],\"33\":[null,null,1],\"34\":[1,8],\"35\":[1,10],\"36\":[2,34],\"37\":[1,36],\"38\":[1,30],\"39\":[1,11],\"40\":[3,6],\"41\":[null,null,1],\"42\":[null,null,2],\"43\":[1,9],\"44\":[1,21],\"45\":[1,51],\"46\":[null,null,1],\"47\":[null,null,1],\"48\":[2],\"49\":[1,19],\"50\":[1,28],\"51\":[1,27],\"52\":[1,129],\"53\":[1,15],\"54\":[1,67],\"55\":[1,26],\"56\":[1,46],\"57\":[1,30],\"58\":[1,71],\"59\":[null,null,3],\"60\":[null,null,2],\"61\":[1,5],\"62\":[1,33],\"63\":[1,73],\"64\":[1,19],\"65\":[1,31],\"66\":[2],\"67\":[1,21],\"68\":[1,13],\"69\":[1,32],\"70\":[1,105],\"71\":[1,128],\"72\":[1,44],\"73\":[1,172],\"74\":[1,48],\"75\":[null,null,3],\"76\":[null,null,2],\"77\":[2,23],\"78\":[2,11],\"79\":[2,30],\"80\":[2,7],\"81\":[2,21],\"82\":[2,38],\"83\":[2,18],\"84\":[2,21],\"85\":[2,15],\"86\":[2,9],\"87\":[2,10],\"88\":[2,6],\"89\":[2,23],\"90\":[2,7],\"91\":[2,6],\"92\":[1,19],\"93\":[1,31],\"94\":[2,40],\"95\":[2,39],\"96\":[2,46],\"97\":[2,36],\"98\":[2,42],\"99\":[2,37],\"100\":[2,40],\"101\":[2,36],\"102\":[2,34],\"103\":[2,38],\"104\":[1,31],\"105\":[2,12],\"106\":[2],\"107\":[3,32],\"108\":[2,40],\"109\":[3,35],\"110\":[3,34],\"111\":[2],\"112\":[3,14],\"113\":[3,13],\"114\":[2,13],\"115\":[3,9],\"116\":[3,9],\"117\":[1,9],\"118\":[null,null,1],\"119\":[null,null,1],\"120\":[1],\"121\":[1,73],\"122\":[1,92],\"123\":[1,21],\"124\":[1,26],\"125\":[1,12],\"126\":[null,null,1],\"127\":[null,null,1],\"128\":[1],\"129\":[1,31],\"130\":[1,114],\"131\":[1],\"132\":[1],\"133\":[1,33],\"134\":[null,null,1],\"135\":[null,null,1],\"136\":[1,15],\"137\":[1,53],\"138\":[1,19],\"139\":[1,17],\"140\":[1,9],\"141\":[null,null,1],\"142\":[null,null,1],\"143\":[1],\"144\":[1,44],\"145\":[1,14],\"146\":[1,27],\"147\":[1,34],\"148\":[1,17],\"149\":[1,35],\"150\":[1,50],\"151\":[1,34],\"152\":[null,null,1],\"153\":[null,null,1],\"154\":[1,3]},\"averageFieldLength\":[1.3713726190329698,31.02057294613197,0.6186456561494287],\"storedFields\":{\"0\":{\"h\":\"字符串\",\"t\":[\"在 Java 中，字符串是一种非常重要的数据类型，用于表示和操作文本。字符串在 Java 中被实现为 String 类，它是 java.lang 包的一部分，因此使用时不需要显式导入。\"]},\"1\":{\"h\":\"字符串的特性\",\"t\":[\"不可变性: String 对象是不可变的，一旦创建，其值就不能更改。每当对字符串进行操作时，都会创建一个新的字符串对象。\",\"字符串池: Java 使用字符串池来提高效率和节省内存。当一个字符串字面量被创建时，它会被放入字符串池中，如果已经存在相同的字符串，则不会创建新的实例。\",\"提示\",\"String 类是 final 修饰的，因此不能被继承和改变。\"]},\"2\":{\"h\":\"创建字符串\",\"t\":[\"使用字符串字面量\",\"String str1 = \\\"Hello\\\"; String str2 = \\\"Hello\\\"; System.out.println(str1 == str2); // 输出 true，指向同一个字符串池中的对象\",\"通过 new 关键字\",\"String str3 = new String(\\\"Hello\\\"); String str4 = new String(\\\"Hello\\\"); System.out.println(str3 == str4); // 输出 false，创建了不同的对象 System.out.println(str1 == str3); // 输出 false，str3 不在字符串池中\"]},\"3\":{\"h\":\"常用字符串方法\",\"t\":[\"获取字符串长度\",\"String str = \\\"Hello\\\"; int length = str.length(); System.out.println(length); // 输出 5\",\"字符串拼接\",\"String str1 = \\\"Hello\\\"; String str2 = \\\"World\\\"; String str3 = str1 + \\\" \\\" + str2; System.out.println(str3); // 输出 \\\"Hello World\\\"\",\"字符串比较\",\"使用 equals\",\"String str1 = \\\"Hello\\\"; String str2 = \\\"Hello\\\"; boolean result = str1.equals(str2); System.out.println(result); // 输出 true\",\"使用 compareTo\",\"String str1 = \\\"Hello\\\"; String str2 = \\\"World\\\"; int result = str1.compareTo(str2); System.out.println(result); // 输出负数，因为 \\\"Hello\\\" 在字典顺序中小于 \\\"World\\\"\",\"截取字符串\",\"String str = \\\"Hello, World!\\\"; // 从第 7 位开始截取到第 12 位结束 String substr = str.substring(7, 12); System.out.println(substr); // 输出 \\\"World\\\"\",\"查找字符或字符串\",\"String str = \\\"Hello, World!\\\"; int index = str.indexOf('W'); System.out.println(index); // 输出 7 index = str.indexOf(\\\"World\\\"); System.out.println(index); // 输出 7\",\"替换字符或字符串\",\"String str = \\\"Hello, World!\\\"; String newStr = str.replace('H', 'h'); System.out.println(newStr); // 输出 \\\"hello, World!\\\" newStr = str.replace(\\\"World\\\", \\\"Java\\\"); System.out.println(newStr); // 输出 \\\"Hello, Java!\\\"\",\"字符串转换大小写\",\"String str = \\\"Hello, World!\\\"; String lower = str.toLowerCase(); String upper = str.toUpperCase(); System.out.println(lower); // 输出 \\\"hello, world!\\\" System.out.println(upper); // 输出 \\\"HELLO, WORLD!\\\"\"]},\"4\":{\"h\":\"字符串与字符数组的转换\",\"t\":[\"字符串转字符数组\",\"String str = \\\"Hello\\\"; char[] charArray = str.toCharArray(); System.out.println(Arrays.toString(charArray)); // 输出 [H, e, l, l, o]\",\"字符数组转字符串\",\"char[] charArray = {'H', 'e', 'l', 'l', 'o'}; String str = new String(charArray); System.out.println(str); // 输出 \\\"Hello\\\"\"]},\"5\":{\"h\":\"StringBuilder 和 StringBuffer\",\"t\":[\"StringBuilder\",\"StringBuilder 是一个可变的字符序列，线程不安全的，适用于在单线程环境下使用。\",\"StringBuilder sb = new StringBuilder(\\\"Hello\\\"); sb.append(\\\", World!\\\"); System.out.println(sb.toString()); // 输出 \\\"Hello, World!\\\"\",\"StringBuffer\",\"StringBuffer 与 StringBuilder 类似，但它是线程安全的，适用于在多线程环境下使用。\",\"StringBuffer sb = new StringBuffer(\\\"Hello\\\"); sb.append(\\\", World!\\\"); System.out.println(sb.toString()); // 输出 \\\"Hello, World!\\\"\"]},\"6\":{\"h\":\"总结\",\"t\":[\"Java 中的字符串是不可变的，可以通过字面量或 new 关键字创建。常用的方法包括获取长度、拼接、比较、子字符串、查找和替换。 为了提高效率，可以使用 StringBuilder 或 StringBuffer 来处理可变的字符串，但是需要注意线程安全问题。 理解和正确使用字符串操作是编写高效 Java 代码的关键。\"]},\"7\":{\"c\":[\"基础知识\"]},\"8\":{\"c\":[\"字符串\"]},\"9\":{\"h\":\"基础语法\"},\"10\":{\"h\":\"数据类型\",\"t\":[\"基本数据类型\",\"byte：8 位有符号整数，取值范围 -128 到 127。\",\"short：16 位有符号整数，取值范围 -32768 到 32767。\",\"int：32 位有符号整数，是最常用的整数类型。\",\"long：64 位有符号整数。\",\"float：单精度 32 位浮点数。\",\"double：双精度 64 位浮点数，精度更高。\",\"char：单个字符，用单引号括起来。\",\"boolean：只有 true 和 false 两个值。\",\"引用数据类型\",\"类、接口、数组等。\"]},\"11\":{\"h\":\"变量\",\"t\":[\"声明变量\",\"先指定数据类型，然后是变量名。例如：int num;\",\"初始化变量\",\"给变量赋予初始值。例如：num = 10;\",\"成员变量\",\"成员变量又称为实例变量，是直接声明在类中方法、构造方法或代码块外的变量。\",\"public class TestInstanceVar { // 成员变量 int instanceVar; public static void main(String[] args) { TestInstanceVar test = new TestInstanceVar(); test.instanceVar = 5; System.out.println(test.instanceVar); } }\",\"注意\",\"成员变量如果没有赋予初始值，系统会分配默认初始值，不同数据类型有不同的默认初始值。\",\"局部变量\",\"声明在方法内的变量（包括方法声明和代码块中的）。\",\"public class Main { public void method() { // 局部变量 int localVar = 10; System.out.println(localVar); } }\",\"注意\",\"局部变量没有默认初始值，使用之前必须赋值，否则报错。\",\"静态变量\",\"类变量也称为静态变量，用 static 关键字声明。它们在类加载时被初始化，所有对象共享同一个静态变量。\",\"public class Main { // 静态变量 static int staticVar; public static void main(String[] args) { Main.staticVar = 10; System.out.println(Main.staticVar); } }\"]},\"12\":{\"h\":\"常量\",\"t\":[\"使用 final 关键字定义常量。例如：final double PI = 3.14;\"]},\"13\":{\"h\":\"运算符\",\"t\":[\"算术运算符\",\"+（加法）、-（减法）、*（乘法）、/（除法）、%（取余）。\",\"关系运算符\",\"==（等于）、!=（不等于）、>（大于）、<（小于）、>=（大于等于）、<=（小于等于）。\",\"逻辑运算符\",\"&&（逻辑与）、||（逻辑或）、!（逻辑非）。\",\"位运算符\",\"&（按位与）、|（按位或）、^（按位异或）、~（按位取反）、<<（左移）、>>（右移）。\",\"提示\",\"位运算是直接对二进制补码进行运算。\",\"三目运算符\",\"三目运算符（也称为条件运算符）是一种简洁的条件语句，可以用来替代简单的 if-else 语句。其语法格式如下：\",\"result = (condition) ? value1 : value2;\",\"condition：是一个布尔表达式。\",\"如果 condition 为 true，则 result 的值为 value1。\",\"如果 condition 为 false，则 result 的值为 value2。\"]},\"14\":{\"h\":\"流程控制\",\"t\":[\"if-else 语句\",\"根据条件执行不同的代码块。\",\"public void test_if_else() { if (condition) { // 执行的代码 } else { // 执行的代码 } }\",\"switch 语句\",\"根据表达式的值选择执行不同的代码块。\",\"public void test_switch() { switch (expression) { case value1: // 执行的代码 break; case value2: // 执行的代码 break; default: // 执行的代码 } }\",\"for 循环\",\"用于重复执行一段代码。\",\"public void test_for() { for (initialization; condition; update) { // 执行的代码 } }\",\"while 循环\",\"当条件为真时，执行循环体。\",\"public void test_while() { while (condition) { // 执行的代码 } }\",\"do-while 循环\",\"先执行一次循环体，然后再判断条件。\",\"public void test_do_while() { do { // 执行的代码 } while (condition); }\",\"提示\",\"控制跳转语句：\",\"break：结束单层循环\",\"continue：结束当前循环，进入下一次循环\",\"return：结束当前方法\"]},\"15\":{\"h\":\"数组\",\"t\":[\"定义数组\",\"// 数据类型[] 数组名; 推荐使用该方式 int[] arr1; // 数据类型 数组名[]; int arr2[];\",\"初始化数组\",\"动态初始化：只指定长度，由系统给出初始化值\",\"// 数据类型[] 数组名 = new 数据类型[数组长度]; // 定义int类型的数组 arr，数组可以存放 3 个 int 类型的值 int[] arr = new int[3]\",\"静态初始化：给出初始化值，由系统决定长度\",\"访问数组元素\",\"通过索引访问，索引从 0 开始，最大索引为数组长度减 1。例如：arr[0]\",\"注意\",\"这里的数组指的是一维数组，还有二维数组以及三维数组，因为二维数组和三维数组相对一维数组更复杂一些，而且在 Java 中使用较少就不做过多介绍，如感兴趣可查阅 百度百科-多维数组\"]},\"16\":{\"h\":\"方法\",\"t\":[\"方法就是完成特定功能的代码块。\",\"定义方法\",\"包括返回值类型、方法名、参数列表和方法体。\",\"语法格式：\",\"访问权限修饰符 返回值类型 方法名(参数类型 参数名1，参数类型 参数名2 ....){ 方法体; return 返回值; }\",\"示例：\",\"public int add(int a, int b) { return a + b; }\",\"调用方法\",\"int result = add(1, 2);\",\"提示\",\"方法还分构造方法和普通方法，后续 面向对象 章节会详细介绍。\"]},\"17\":{\"c\":[\"基础知识\"]},\"18\":{\"c\":[\"基础语法\"]},\"19\":{\"h\":\"代码注释\",\"t\":[\"Java 注释有三种主要类型：单行注释、多行注释和文档注释。每种注释类型都有其特定的用途和格式。\"]},\"20\":{\"h\":\"单行注释\",\"t\":[\"单行注释以 // 开头，用于注释单行代码。\",\"// 这是一个单行注释 int x = 10; // 变量 x 被初始化为 10\"]},\"21\":{\"h\":\"多行注释\",\"t\":[\"多行注释以 /* 开头，并以 */ 结束，可以跨多行使用。\",\"/* 这是一个多行注释。 它可以跨越多行进行注释。 */ int y = 20;\"]},\"22\":{\"h\":\"文档注释\",\"t\":[\"文档注释以 /** 开头，并以 */ 结束，通常用于为类、方法和成员变量生成 API 文档。文档注释会被 JavaDoc 工具解析，用于生成HTML格式的文档。\",\"/** * 这是一个文档注释。 * 它通常用于描述类、方法或变量。 */ public class Example { /** * 这是一个变量 z 的文档注释。 */ private int z; /** * 这是一个方法的文档注释。 * @param a 这是参数 a 的描述。 * @param b 这是参数 b 的描述。 * @return 返回值的描述。 */ public int add(int a, int b) { return a + b; } }\",\"文档注释常见的标签包括：\",\"@param：描述方法的参数。\",\"@return：描述方法的返回值。\",\"@throws 或 @exception：描述方法可能抛出的异常。\",\"@see：提供参考链接。\",\"@since：说明某个功能从哪个版本开始存在。\",\"@deprecated：标记一个方法或类已过时。\",\"使用正确的注释可以使代码更易于理解和维护。\"]},\"23\":{\"c\":[\"基础知识\"]},\"24\":{\"c\":[\"代码注释\"]},\"25\":{\"h\":\"基本数据类型缓存池\",\"t\":[\"Java 的基本数据类型缓存池机制是一种优化策略，用于减少内存分配和提高性能。\"]},\"26\":{\"h\":\"缓存池简介\",\"t\":[\"Java 中的缓存池主要用于以下基本数据类型的包装类：\",\"Boolean\",\"Byte\",\"Short\",\"Integer\",\"Long\",\"Character\",\"这些包装类会缓存一定范围内的常用数值，以减少对象创建的开销，提升性能。\"]},\"27\":{\"h\":\"整数类型缓存池\",\"t\":[\"Byte 缓存池\",\"Byte 类型的所有值（-128 到 127）都被缓存。\",\"Byte a = Byte.valueOf((byte) 10); Byte b = Byte.valueOf((byte) 10); System.out.println(a == b); // 输出 true\",\"Short 缓存池\",\"Short 类型的值在 -128 到 127 范围内会被缓存。\",\"Short a = Short.valueOf((short) 100); Short b = Short.valueOf((short) 100); System.out.println(a == b); // 输出 true\",\"Integer 缓存池\",\"Integer 类型默认缓存值在 -128 到 127 范围内，可以通过启动参数修改缓存范围。\",\"Integer a = Integer.valueOf(100); Integer b = Integer.valueOf(100); System.out.println(a == b); // 输出 true Integer c = Integer.valueOf(200); Integer d = Integer.valueOf(200); System.out.println(c == d); // 输出 false\",\"可以通过 JVM 参数 -XX:AutoBoxCacheMax=<size> 来调整缓存范围，例如：\",\"java -XX:AutoBoxCacheMax=200\",\"Long 缓存池\",\"Long 类型的值在 -128 到 127 范围内会被缓存。\",\"Long a = Long.valueOf(100L); Long b = Long.valueOf(100L); System.out.println(a == b); // 输出 true\"]},\"28\":{\"h\":\"字符类型缓存池\",\"t\":[\"Character 缓存池\",\"Character 类型的值在 0 到 127 范围内会被缓存。\",\"Character a = Character.valueOf((char) 65); Character b = Character.valueOf((char) 65); System.out.println(a == b); // 输出 true\"]},\"29\":{\"h\":\"布尔类型缓存池\",\"t\":[\"Boolean 类型的 true 和 false 两个值都被缓存。\",\"Boolean a = Boolean.valueOf(true); Boolean b = Boolean.valueOf(true); System.out.println(a == b); // 输出 true\"]},\"30\":{\"h\":\"缓存池的使用\",\"t\":[\"自动装箱和拆箱\",\"Java的自动装箱（autoboxing）和拆箱（unboxing）机制在缓存池中也发挥作用。例如：\",\"Integer a = 100; // 自动装箱，等价于 Integer.valueOf(100) Integer b = 100; System.out.println(a == b); // 输出 true Integer c = 200; Integer d = 200; System.out.println(c == d); // 输出 false\",\"在 Integer 范围 -128 到 127 内，使用的是缓存对象，所以 a == b 为 true。而超过此范围时，创建的是新对象，所以 c == d 为 false。\"]},\"31\":{\"h\":\"总结\",\"t\":[\"Java 的基本数据类型缓存池是一个性能优化机制，通过缓存常用值来减少对象创建的开销，提高系统性能。合理理解和利用缓存池机制可以有效提升 Java 程序的效率。\"]},\"32\":{\"c\":[\"基础知识\"]},\"33\":{\"c\":[\"数据缓存池\"]},\"34\":{\"h\":\"关键字\",\"t\":[\"Java 是一种强类型、面向对象的编程语言，它有许多保留关键字，这些关键字在编写代码时有特殊的含义和用途。以下是 Java 关键字的详细列表和它们的简要说明：\"]},\"35\":{\"h\":\"访问控制修饰符\",\"t\":[\"private：私有访问权限，只能在所属类内访问。\",\"protected：受保护访问权限，可以在同一个包内及不同包的子类中访问。\",\"public：公共访问权限，可以在任何地方访问。\"]},\"36\":{\"h\":\"类、方法和变量修饰符\",\"t\":[\"abstract：声明抽象类或抽象方法。\",\"class：声明一个类。\",\"extends：表示继承一个类。\",\"final：声明最终的类、方法或变量，不能被继承或修改。\",\"implements：表示一个类实现接口。\",\"interface：声明一个接口。\",\"native：声明一个本地方法，该方法用其他语言（如 C/C++）编写。\",\"new：创建新实例。\",\"static：声明类的静态成员。\",\"strictfp：用于精确浮点运算。\",\"synchronized：声明方法或代码块为同步。\",\"transient：声明变量不被序列化。\",\"volatile：声明变量每次使用时都从主存中获取。\"]},\"37\":{\"h\":\"控制语句\",\"t\":[\"if：条件语句。\",\"else：条件语句的其他分支。\",\"switch：开关语句。\",\"case：开关语句中的分支。\",\"default：开关语句中的默认分支。\",\"for：循环语句。\",\"while：循环语句。\",\"do：循环语句，与 while 结合使用。\",\"break：跳出当前循环或开关语句。\",\"continue：跳过当前循环中的剩余语句，进入下一次循环。\",\"return：从方法中返回结果。\",\"try：捕获异常的代码块。\",\"catch：处理 try 语句块中抛出的异常。\",\"finally：确保执行的代码块，不论是否发生异常。\",\"throw：抛出一个异常。\",\"throws：声明方法可能抛出的异常。\"]},\"38\":{\"h\":\"基本类型\",\"t\":[\"boolean：布尔类型，值为 true 或 false。\",\"byte：字节类型，8 位整数。\",\"char：字符类型，16 位 Unicode 字符。\",\"short：短整型，16 位整数。\",\"int：整型，32 位整数。\",\"long：长整型，64 位整数。\",\"float：单精度浮点型，32 位浮点数。\",\"double：双精度浮点型，64 位浮点数。\"]},\"39\":{\"h\":\"其他关键字\",\"t\":[\"super：引用父类的对象。\",\"this：引用当前类的对象。\",\"void：声明方法无返回值。\",\"import：引入其他包。\",\"package：定义包。\"]},\"40\":{\"h\":\"保留字（未来可能使用）\",\"t\":[\"goto：保留关键字，Java 中未使用。\",\"const：保留关键字，Java 中未使用。\"]},\"41\":{\"c\":[\"基础知识\"]},\"42\":{\"c\":[\"Java 关键字\"]},\"43\":{\"h\":\"数据类型转换\",\"t\":[\"在 Java 中，数据类型转换分为两种：自动类型转换（隐式类型转换）和强制类型转换（显式类型转换）。\"]},\"44\":{\"h\":\"自动类型转换\",\"t\":[\"当把一个取值范围小的数据类型的值赋给一个取值范围大的数据类型的变量时，会自动进行类型转换。例如，将 byte 类型的值赋给 int 类型的变量：\",\"byte b = 10; int i = b; // 自动转换，不会有问题\",\"提示\",\"自动转换的顺序通常为：byte -> short -> int -> long -> float -> double\"]},\"45\":{\"h\":\"强制类型转换\",\"t\":[\"当把一个取值范围大的数据类型的值赋给一个取值范围小的数据类型的变量时，需要进行强制类型转换。 语法：(目标数据类型) 值\",\"int num = 128; // 将 int 类型的值赋给 byte 类型的变量： byte b = (byte) num;\",\"注意\",\"强制类型转换可能会导致数据精度丢失或溢出。\",\"下面是一个示例，展示了数据类型转换的情况：\",\"public static void main(String[] args) { // 自动类型转换 int intValue = 100; double doubleValue = intValue; // 自动将 int 转换为 double System.out.println(\\\"自动转换后的 double 值: \\\" + doubleValue); // 强制类型转换 double doubleNum = 3.14; int intNum = (int) doubleNum; // 强制将 double 转换为 int，小数部分会被截断 System.out.println(\\\"强制转换后的 int 值: \\\" + intNum); // 可能导致数据溢出的强制类型转换 int largeValue = 130; byte byteValue = (byte) largeValue; // 可能会导致数据溢出 System.out.println(\\\"可能溢出的强制转换后的 byte 值: \\\" + byteValue); }\"]},\"46\":{\"c\":[\"基础知识\"]},\"47\":{\"c\":[\"数据类型转换\"]},\"48\":{\"h\":\"ArrayList 源码分析\"},\"49\":{\"h\":\"数据存储结构\",\"t\":[\"ArrayList 内部使用一个 动态数组Object[] elementData 来存储元素。初始容量为 10，当元素数量超过当前容量时，会进行扩容操作。\",\"提示\",\"动态数组：数组原本是 定长 的，如果超过定长长度，扩容则需要申请新的数组长度，并把原数组元素拷贝到新数组中，从而实现动态数组。\"]},\"50\":{\"h\":\"类声明\",\"t\":[\"ArrayList 继承自 AbstractList 类，并实现了 List, RandomAccess, Cloneable 和 Serializable 接口。\",\"public class ArrayList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable { // 内部字段和方法定义 }\",\"AbstractList：提供了 List 接口的骨架实现。\",\"List：定义了列表数据结构的一般行为。\",\"RandomAccess：标识实现支持快速随机访问。\",\"Cloneable：支持对象的浅拷贝。\",\"Serializable：支持对象的序列化。\"]},\"51\":{\"h\":\"核心字段\",\"t\":[\"// 序列化版本 UID private static final long serialVersionUID = 8683452581122892189L; // 默认容量 private static final int DEFAULT_CAPACITY = 10; // 空数组实例，避免默认大小的空数组占用内存 private static final Object[] EMPTY_ELEMENTDATA = {}; // 默认容量空数组 private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; // 存储元素的数组 transient Object[] elementData; // 实际元素个数 private int size;\"]},\"52\":{\"h\":\"构造方法\",\"t\":[\"提供了多种构造方法，包括默认构造方法（初始容量为 10）、指定初始容量的构造方法、传入集合进行初始化的构造方法。\",\"// 默认构造方法 public ArrayList() { this.elementData = new Object[DEFAULT_CAPACITY]; } // 指定初始容量的构造方法 public ArrayList(int initialCapacity) { if (initialCapacity > 0) { this.elementData = new Object[initialCapacity]; } else if (initialCapacity == 0) { this.elementData = EMPTY_ELEMENTDATA; } else { throw new IllegalArgumentException(\\\"Illegal Capacity: \\\" + initialCapacity); } } // 传入集合进行初始化的构造方法 public ArrayList(Collection<? extends E> c) { elementData = c.toArray(); if ((size = elementData.length) != 0) { // c.toArray 可能返回的不是 Object 类型的数组，需要进行类型转换 if (elementData.getClass() != Object[].class) elementData = Arrays.copyOf(elementData, size, Object[].class); } else { // 初始化一个空数组 this.elementData = EMPTY_ELEMENTDATA; } }\",\"注意\",\"观察传入集合进行初始化的构造方法看出，只要实现 Collection 类的都可以作为入参。在通过转为数组以及拷贝 Arrays.copyOf 到 Object[]集合中再赋值给属性 elementData 。\",\"测试示例：\",\" @Test public void test() { List<Integer> list1 = Arrays.asList(1, 2, 3); System.out.println(\\\"通过数组转换：\\\" + (list1.toArray().getClass() == Object[].class)); ArrayList<Integer> list2 = new ArrayList<Integer>(Arrays.asList(1, 2, 3)); System.out.println(\\\"通过集合转换：\\\" + (list2.toArray().getClass() == Object[].class)); }\",\"结果：\",\"通过数组转换：false 通过集合转换：true\",\"小结：\",\"public Object[] toArray()返回的类型不一定就是Object[]，其类型取决于其返回的实际类型，毕竟 Object 是父类，它可以是其他任意类型。子类实现和父类同名的方法，仅仅返回值不一致时，默认调用的是子类的实现方法\",\"造成原因：\",\"Arrays.asList 使用的是：Arrays.copyOf(this.a, size,(Class<? extends T[]>) a.getClass());； ArrayList 构造函数使用的是：Arrays.copyOf(elementData, size, Object[].class);\",\"Arrays.asList 构建的集合特点：\",\"不能赋值给 java.util.ArrayList\",\"不能再添加元素\",\"不能删除元素\",\" 从以上的类继承体系图可以看出：\",\"Arrays.asList 构建出来的 List 与 new ArrayList 得到的 List，最终根据多态找到的具体实现，不是同一个 ArrayList。Arrasys 下的 ArrayList 是一个私有类，只能通过 asList 使用，不能单独创建。\",\"另外这个 ArrayList 不能添加和删除，主要是因为它的实现方式，可以参考 Arrays 类中，这是部分源码\",\"private static class ArrayList<E> extends AbstractList<E> implements RandomAccess, java.io.Serializable { }\",\"提示\",\"Arrays是一个工具包，里面还有一些非常好用的方法，例如；二分查找Arrays.binarySearch、排序Arrays.sort等\"]},\"53\":{\"h\":\"初始容量\",\"t\":[\"当 ArrayList 初始化时，如果未指定初始容量，则默认为 10。\",\"public ArrayList() { this.elementData = new Object[DEFAULT_CAPACITY]; }\"]},\"54\":{\"h\":\"扩容机制\",\"t\":[\"当添加元素导致数组容量不足时，会进行扩容操作。新的容量为原容量的 1.5 倍。\",\"// 添加元素 public boolean add(E e) { ensureCapacityInternal(size + 1); // 检查容量是否足够 elementData[size++] = e; return true; } // 检查容量是否足够 private void ensureExplicitCapacity(int minCapacity) { modCount++; // overflow-conscious code if (minCapacity - elementData.length > 0) grow(minCapacity); } // 扩容方法 private void grow(int minCapacity) { int oldCapacity = elementData.length; // 核心扩容逻辑：新容量 = 旧容量 + 旧容量右移 1 位，等价于扩容为原容量的 1.5 倍 int newCapacity = oldCapacity + (oldCapacity >> 1); if (newCapacity - minCapacity < 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE > 0) newCapacity = hugeCapacity(minCapacity); elementData = Arrays.copyOf(elementData, newCapacity); }\",\"提示\",\"当已知要填充多少个元素到 ArrayList 中时，为了提高性能，减少 ArrayList 中的拷贝操作，此时可以直接初始化一个预先设定好的长度。\",\"例如：List<String> list = new ArrayList<>(15);\"]},\"55\":{\"h\":\"元素添加\",\"t\":[\"add(E e) 方法直接在数组末尾添加元素。\",\"public boolean add(E e) { ensureCapacityInternal(size + 1); // 检查容量是否足够 elementData[size++] = e; return true; }\",\"add(int index, E element) 方法在指定位置插入元素，需要将指定位置及之后的元素向后移动。\",\"public void add(int index, E element) { rangeCheckForAdd(index); ensureCapacityInternal(size + 1); System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++; }\"]},\"56\":{\"h\":\"元素删除\",\"t\":[\"remove(int index) 方法删除指定位置的元素，并将其后的元素向前移动。\",\"public E remove(int index) { rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved > 0) System.arraycopy(elementData, index + 1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue; }\",\"remove(Object o) 方法通过遍历数组找到匹配元素并删除。\",\"public boolean remove(Object o) { if (o == null) { for (int index = 0; index < size; index++) if (elementData[index] == null) { fastRemove(index); return true; } } else { for (int index = 0; index < size; index++) if (o.equals(elementData[index])) { fastRemove(index); return true; } } return false; } private void fastRemove(int index) { int numMoved = size - index - 1; if (numMoved > 0) System.arraycopy(elementData, index + 1, elementData, index, numMoved); elementData[--size] = null; }\"]},\"57\":{\"h\":\"遍历方式\",\"t\":[\"可以通过索引遍历、迭代器遍历等方式。例如：\",\"public void test() { List<String> list = new ArrayList<>(); list.add(\\\"a\\\"); list.add(\\\"b\\\"); list.add(\\\"c\\\"); // for 循环索引遍历 for (int i = 0; i < list.size(); i++) { // 操作元素 } // 迭代器遍历 Iterator<E> iterator = list.iterator(); while (iterator.hasNext()) { // 操作元素 } }\"]},\"58\":{\"h\":\"总结\",\"t\":[\"动态调整大小：\",\"ArrayList 会根据需要自动调整其容量。初始容量可以指定，如果不指定，则使用默认容量，并且在第一次添加元素时进行第一次扩容为默认容量 10。当元素数量超过当前容量时，ArrayList 会继续进行扩容。\",\"基于数组实现：\",\"ArrayList 内部是通过数组实现的，因此可以通过索引（index）快速访问元素，时间复杂度为 O(1)。\",\"有序性：\",\"ArrayList 保持元素的插入顺序，元素可以通过索引进行访问和操作。\",\"随机访问：\",\"由于 ArrayList 基于数组实现，可以通过索引进行快速的随机访问。\",\"允许重复元素：\",\"ArrayList 允许包含重复的元素。\",\"线程不安全：\",\"ArrayList 不是线程安全的，如果在多线程环境中使用，必须手动同步或者使用线程安全的集合类，如 Vector 或 Collections.synchronizedList()。\",\"扩容策略：\",\"当需要扩容时，ArrayList 会将当前容量增加 50% 即扩容为当前容量的 1.5 倍，具体计算逻辑为：newCapacity = oldCapacity + ( oldCapacity >> 1)。\",\"元素类型：\",\"ArrayList 是一个泛型类，可以存储任意类型的对象（包括基本类型的包装类）。\",\"快速插入和删除：\",\"对于在末尾添加和删除元素，ArrayList 的性能较好（时间复杂度为 O(1)）。但是，在中间位置插入或删除元素需要移动后续的元素，时间复杂度为 O(n)。\",\"内存占用：\",\"由于需要保留一定的空余容量以便动态扩展，ArrayList 可能会比实际存储的数据占用更多的内存。\",\"提示\",\"ArrayList 是 Java 中常用的动态数组实现，具有高效的随机访问性能，但在插入和删除元素时可能需要移动大量元素，性能相对较差。在实际应用中，需要根据具体场景选择合适的数据结构。\"]},\"59\":{\"c\":[\"集合框架(容器)\"]},\"60\":{\"c\":[\"ArrayList 源码\"]},\"61\":{\"h\":\"集合框架介绍\",\"t\":[\"Java 集合框架是一组用于存储和操作一组对象的接口和类的集合，提供了丰富的数据结构和操作方法，以满足不同的编程需求。\",\"集合体系图\"]},\"62\":{\"h\":\"主要接口\",\"t\":[\"Collection 接口\",\"这是集合框架的根接口，定义了集合的基本操作，如添加、删除、遍历等。\",\"其子接口包括 List 、 Set 和 Queue 。\",\"List 接口\",\"是一个有序的、可重复的集合。\",\"常见的实现类有 ArrayList 、 LinkedList 。\",\"Set 接口\",\"是一个不允许重复元素的集合。\",\"实现类如 HashSet 、 TreeSet 等。\",\"Queue 接口\",\"用于实现队列数据结构，遵循先进先出（FIFO）原则。\",\"例如 PriorityQueue 。\",\"Map 接口\",\"用于存储键值对形式的数据。\",\"常见的实现类有 HashMap 、 TreeMap 等。\"]},\"63\":{\"h\":\"常见实现类\",\"t\":[\"ArrayList（常用） \",\"基于动态数组实现，支持随机访问，尾部添加和删除效率高，非尾部插入和删除效率低。\",\"示例：\",\"ArrayList<String> list = new ArrayList<>(); list.add(\\\"Apple\\\"); list.add(\\\"Banana\\\");\",\"LinkedList\",\"基于双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)实现，在插入和删除操作（特别是在列表头部和中间）时效率较高。\",\"例如：\",\"LinkedList<String> linkedList = new LinkedList<>(); linkedList.addFirst(\\\"Orange\\\"); linkedList.addLast(\\\"Mango\\\");\",\"HashSet\",\"基于哈希表实现，不允许重复元素，元素的存储顺序是不确定的。\",\"用法：\",\"HashSet<String> set = new HashSet<>(); set.add(\\\"Grape\\\");\",\"TreeSet\",\"基于红黑树实现，元素会自动按照自然顺序或指定的比较器进行排序。\",\"示例：\",\"TreeSet<String> treeSet = new TreeSet<>(); treeSet.add(\\\"Pear\\\");\",\"HashMap（常用） \",\"基于哈希表实现，允许键值对为 null ，存储键值对时不保证顺序。\",\"比如：\",\"HashMap<String, Integer> map = new HashMap<>(); map.put(\\\"Key1\\\", 10);\",\"TreeMap\",\"基于红黑树实现，按照键的自然顺序或指定的比较器对键进行排序。\",\"像这样：\",\"TreeMap<String, Double> treeMap = new TreeMap<>(); treeMap.put(\\\"Key2\\\", 20.5);\"]},\"64\":{\"h\":\"选择合适的集合类型\",\"t\":[\"如果需要快速随机访问和在尾部进行高效的添加和删除操作，选择 ArrayList 。\",\"如果需要在列表的头部和中间频繁进行插入和删除操作，使用 LinkedList 。\",\"当不允许重复元素且不关心元素顺序时， HashSet 是个好选择。\",\"若需要元素自动排序，可考虑 TreeSet 。\",\"对于键值对存储，若不关心键的顺序， HashMap 适用；若要对键进行排序，选择 TreeMap 。\"]},\"65\":{\"h\":\"集合的遍历\",\"t\":[\"对于 List 集合（如 ArrayList 、 LinkedList ）：\",\"使用 for 循环通过索引遍历。\",\"使用迭代器遍历。\",\"增强型 for 循环遍历。\",\"对于 Set 集合（如 HashSet 、 TreeSet ）：\",\"通常使用迭代器或增强型 for 循环遍历。\",\"对于 Map 集合（如 HashMap 、 TreeMap ）：\",\"通过 keySet 获取键的集合，然后遍历键获取对应的值。\",\"使用 entrySet 获取键值对的集合进行遍历。\",\"总之，Java 集合框架提供了丰富的选择，理解它们的特点和适用场景对于编写高效、正确的代码至关重要。\"]},\"66\":{\"h\":\"LinkedList 源码分析\"},\"67\":{\"h\":\"数据结构\",\"t\":[\"LinkedList 底层基于 双向链表 实现。\",\"链表是一种线性数据结构，其中元素按顺序排列，每个元素称为节点（Node）。\",\"每个节点包含三个部分：数据部分、指向下一个节点的指针（next）和指向前一个节点的指针（prev）。\",\"头节点：前置指针为 NULL ，后置指针指向第一个节点\",\"尾尾点：后置指针为 NULL ，前置指针指向前一个节点\"]},\"68\":{\"h\":\"双向链表结构\",\"t\":[\"private static class Node<E> { E item; Node<E> next; Node<E> prev; Node(Node<E> prev, E element, Node<E> next) { this.item = element; this.next = next; this.prev = prev; } }\"]},\"69\":{\"h\":\"初始化\",\"t\":[\"构造方法\",\"public LinkedList() { } public LinkedList(Collection<? extends E> c) { this(); addAll(c); }\",\"初始化方式\",\"import java.util.LinkedList; // 1. 普通方式 LinkedList<String> linkedList = new LinkedList<>(); // 2. Arrays.asList LinkedList<String> linkedList = new LinkedList<>(Arrays.asList(\\\"a\\\", \\\"b\\\")); // 3. 内部类 LinkedList<String> linkedList = new LinkedList<>() { { add(\\\"a\\\"); add(\\\"b\\\"); add(\\\"c\\\"); } }; // 4. Collections.nCopies LinkedList<String> linkedList = new LinkedList<>(Collections.nCopies(3, \\\"a\\\"));\"]},\"70\":{\"h\":\"插入元素\",\"t\":[\"插入操作分为三种：头插、尾插和中间插。\",\"// 默认使用尾插进行插入 public boolean add(E e) { linkLast(e); return true; } // 指定位置插入 public void add(int index, E element) { checkPositionIndex(index); if (index == size) linkLast(element); else linkBefore(element, node(index)); }\",\"头插\",\"private void linkFirst(E e) { final Node<E> f = first; final Node<E> newNode = new Node<>(null, e, f); first = newNode; if (f == null) last = newNode; else f.prev = newNode; size++; modCount++; }\",\"获取当前链表的第一个节点，赋值给 f\",\"创建新的节点对象new Node<>(null, e, f)，其中null表示前一个节点引用，e表示当前节点数据，f表示后一个节点引用（即当前链表的第一个节点）\",\"first = newNode;: 将新创建的节点设置为链表的头节点\",\" if (f == null) 说明链表为空，新添加的节点 newNode 也是链表的尾节点，则更新尾节点\",\"否则，将原来的第一个节点 f 的 prev 设置为 newNode\",\"尾插\",\" void linkLast(E e) { final Node<E> l = last; final Node<E> newNode = new Node<>(l, e, null); last = newNode; if (l == null) { first = newNode; } else l.next = newNode; size++; modCount++; }\",\"获取当前链表的最后一个节点，赋值给 l\",\"创建新的节点对象new Node<>(l, e, null)，其中l表示前一个节点引用（即最后一个节点），e表示当前节点数据，null表示后一个节点\",\"last = newNode;: 将新创建的节点设置为链表的尾节点\",\"if (l == null) 说明链表为空，新添加的节点 newNode 也是链表的头节点，则更新头节点\",\"否则，将原来的最后一个节点 l 的 next 设置为 newNode \",\"中间插\",\"位置定位\",\"/** * 获取指定索引位置的节点 */ Node<E> node(int index) { // assert isElementIndex(index); if (index < (size >> 1)) { Node<E> x = first; for (int i = 0; i < index; i++) x = x.next; return x; } else { Node<E> x = last; for (int i = size - 1; i > index; i--) x = x.prev; return x; } }\",\"if (index < (size >> 1)) ：判断给定的 index 是否小于链表大小的一半\",\"如果index小于链表大小的一半，则从链表的头开始遍历，直到找到索引为index的节点\",\"否则，从链表的尾部开始遍历，直到找到索引为index的节点\",\"执行插入\",\"void linkBefore(E e, Node<E> succ) { // assert succ != null; final Node<E> pred = succ.prev; final Node<E> newNode = new Node<>(pred, e, succ); succ.prev = newNode; if (pred == null) first = newNode; else pred.next = newNode; size++; modCount++; }\",\"获取当前节点 succ 的前一个节点，赋值给 pred\",\"创建新的节点对象new Node<>(pred, e, succ)，其中pred表示前一个节点引用（即当前节点 succ 的前一个节点），e 表示当前节点数据，succ表示后一个节点引用（即当前节点 succ）\",\"succ.prev = newNode;: 将 succ 节点的前一个节点引用设置为新节点 newNode\",\"判断 pred 是否为空，如果为空，则新添加的节点 newNode 是链表的头节点，将新节点 newNode 设置为链表的第一个节点\",\"否则，将 pred 的 next 设置为新节点 newNode\"]},\"71\":{\"h\":\"删除元素\",\"t\":[\"// 和删除头节点一致 public E remove() { return removeFirst(); } // 根据索引删除 public E remove(int index) { checkElementIndex(index); return unlink(node(index)); } // 根据指定对象删除 public boolean remove(Object o) { if (o == null) { for (Node<E> x = first; x != null; x = x.next) { if (x.item == null) { unlink(x); return true; } } } else { for (Node<E> x = first; x != null; x = x.next) { if (o.equals(x.item)) { unlink(x); return true; } } } return false; } // 删除头节点 public E removeFirst() { final Node<E> f = first; if (f == null) throw new NoSuchElementException(); return unlinkFirst(f); } // 删除尾节点 public E removeLast() { final Node<E> l = last; if (l == null) throw new NoSuchElementException(); return unlinkLast(l); } // 按照集合批量删除，底层是 Iterator 删除 public boolean removeAll(Collection<?> c) { Objects.requireNonNull(c); boolean modified = false; Iterator<?> it = iterator(); while (it.hasNext()) { if (c.contains(it.next())) { it.remove(); modified = true; } } return modified; }\",\"提示\",\"删除操作的源码都差不多，分为删除首尾节点与其他节点时候，对节点的 解链 操作。\",\"解链(删除节点)\",\" E unlink(Node<E> x) { // assert x != null; // 保存要删除节点的信息 final E element = x.item; final Node<E> next = x.next; final Node<E> prev = x.prev; // 处理头节点 if (prev == null) { first = next; } else { prev.next = next; x.prev = null; } // 处理尾节点 if (next == null) { last = prev; } else { next.prev = prev; x.next = null; } // 清理被删除节点 x.item = null; // 更新链表大小和修改计数器 size--; modCount++; return element; }\",\"提示\",\"x：待删除的节点\",\"x.next：待删除节点的下一个节点\",\"x.prev：待删除节点的上一个节点\",\"保存要删除节点的信息\",\"判断删除节点是否为头节点，如果是则将头节点（first）指向下一个节点，否则将删除节点（x） 的上一个节点的引用（next）指向 删除节点（x） 的下一个节点，并断开删除节点（x） 与 上一个节点的连接（将 x.prev 设置为 null））\",\"判断删除节点是否为尾节点，如果是则将尾节点（last）指向上一个节点，否则将删除节点（x） 的下一个节点的引用（prev）指向 删除节点（x）的上一个节点，并断开删除节点（x） 与 下一个节点的连接（将 x.next 设置为 null）\",\"清理被删除节点\",\"更新链表大小和修改计数器\",\"返回被删除节点的元素值\",\"解链头节点（删除头节点）\",\"private E unlinkFirst(Node<E> f) { // assert f == first && f != null; final E element = f.item; final Node<E> next = f.next; f.item = null; f.next = null; // help GC first = next; if (next == null) last = null; else next.prev = null; size--; modCount++; return element; }\",\"保存被删除节点的元素\",\"获取被删除节点的下一个节点\",\"清理被删除节点的元素和引用\",\"更新链表头节点\",\"处理链表尾节点：如果被删除节点 f 是链表的最后一个节点，则将链表的尾节点（last）设置为 null。否则将下一个节点的引用（next.prev）设置 null，即删除节点的下一个节点变为链表的头节点或中间的某个节点，不在需要指向前一个节点\",\"更新链表大小和修改计数器\",\"返回被删除节点的元素值\",\"解链尾节点（删除尾节点）\",\"private E unlinkLast(Node<E> l) { // assert l == last && l != null; final E element = l.item; final Node<E> prev = l.prev; l.item = null; l.prev = null; // help GC last = prev; if (prev == null) first = null; else prev.next = null; size--; modCount++; return element; }\",\"保存被删除节点的元素\",\"获取被删除节点的上一个节点\",\"清理被删除节点的元素和引用\",\"处理链表头节点：如果被删除节点 l 是链表的唯一节点（即它没有上一个节点），则将链表的头节点 first 也设置为 null。否则，将被删除节点的上一个节点 prev 的 next 引用设置为 null，即删除节点的上一个节点变为链表的尾节点或中间的某个节点，不在需要指向下一个节点\",\"更新链表大小和修改计数器\",\"返回被删除节点的元素值\"]},\"72\":{\"h\":\"获取元素\",\"t\":[\"// 获取链表的第一个元素 public E getFirst() { final Node<E> f = first; if (f == null) throw new NoSuchElementException(); return f.item; } // 获取链表的最后一个元素 public E getLast() { final Node<E> l = last; if (l == null) throw new NoSuchElementException(); return l.item; } // 获取链表指定索引位置的元素值 public E get(int index) { checkElementIndex(index); return node(index).item; } // 获取指定索引位置的节点 Node<E> node(int index) { // assert isElementIndex(index); if (index < (size >> 1)) { Node<E> x = first; for (int i = 0; i < index; i++) x = x.next; return x; } else { Node<E> x = last; for (int i = size - 1; i > index; i--) x = x.prev; return x; } }\"]},\"73\":{\"h\":\"遍历元素\",\"t\":[\"LinkedList 的遍历的核心就是它的迭代器的实现。\",\"迭代器\",\"// 双向迭代器 private class ListItr implements ListIterator<E> { // 表示上一次调用 next() 或 previous() 方法时经过的节点； private Node<E> lastReturned; // 表示下一个要遍历的节点； private Node<E> next; // 表示下一个要遍历的节点的下标，也就是当前节点的后继节点的下标； private int nextIndex; // 表示当前遍历期望的修改计数值，用于和 LinkedList 的 modCount 比较，判断链表是否被其他线程修改过。 private int expectedModCount = modCount; }\",\"迭代器核心方法\",\"// ****** 从头到尾迭代 ********* // 判断还有没有下一个节点 public boolean hasNext() { // 判断下一个节点的下标是否小于链表的大小，如果是则表示还有下一个元素可以遍历 return nextIndex < size; } // 获取下一个节点 public E next() { // 检查在迭代过程中链表是否被修改过 checkForComodification(); // 判断是否还有下一个节点可以遍历，如果没有则抛出 NoSuchElementException 异常 if (!hasNext()) throw new NoSuchElementException(); // 将 lastReturned 指向当前节点 lastReturned = next; // 将 next 指向下一个节点 next = next.next; nextIndex++; return lastReturned.item; } // ****** 从尾到头迭代 ********* // 判断是否还有前一个节点 public boolean hasPrevious() { return nextIndex > 0; } // 获取前一个节点 public E previous() { // 检查是否在迭代过程中链表被修改 checkForComodification(); // 如果没有前一个节点，则抛出异常 if (!hasPrevious()) throw new NoSuchElementException(); // 将 lastReturned 和 next 指针指向上一个节点 lastReturned = next = (next == null) ? last : next.prev; nextIndex--; return lastReturned.item; }\",\"LinkedList 与 ArrayList 的遍历都是通用的，基本包括 5 种方式。\",\"初始化数据\",\"首先，初始化一个包含 1 千万数据的集合。假设使用了一个LinkedList。\",\"// 假设 list 是 LinkedList<Integer> 类型，并且已经初始化 List<Integer> list = new LinkedList<>(); @Before public void init() { for (int i = 0; i < 10000000; i++) { list.add(i); } }\",\"遍历方式\",\"LinkedList 与 ArrayList 的遍历都是通用的，基本包括 5 种方式。\",\"普通 for 循环\",\" @Test public void test_LinkedList_for0() { long startTime = System.currentTimeMillis(); for (int i = 0; i < list.size(); i++) { xx += list.get(i); } System.out.println(\\\"耗时：\\\" + (System.currentTimeMillis() - startTime)); }\",\"增强 for 循环\",\" @Test public void test_LinkedList_for1() { long startTime = System.currentTimeMillis(); for (Integer itr : list) { xx += itr; } System.out.println(\\\"耗时：\\\" + (System.currentTimeMillis() - startTime)); }\",\"Iterator (迭代器)\",\" @Test public void test_LinkedList_Iterator() { long startTime = System.currentTimeMillis(); Iterator<Integer> iterator = list.iterator(); while (iterator.hasNext()) { Integer next = iterator.next(); xx += next; } System.out.println(\\\"耗时：\\\" + (System.currentTimeMillis() - startTime)); }\",\"forEach\",\" @Test public void test_LinkedList_forEach() { long startTime = System.currentTimeMillis(); list.forEach(integer -> { xx += integer; }); System.out.println(\\\"耗时：\\\" + (System.currentTimeMillis() - startTime)); }\",\"stream (流)\",\" @Test public void test_LinkedList_stream() { long startTime = System.currentTimeMillis(); list.stream().forEach(integer -> { xx += integer; }); System.out.println(\\\"耗时：\\\" + (System.currentTimeMillis() - startTime)); }\",\"性能对比与分析\",\"以上五种遍历方式在性能上会有所不同，主要取决于它们如何与 LinkedList 的内部结构进行交互。\",\"普通 for 循环：在 LinkedList 上表现较差，因为 LinkedList 的 get(int index) 操作是 O(n) 的复杂度，所以整个遍历的复杂度是 O(n^2)。\",\"增强 for 循环：实际上是使用迭代器（Iterator）的语法糖，对于 LinkedList 来说，性能通常比普通 for 循环要好，因为它避免了 O(n) 的 get(int index) 操作。\",\"Iterator 遍历：直接使用迭代器遍历 LinkedList 是高效的，因为迭代器直接利用了 LinkedList 的节点结构。\",\"forEach 循环：在 Java 8 及以后，forEach 是 Iterable 接口的一部分，对于 LinkedList，其实现方式与增强 for 循环类似，因此性能也相当。\",\"Stream (流)：使用流（Stream）进行遍历在语法上更加简洁，但可能会引入额外的开销，特别是当流操作被并行化时。对于简单的遍历和累加操作，流可能不是最优选择，尤其是在不支持并行处理或并行处理不带来性能提升的情况下。\"]},\"74\":{\"h\":\"总结\",\"t\":[\"双向链表\",\"LinkedList 是一个双向链表实现，每个节点包含指向前一个节点和后一个节点的引用。\",\"动态大小\",\"LinkedList 的大小可以动态变化，可以随时增加或删除元素，不需要预先分配固定的内存空间。\",\"有序集合\",\"LinkedList 保留元素的插入顺序。\",\"可重复元素\",\"LinkedList 允许存储重复的元素。\",\"线程不安全\",\"LinkedList 不是线程安全的。如果需要线程安全的集合，可以使用 Collections.synchronizedList 方法进行包装。\",\"基本操作时间复杂度\",\"访问元素：O(n)\",\"添加元素（在头部或尾部）：O(1)\",\"插入元素（在中间）：O(n)\",\"删除元素：O(n)\",\"搜索元素：O(n)\",\"适用场景\",\"适用于频繁插入和删除操作的场景，尤其是在列表的头部和尾部进行操作时。\",\"Null 元素\",\"LinkedList 允许存储 null 元素。\",\"实现接口\",\"LinkedList 实现了 List、Deque、Queue 和 Cloneable 接口，可以用作栈、队列和双端队列。\"]},\"75\":{\"c\":[\"集合框架(容器)\"]},\"76\":{\"c\":[\"LinkedList 源码\"]},\"77\":{\"h\":\"DDD 微服务架构设计\",\"t\":[\"在使用领域驱动设计（DDD）搭建Spring Cloud Alibaba微服务项目时，除了DDD的基本原则外，还要利用Spring Cloud Alibaba的特性，来构建一个高效、稳定、可扩展的微服务架构。Spring Cloud Alibaba提供了一套完整的微服务解决方案，包括服务注册与发现、配置管理、网关、负载均衡、熔断、限流等功能。\",\"下面是一个详细的步骤指南，帮助你使用DDD搭建Spring Cloud Alibaba微服务项目：\"]},\"78\":{\"h\":\"1.\",\"t\":[\"在开始搭建之前，确保你熟悉DDD的核心概念，如领域模型、聚合、实体、值对象、领域服务、领域事件等。DDD的核心思想是将业务逻辑和应用程序的技术实现相分离，确保系统在实现复杂业务逻辑时保持可维护性和可扩展性。\"]},\"79\":{\"h\":\"2.\",\"t\":[\"首先要理解和设计领域模型。通过与业务领域专家的沟通，识别出核心业务领域，定义出领域模型。这些模型可以分为不同的层次，如：\",\"实体（Entity）：具有唯一标识符的对象。\",\"值对象（Value Object）：不可变且没有唯一标识符的对象。\",\"聚合（Aggregate）：由一个或多个实体和值对象组成的聚合体，由聚合根（Aggregate Root）管理。\",\"领域服务（Domain Service）：用于处理特定业务逻辑的服务。\",\"仓储（Repository）：用于持久化聚合的接口。\",\"领域事件（Domain Event）：用于描述领域中发生的事件。\"]},\"80\":{\"h\":\"3.\",\"t\":[\"根据领域模型，将系统划分为多个微服务。每个微服务应该是一个独立的业务领域或子域。确保每个微服务是自治的、可独立部署的，并且只关注其领域内的逻辑。\"]},\"81\":{\"h\":\"4.\",\"t\":[\"Spring Boot：用于构建微服务的基础框架。\",\"Spring Cloud Alibaba：用于微服务架构中的各种组件。 \",\"Nacos：用于服务注册与发现和配置管理。\",\"Sentinel：用于熔断、限流和系统保护。\",\"RocketMQ：用于消息队列，支持事件驱动架构。\",\"Seata：用于分布式事务管理。\",\"Dubbo：用于RPC通信。\",\"Spring Cloud Gateway：用于API网关。\"]},\"82\":{\"h\":\"5.\",\"t\":[\"一个典型的Spring Cloud Alibaba DDD项目的结构如下：\",\"/src /main /java /com /example /order // 订单微服务 /application // 应用层 /domain // 领域层 /model // 实体、值对象、聚合等 /service // 领域服务 /event // 领域事件 /infrastructure // 基础设施层 /repository // 仓储实现 /messaging // 消息传递 /web // 用户接口层 /controller // REST控制器 /customer // 客户微服务 /... /resources /application.yml // 配置文件\"]},\"83\":{\"h\":\"6.\",\"t\":[\"领域层实现：在领域层中实现实体、值对象、聚合和领域服务。\",\"应用层实现：在应用层中实现应用服务，协调各个领域模型之间的交互。\",\"基础设施层实现：在基础设施层中实现仓储接口，使用Spring Data等工具与数据库交互，使用RocketMQ或Kafka等实现消息传递。\",\"用户接口层实现：使用Spring MVC或Spring WebFlux实现REST API控制器，暴露应用服务。\"]},\"84\":{\"h\":\"7.\",\"t\":[\"使用Nacos作为服务注册与发现中心，配置各微服务注册到Nacos。\",\"# application.yml for Nacos Server server: port: 8848 spring: application: name: nacos-server cloud: nacos: discovery: server-addr: localhost:8848\",\"# application.yml for a Microservice spring: application: name: order-service cloud: nacos: discovery: server-addr: localhost:8848\"]},\"85\":{\"h\":\"8.\",\"t\":[\"使用Nacos Config来管理配置文件。将配置文件存储在Nacos中，各微服务在启动时从Nacos获取配置。\",\"spring: cloud: nacos: config: server-addr: localhost:8848 file-extension: yaml\"]},\"86\":{\"h\":\"9.\",\"t\":[\"使用Dubbo实现RPC通信，可以在微服务之间进行高效的远程调用。\",\"使用Spring Cloud OpenFeign来声明式地定义服务接口，简化HTTP通信。\",\"使用RocketMQ来实现基于消息的异步通信，支持事件驱动架构。\"]},\"87\":{\"h\":\"10.\",\"t\":[\"使用Sentinel来实现熔断和限流功能。Sentinel可以帮助你保护系统的稳定性，避免因为某个服务的故障导致整个系统不可用。\",\"spring: cloud: sentinel: transport: dashboard: localhost:8080\"]},\"88\":{\"h\":\"11.\",\"t\":[\"使用Seata来实现分布式事务管理。Seata可以帮助你在分布式系统中保持数据的一致性，支持TCC、AT、Saga等多种事务模式。\"]},\"89\":{\"h\":\"12.\",\"t\":[\"使用Spring Cloud Gateway作为API网关，处理请求路由和负载均衡，并提供限流、熔断、认证等功能。\",\"spring: cloud: gateway: discovery: locator: enabled: true routes: - id: order-service uri: lb://order-service predicates: - Path=/order/**\"]},\"90\":{\"h\":\"13.\",\"t\":[\"使用Spring Boot Actuator提供基本的监控信息。\",\"使用Zipkin或SkyWalking来实现分布式追踪，监控服务调用链。\",\"使用Prometheus和Grafana来实现指标监控和展示。\"]},\"91\":{\"h\":\"14.\",\"t\":[\"编写单元测试、集成测试和端到端测试，确保微服务的功能正确性。\",\"使用Docker和Kubernetes来实现容器化部署和自动化扩展，保证服务的可用性和扩展性。\"]},\"92\":{\"h\":\"总结\",\"t\":[\"通过以上步骤，你可以使用DDD方法论和Spring Cloud Alibaba生态系统来构建一个灵活、稳定且可扩展的微服务架构。这个过程涉及到多个层次的设计与实现，确保每个微服务都能独立稳定地运作，同时保持与其他服务的良好协作。这种架构非常适合复杂的业务系统，尤其是在需要高可用性和可扩展性的场景下。\",\"在电商系统中，领域驱动设计（DDD）能够帮助我们清晰地划分业务领域，确保每个模块都专注于特定的业务功能。通过领域划分，可以提高系统的可维护性和可扩展性。下面我们来详细设计一个电商系统的领域划分。\"]},\"93\":{\"h\":\"电商系统的主要领域划分\",\"t\":[\"在电商系统中，可以将业务划分为以下主要领域：\",\"用户管理（User Management）\",\"商品管理（Product Management）\",\"订单管理（Order Management）\",\"库存管理（Inventory Management）\",\"支付管理（Payment Management）\",\"促销与优惠（Promotion and Discount）\",\"物流与配送（Logistics and Delivery）\",\"客户服务（Customer Service）\",\"推荐系统（Recommendation System）\",\"通知管理（Notification Management）\",\"每个领域可以进一步细分为多个子域，下面详细描述每个领域的划分及其主要职责。\"]},\"94\":{\"h\":\"1.\",\"t\":[\"职责： 负责用户的注册、登录、信息管理、权限管理等。\",\"实体（Entities）：\",\"用户（User）\",\"角色（Role）\",\"权限（Permission）\",\"值对象（Value Objects）：\",\"地址（Address）\",\"个人信息（Profile）\",\"领域服务（Domain Services）：\",\"认证服务（Authentication Service）\",\"授权服务（Authorization Service）\",\"聚合（Aggregates）：\",\"用户聚合（User Aggregate）：用户作为聚合根，管理其个人信息、角色和权限。\",\"仓储（Repositories）：\",\"用户仓储（User Repository）\"]},\"95\":{\"h\":\"2.\",\"t\":[\"职责： 负责商品的创建、管理、分类、查询等。\",\"实体（Entities）：\",\"商品（Product）\",\"品牌（Brand）\",\"分类（Category）\",\"值对象（Value Objects）：\",\"商品描述（Product Description）\",\"规格参数（Specifications）\",\"领域服务（Domain Services）：\",\"商品查询服务（Product Query Service）\",\"分类管理服务（Category Management Service）\",\"聚合（Aggregates）：\",\"商品聚合（Product Aggregate）：商品作为聚合根，管理其分类、品牌、描述和规格参数。\",\"仓储（Repositories）：\",\"商品仓储（Product Repository）\"]},\"96\":{\"h\":\"3.\",\"t\":[\"职责： 负责订单的创建、管理、状态更新、历史记录等。\",\"实体（Entities）：\",\"订单（Order）\",\"订单项（Order Item）\",\"值对象（Value Objects）：\",\"订单地址（Order Address）\",\"订单金额（Order Amount）\",\"领域服务（Domain Services）：\",\"订单创建服务（Order Creation Service）\",\"订单状态管理服务（Order Status Management Service）\",\"聚合（Aggregates）：\",\"订单聚合（Order Aggregate）：订单作为聚合根，管理其订单项、订单金额和订单地址。\",\"仓储（Repositories）：\",\"订单仓储（Order Repository）\",\"领域事件（Domain Events）：\",\"订单创建事件（Order Created Event）\",\"订单取消事件（Order Canceled Event）\"]},\"97\":{\"h\":\"4.\",\"t\":[\"职责： 负责商品库存的管理和更新。\",\"实体（Entities）：\",\"库存（Inventory）\",\"仓库（Warehouse）\",\"值对象（Value Objects）：\",\"库存数量（Stock Quantity）\",\"领域服务（Domain Services）：\",\"库存更新服务（Inventory Update Service）\",\"聚合（Aggregates）：\",\"库存聚合（Inventory Aggregate）：库存作为聚合根，管理其仓库和库存数量。\",\"仓储（Repositories）：\",\"库存仓储（Inventory Repository）\",\"领域事件（Domain Events）：\",\"库存变更事件（Inventory Changed Event）\"]},\"98\":{\"h\":\"5.\",\"t\":[\"职责： 负责订单的支付、退款、支付渠道管理等。\",\"实体（Entities）：\",\"支付（Payment）\",\"交易（Transaction）\",\"值对象（Value Objects）：\",\"支付方式（Payment Method）\",\"交易金额（Transaction Amount）\",\"领域服务（Domain Services）：\",\"支付处理服务（Payment Processing Service）\",\"退款服务（Refund Service）\",\"聚合（Aggregates）：\",\"支付聚合（Payment Aggregate）：支付作为聚合根，管理其交易和支付方式。\",\"仓储（Repositories）：\",\"支付仓储（Payment Repository）\",\"领域事件（Domain Events）：\",\"支付成功事件（Payment Successful Event）\",\"退款事件（Refund Event）\"]},\"99\":{\"h\":\"6.\",\"t\":[\"职责： 负责管理促销活动、优惠券、折扣规则等。\",\"实体（Entities）：\",\"促销活动（Promotion）\",\"优惠券（Coupon）\",\"值对象（Value Objects）：\",\"折扣规则（Discount Rules）\",\"优惠条件（Promotion Conditions）\",\"领域服务（Domain Services）：\",\"促销计算服务（Promotion Calculation Service）\",\"优惠券管理服务（Coupon Management Service）\",\"聚合（Aggregates）：\",\"促销聚合（Promotion Aggregate）：促销活动作为聚合根，管理其优惠券、折扣规则和优惠条件。\",\"仓储（Repositories）：\",\"促销仓储（Promotion Repository）\"]},\"100\":{\"h\":\"7.\",\"t\":[\"职责： 负责订单的物流、配送、快递公司管理等。\",\"实体（Entities）：\",\"配送（Delivery）\",\"快递公司（Courier Company）\",\"值对象（Value Objects）：\",\"配送地址（Delivery Address）\",\"配送状态（Delivery Status）\",\"领域服务（Domain Services）：\",\"配送服务（Delivery Service）\",\"快递公司管理服务（Courier Company Management Service）\",\"聚合（Aggregates）：\",\"配送聚合（Delivery Aggregate）：配送作为聚合根，管理其快递公司和配送状态。\",\"仓储（Repositories）：\",\"配送仓储（Delivery Repository）\",\"领域事件（Domain Events）：\",\"配送完成事件（Delivery Completed Event）\"]},\"101\":{\"h\":\"8.\",\"t\":[\"职责： 负责售前、售后服务，处理客户的咨询和投诉。\",\"实体（Entities）：\",\"客户反馈（Customer Feedback）\",\"客户工单（Customer Ticket）\",\"值对象（Value Objects）：\",\"投诉类型（Complaint Type）\",\"领域服务（Domain Services）：\",\"客户支持服务（Customer Support Service）\",\"投诉处理服务（Complaint Handling Service）\",\"聚合（Aggregates）：\",\"客户服务聚合（Customer Service Aggregate）：客户工单作为聚合根，管理其客户反馈和投诉类型。\",\"仓储（Repositories）：\",\"客户服务仓储（Customer Service Repository）\"]},\"102\":{\"h\":\"9.\",\"t\":[\"职责： 负责基于用户行为的推荐和个性化商品展示。\",\"实体（Entities）：\",\"推荐项（Recommendation Item）\",\"用户行为（User Behavior）\",\"值对象（Value Objects）：\",\"推荐规则（Recommendation Rules）\",\"领域服务（Domain Services）：\",\"推荐生成服务（Recommendation Generation Service）\",\"个性化服务（Personalization Service）\",\"聚合（Aggregates）：\",\"推荐聚合（Recommendation Aggregate）：推荐项作为聚合根，管理其用户行为和推荐规则。\",\"仓储（Repositories）：\",\"推荐仓储（Recommendation Repository）\"]},\"103\":{\"h\":\"10.\",\"t\":[\"职责： 负责系统内外的通知管理，包括邮件、短信、站内信等。\",\"实体（Entities）：\",\"通知（Notification）\",\"值对象（Value Objects）：\",\"通知类型（Notification Type）\",\"通知内容（Notification Content）\",\"领域服务（Domain Services）：\",\"通知发送服务（Notification Sending Service）\",\"聚合（Aggregates）：\",\"通知聚合（Notification Aggregate）：通知作为聚合根，管理其类型和内容。\",\"仓储（Repositories）：\",\"通知仓储（Notification Repository）\",\"领域事件（Domain Events）：\",\"通知发送事件（Notification Sent Event）\"]},\"104\":{\"h\":\"领域之间的关系\",\"t\":[\"在这个电商系统中，各个领域之间可能会有一些关联，但应尽量保持每个领域的独立性，以便微服务的独立部署和扩展。例如：\",\"用户管理与订单管理关联，用户下单时会创建订单。\",\"订单管理与支付管理关联，订单支付后需要更新订单状态。\",\"订单管理与库存管理关联，\",\"创建订单后需要扣减库存。\",\"订单管理与物流与配送关联，订单发货后需要更新配送状态。\",\"促销与优惠与商品管理和订单管理关联，商品可能参与促销，订单可能使用优惠。\",\"通过清晰的领域划分和合理的领域建模，电商系统可以更好地实现高内聚、低耦合的架构，提高系统的灵活性、可维护性和可扩展性。\",\"在电商系统中，领域关系处理是领域驱动设计（DDD）的核心部分，决定了系统各个领域之间的交互方式。处理领域关系的关键在于明确每个领域的职责，并通过领域服务、领域事件和防腐层等机制来管理跨领域的交互。以下是一些处理具体领域关系的常见方法和策略：\"]},\"105\":{\"h\":\"1.\",\"t\":[\"高内聚，低耦合： 每个领域应专注于自己的核心业务逻辑，尽量减少与其他领域的耦合。\",\"明确边界： 使用领域边界来隔离领域之间的依赖，避免领域之间的直接相互依赖。\",\"依赖倒置原则（DIP）： 领域间的依赖应通过接口和抽象类进行，而不是具体实现。\"]},\"106\":{\"h\":\"2.\"},\"107\":{\"h\":\"2.1.\",\"t\":[\"领域服务用于处理跨聚合和跨领域的业务逻辑。它们通常包含在应用服务中，但其逻辑应保持领域纯净，即无业务逻辑漂移到基础设施层或其他领域。\",\"示例：\",\"订单与库存关系： 在订单创建时，需要检查库存是否足够并进行扣减。这里可以通过一个“库存检查与扣减服务”来实现，它是一个领域服务。这个服务会被订单领域调用，但库存的业务逻辑仍然保留在库存领域内。\",\"public class OrderService { private final InventoryService inventoryService; public OrderService(InventoryService inventoryService) { this.inventoryService = inventoryService; } public Order createOrder(OrderRequest request) { // 检查库存 inventoryService.checkAndDeductStock(request.getItems()); // 创建订单逻辑... } }\"]},\"108\":{\"h\":\"2.2.\",\"t\":[\"领域事件是领域间解耦的一种有效方式。一个领域的操作可以发布事件，其他相关领域可以订阅这些事件并作出相应处理。\",\"示例：\",\"订单与支付关系： 当订单创建成功后，发布一个“订单创建事件”（OrderCreatedEvent）。支付服务订阅该事件，触发支付流程。\",\"// 订单服务发布领域事件 public class OrderService { private final DomainEventPublisher eventPublisher; public OrderService(DomainEventPublisher eventPublisher) { this.eventPublisher = eventPublisher; } public Order createOrder(OrderRequest request) { Order order = // 创建订单逻辑... // 发布订单创建事件 eventPublisher.publish(new OrderCreatedEvent(order.getId())); return order; } } // 支付服务订阅领域事件 public class PaymentEventHandler { @EventListener public void handleOrderCreated(OrderCreatedEvent event) { // 处理支付逻辑... } }\"]},\"109\":{\"h\":\"2.3.\",\"t\":[\"防腐层用于隔离不同领域或外部系统之间的依赖，防止外部变化直接影响领域模型。通过防腐层，领域内的代码可以不依赖于外部的复杂实现。\",\"示例：\",\"第三方物流系统集成： 在物流与配送领域，需要与第三方物流系统集成。可以使用防腐层来封装第三方系统的接口，使领域内的代码只依赖于防腐层提供的抽象接口，而不直接依赖第三方系统的具体实现。\",\"// 防腐层接口 public interface LogisticsService { void shipOrder(Order order); } // 防腐层实现类（集成第三方系统） public class ExternalLogisticsService implements LogisticsService { private final ThirdPartyLogisticsClient client; public ExternalLogisticsService(ThirdPartyLogisticsClient client) { this.client = client; } @Override public void shipOrder(Order order) { // 使用第三方物流系统的API发货 client.send(order.getShippingDetails()); } }\"]},\"110\":{\"h\":\"2.4.\",\"t\":[\"应用服务用于协调领域之间的交互。它负责调用不同领域的服务，组装数据，处理跨领域的工作流，但不应包含业务逻辑。\",\"示例：\",\"订单与促销关系： 在应用服务中调用促销服务，获取用户的优惠信息，并将其应用于订单中。\",\"public class OrderApplicationService { private final PromotionService promotionService; private final OrderService orderService; public OrderApplicationService(PromotionService promotionService, OrderService orderService) { this.promotionService = promotionService; this.orderService = orderService; } public Order createOrder(OrderRequest request) { // 获取促销信息 Promotion promotion = promotionService.getPromotionForUser(request.getUserId()); // 创建订单 Order order = orderService.createOrder(request, promotion); return order; } }\"]},\"111\":{\"h\":\"3.\"},\"112\":{\"h\":\"3.1.\",\"t\":[\"关系描述： 用户下单会创建一个订单。\",\"处理方式：\",\"在订单领域中，创建订单时需要传入用户ID作为参数，订单服务通过用户ID获取用户信息（如验证用户身份或获取用户的配送地址）。\",\"可以通过直接调用用户服务（User Service）或通过用户仓储（User Repository）获取用户信息。\"]},\"113\":{\"h\":\"3.2.\",\"t\":[\"关系描述： 创建订单时需要检查并扣减库存，取消订单时需要恢复库存。\",\"处理方式：\",\"使用领域服务（如库存检查与扣减服务）或直接调用库存服务接口（Inventory Service）。\",\"使用领域事件（如订单创建事件和订单取消事件）让库存服务订阅这些事件并进行相应的库存操作。\"]},\"114\":{\"h\":\"3.3.\",\"t\":[\"关系描述： 订单创建后需要进行支付，支付成功后更新订单状态。\",\"处理方式：\",\"通过领域事件（如订单创建事件和支付成功事件）来实现解耦。订单服务发布订单创建事件，支付服务订阅该事件并触发支付流程。支付成功后，支付服务发布支付成功事件，订单服务订阅该事件并更新订单状态。\"]},\"115\":{\"h\":\"3.4.\",\"t\":[\"关系描述： 商品可以参加促销活动，不同的促销活动可以应用于商品。\",\"处理方式：\",\"使用应用服务来协调商品与促销服务之间的交互。应用服务调用促销服务，获取商品的促销信息，并将其应用到商品的展示和订单的价格计算中。\"]},\"116\":{\"h\":\"3.5.\",\"t\":[\"关系描述： 订单发货后需要更新订单的配送状态。\",\"处理方式：\",\"使用防腐层封装物流系统的调用逻辑，物流服务通过防腐层与外部物流系统进行交互。\",\"使用领域事件（如订单发货事件）来触发订单状态更新操作。\"]},\"117\":{\"h\":\"总结\",\"t\":[\"处理电商系统中领域关系的关键在于明确领域职责，使用领域服务、领域事件、防腐层和应用服务等DDD的核心概念来解耦领域之间的依赖。通过这些策略，可以有效地管理跨领域的交互，保持系统的高内聚和低耦合，确保系统的可维护性和可扩展性。\"]},\"118\":{\"c\":[\"系统架构\"]},\"119\":{\"c\":[\"DDD\"]},\"120\":{\"h\":\"基础知识\"},\"121\":{\"h\":\"核心组件\",\"t\":[\"Broker（消息中间件）\",\"RabbitMQ Server，负责接收和分发消息的应用\",\"提供一种传输服务，维护消息的传输，将消息分发到相应队列\",\"Producer（生产者）\",\"投递消息的一方\",\"创建消息，发布到 RabbitMQ 中\",\"消息一般包含两个部分：消息体（payload）和标签（label）\",\"Consumer（消费者）\",\"接收消息的一方\",\"连接到 RabbitMQ 服务器，订阅队列\",\"消费队列中的消息\",\"Queue（队列）\",\"消息存储的地方\",\"FIFO 原则：先进先出\",\"多个消费者可以订阅同一个队列，队列中的消息会被平均分摊给多个消费者\",\"Exchange（交换机）\",\"接收生产者发送的消息，根据路由键转发到绑定的队列\",\"类型：\",\"Direct：直接匹配\",\"Topic：通配符匹配\",\"Fanout：广播\",\"Headers：根据消息属性匹配\",\"Binding（绑定）\",\"Exchange 和 Queue 之间的虚拟连接\",\"定义了 Exchange 和 Queue 之间的消息分发规则\",\"Channel（信道）\",\"建立在 Connection 连接之上的虚拟连接\",\"复用 TCP 连接，减少性能开销\",\"每个线程创建单独的 Channel，实现多线程通信\",\"Virtual Host（虚拟主机）\",\"权限控制的基本单位\",\"每个 VHost 相当于一个独立的小型 RabbitMQ 服务器\",\"拥有自己的队列、交换器和绑定关系\"]},\"122\":{\"h\":\"工作原理\",\"t\":[\"消息流转过程\",\"Producer 创建消息，发送到 Exchange\",\"Exchange 接收到消息后，根据消息的 RoutingKey 和 Exchange 类型，查找匹配的 Queue\",\"Exchange 将消息路由到一个或多个 Queue 中\",\"Queue 将消息存储起来，等待 Consumer 消费\",\"Consumer 监听（订阅）Queue，获取消息进行处理\",\"消息投递流程\",\"生产者发送消息\",\"创建 Connection（TCP 连接）\",\"创建 Channel（信道）\",\"声明 Exchange\",\"发送消息到 Exchange\",\"交换机路由消息\",\"根据 Exchange 类型和绑定规则\",\"将消息路由到一个或多个队列\",\"如果没有匹配的队列，消息将被丢弃\",\"队列存储消息\",\"按照 FIFO 原则存储消息\",\"如果队列已满，可能触发溢出策略\",\"支持消息持久化到磁盘\",\"消费者处理消息\",\"创建 Connection 和 Channel\",\"声明要监听的队列\",\"订阅队列并处理消息\",\"发送消息确认（ACK）\",\"通信机制\",\"Connection（连接）\",\"TCP 连接，长连接\",\"支持多个 Channel 复用\",\"包含认证、IP、端口等信息\",\"Channel（信道）\",\"轻量级连接，建立在 Connection 之上\",\"每个线程一个 Channel\",\"支持并发通信\",\"心跳机制\",\"默认心跳间隔 60 秒\",\"检测连接是否正常\",\"及时发现连接故障\",\"高级特性\",\"消息分发\",\"Round-Robin（轮询）\",\"Fair Dispatch（公平分发）\",\"消息优先级\",\"消息顺序性\",\"单队列单消费者保证顺序\",\"多队列或多消费者不保证顺序\",\"消息重试可能破坏顺序\",\"流量控制\",\"Consumer 预取计数（prefetch count）\",\"Publisher 流控（flow control）\",\"内存警告（memory alarm）\"]},\"123\":{\"h\":\"交换机类型\",\"t\":[\"Direct Exchange\",\"精确匹配路由键\",\"消息会被转发到 BindingKey 和 RoutingKey 完全匹配的队列\",\"Topic Exchange\",\"模式匹配路由键\",\"支持通配符：* (一个单词)，# (零个或多个单词)\",\"Fanout Exchange\",\"广播模式\",\"忽略路由键，消息将发送给所有绑定的队列\",\"Headers Exchange\",\"根据消息属性匹配\",\"性能较差，使用较少\"]},\"124\":{\"h\":\"可靠性机制\",\"t\":[\"消息确认\",\"Producer 确认\",\"Publisher Confirm：消息发送到 Exchange 的确认\",\"Publisher Return：消息从 Exchange 路由到 Queue 的确认\",\"Consumer 确认\",\"Auto ACK：自动确认\",\"Manual ACK：手动确认\",\"Reject：拒绝消息\",\"持久化\",\"Exchange 持久化：声明时指定 durable=true\",\"Queue 持久化：声明时指定 durable=true\",\"Message 持久化：发送时指定 deliveryMode=2\"]},\"125\":{\"h\":\"应用场景\",\"t\":[\"异步处理\",\"用户注册邮件通知\",\"订单处理\",\"应用解耦\",\"订单系统与库存系统解耦\",\"支付系统与物流系统解耦\",\"流量削峰\",\"秒杀系统\",\"日志处理\",\"消息通讯\",\"即时通讯\",\"群聊广播\"]},\"126\":{\"c\":[\"中间件\"]},\"127\":{\"c\":[\"RabbitMQ\"]},\"128\":{\"h\":\"安装指南\"},\"129\":{\"h\":\"Docker\",\"t\":[\"提示\",\"本教程使用 RabbitMQ 3.12.14 版本，如需安装最新版本，请删除版本号则默认安装最新版本。\",\"安装步骤\",\"验证安装\",\"访问管理界面：http://localhost:15672\",\"默认用户名/密码：admin/admin\",\"登录成功后可以看到 RabbitMQ 的管理控制台界面，说明安装成功。\",\"相关信息\",\"如果无法访问管理界面,需要先启用管理插件:\",\"docker exec -it rabbitmq rabbitmq-plugins enable rabbitmq_management\"]},\"130\":{\"h\":\"CentOS\",\"t\":[\"注意\",\"在安装 RabbitMQ 之前，您必须安装受支持的 Erlang/OTP 版本。\",\"RabbitMQ 与 Erlang 版本兼容性，请参考 Erlang 版本要求\",\"安装 Erlang\",\"下载 Erlang RPM 包\",\"GitHub 下载 Erlang RPM 包\",\"Gitee 下载 Erlang RPM 包\",\"SFTP 工具上传 Erlang RPM 包至 CentOS\",\"以 /dev-ops 目录为例，将 Erlang RPM 包至 CentOS 的 /dev-ops 目录下\",\"mkdir /dev-ops && cd /dev-ops\",\"命令安装\",\"rpm -ivh erlang-26.2.5.5-1.el9.x86_64.rpm\",\"# 输出结果 warning: erlang-26.2.5.5-1.el9.x86_64.rpm: Header V4 RSA/SHA256 Signature, key ID 6026dfca: NOKEY Verifying... ################################# [100%] Preparing... ################################# [100%] Updating / installing... 1:erlang-26.2.5.5-1.el9 ################################# [100%]\",\"验证安装\",\"erl -version\",\"# 输出结果 Erlang (SMP,ASYNC_THREADS) (BEAM) emulator version 14.2.5.4\",\"安装 RabbitMQ\",\"下载 RabbitMQ\",\"GitHub 下载\",\"SFTP 工具上传 Erlang RPM 包至 CentOS\",\"以 /dev-ops 目录为例，将 Erlang RPM 包至 CentOS 的 /dev-ops 目录下\",\"cd /dev-ops\",\"命令安装\",\"sudo rpm -ivh rabbitmq-server-3.12.14-1.el8.noarch.rpm\",\"启动和配置 RabbitMQ\",\"启动\",\"sudo systemctl start rabbitmq-server\",\"检查服务状态\",\"sudo systemctl status rabbitmq-server\",\"设置 RabbitMQ 开机自启\",\"sudo systemctl enable rabbitmq-server\",\"配置管理插件\",\"sudo rabbitmq-plugins enable rabbitmq_management\",\"增加远程访问用户并配置权限\",\"提示\",\"默认用户名/密码 guest/guest 只能本地登录，无法远程登录，所以需要增加用户并配置权限。\",\"sudo rabbitmqctl add_user admin admin sudo rabbitmqctl set_permissions -p / admin \\\".\\\" \\\".\\\" \\\".*\\\" sudo rabbitmqctl set_user_tags admin administrator\",\"验证安装\",\"访问管理界面：http://your_server_ip:15672\",\"用户名/密码：admin/admin\",\"登录成功后可以看到 RabbitMQ 的管理控制台界面，说明安装成功。\"]},\"131\":{\"h\":\"MacOS\"},\"132\":{\"h\":\"Windows\"},\"133\":{\"h\":\"常见问题\",\"t\":[\"端口占用\",\"lsof -i:5672 lsof -i:15672\",\"权限问题\",\"rabbitmqctl add_user admin password rabbitmqctl set_user_tags admin administrator rabbitmqctl set_permissions -p / admin \\\".*\\\" \\\".*\\\" \\\".*\\\"\",\"内存不足\",\"编辑 /etc/rabbitmq/rabbitmq.conf：\",\"vm_memory_high_watermark.relative = 0.4\",\"更多信息请参考 RabbitMQ 官方文档。\"]},\"134\":{\"c\":[\"中间件\"]},\"135\":{\"c\":[\"RabbitMQ\"]},\"136\":{\"h\":\"简介\",\"t\":[\"RabbitMQ 是一个开源的消息代理软件，采用了 AMQP（Advanced Message Queuing Protocol 即高级消息队列协议）标准，用于在不同的系统和应用程序之间传递消息。它的主要功能是异步传递消息和解耦系统组件，常用于分布式系统中，尤其在微服务架构中扮演着重要角色。\"]},\"137\":{\"h\":\"主要特点\",\"t\":[\"消息队列：RabbitMQ 基于队列机制工作，应用程序将消息发布到队列中，消费者从队列中取出消息进行处理。这种机制保证了消息的顺序和可靠传输。\",\"支持多种协议：除了 AMQP，RabbitMQ 还支持 MQTT、STOMP 等协议，可以与多种客户端和应用系统进行交互。\",\"可靠性：RabbitMQ 提供了消息持久化、消息确认、死信队列等机制，确保在系统崩溃或重启的情况下消息不丢失。\",\"高可用性：通过镜像队列（mirrored queues）和集群（clustering）功能，RabbitMQ 可以保证在集群节点出现故障时，消息系统的可用性。\",\"灵活的路由：RabbitMQ 支持复杂的路由规则，可以根据不同的交换机（Exchange）类型来定向消息到不同的队列，常见的交换机类型包括 direct、 fanout、topic 和 headers。\",\"消息确认机制：RabbitMQ 提供了发布确认（Publisher Confirms）和消费者确认（Consumer Acknowledgements），确保消息的可靠传输。\",\"插件系统：RabbitMQ 支持多种插件，方便开发者根据业务需求扩展功能，例如管理界面插件、监控插件等。\"]},\"138\":{\"h\":\"常见使用场景\",\"t\":[\"异步处理：可以将复杂的任务异步化，比如订单处理、图片处理等。将任务放入队列中，由后台的消费者异步执行。\",\"解耦系统：系统的各个组件之间通过消息队列进行通信，避免了直接调用导致的高耦合。\",\"分布式系统通信：在分布式系统中，RabbitMQ 可以帮助不同微服务之间传递消息，确保数据同步和任务调度。\",\"流量削峰：可以通过消息队列缓冲系统流量，平滑流量峰值，避免系统过载。\"]},\"139\":{\"h\":\"工作原理简述\",\"t\":[\"生产者（Producer）：将消息发送到 RabbitMQ 的交换机。\",\"交换机（Exchange）：根据预定的路由规则将消息转发到对应的队列。\",\"队列（Queue）：存储消息，等待消费者取出并处理。\",\"消费者（Consumer）：从队列中消费消息并处理，处理完成后发送确认信息。\"]},\"140\":{\"h\":\"总结\",\"t\":[\"RabbitMQ 是一个高效、可靠且灵活的消息队列系统，广泛应用于分布式系统、微服务架构等场景，帮助系统解耦、提高异步处理能力，并确保消息的可靠传递。\"]},\"141\":{\"c\":[\"中间件\"]},\"142\":{\"c\":[\"RabbitMQ\"]},\"143\":{\"h\":\"编程模型\"},\"144\":{\"h\":\"创建连接\",\"t\":[\"在 RabbitMQ 中，连接（Connection）是客户端和 RabbitMQ 服务器之间的物理网络连接，基于 TCP 协议。创建连接是使用 RabbitMQ 的第一步。\",\"连接参数：\",\"host：RabbitMQ 服务器地址\",\"port：端口号（默认 5672）\",\"username：用户名（默认 guest）\",\"password：密码（默认 guest）\",\"virtualHost：虚拟主机（默认 /）\",\"连接示例：\",\"ConnectionFactory factory = new ConnectionFactory(); factory.setHost(\\\"localhost\\\"); factory.setPort(5672); factory.setUsername(\\\"guest\\\"); factory.setPassword(\\\"guest\\\"); factory.setVirtualHost(\\\"/\\\"); Connection connection = factory.newConnection();\",\"连接池建议：\",\"避免频繁创建和销毁连接的开销\",\"限制最大连接数，防止资源耗尽\",\"提供连接的自动恢复机制\"]},\"145\":{\"h\":\"创建信道\",\"t\":[\"信道（Channel）是在连接内部建立的逻辑连接，用于执行消息相关的操作。一个连接可以包含多个信道。\",\"信道创建：\",\"Channel channel = connection.createChannel();\",\"信道是轻量级的，可以复用同一个连接创建多个信道，从而实现多线程下的并发操作。\"]},\"146\":{\"h\":\"声明交换机\",\"t\":[\"交换机（Exchange）负责接收消息并将其路由到一个或多个队列。\",\"交换机类型：\",\"Direct Exchange：根据 routing key 进行精确匹配\",\"Topic Exchange：根据 routing key 进行模式匹配\",\"Fanout Exchange：广播消息到所有绑定的队列\",\"Headers Exchange：根据消息的头信息进行路由\",\"声明示例：\",\"// 声明一个 Direct 类型的交换机 channel.exchangeDeclare(\\\"exchange_name\\\",\\\"direct\\\",true); // 声明一个 Topic 类型的交换机 channel.exchangeDeclare(\\\"topic_exchange\\\",\\\"topic\\\",true); // 声明一个 Fanout 类型的交换机 channel.exchangeDeclare(\\\"fanout_exchange\\\",\\\"fanout\\\",true);\"]},\"147\":{\"h\":\"声明队列\",\"t\":[\"队列（Queue）用于存储消息，直到被消费者消费。\",\"队列属性：\",\"name：队列名称\",\"durable：是否持久化\",\"exclusive：是否排他（仅限此连接使用）\",\"autoDelete：是否自动删除（当最后一个消费者断开连接后）\",\"arguments：其他参数（如 TTL、死信队列等）\",\"声明示例：\",\"// 声明一个持久化的队列 channel.queueDeclare(\\\"queue_name\\\",true,false,false,null); // 声明一个临时队列 String queueName = channel.queueDeclare().getQueue();\"]},\"148\":{\"h\":\"绑定交换机\",\"t\":[\"绑定（Binding）定义了交换机和队列之间的路由关系。\",\"示例：\",\"// 将队列绑定到交换机，指定 routing key channel.queueBind(\\\"queue_name\\\",\\\"exchange_name\\\",\\\"routing_key\\\"); // Fanout 交换机的绑定不需要 routing key channel.queueBind(\\\"queue_name\\\",\\\"fanout_exchange\\\",\\\"\\\");\"]},\"149\":{\"h\":\"消息发送\",\"t\":[\"消息属性：\",\"deliveryMode：消息持久化\",\"contentType：消息类型\",\"expiration：过期时间\",\"headers：自定义头信息\",\"发送示例：\",\"// 创建消息属性 AMQP.BasicProperties properties = new AMQP.BasicProperties.Builder().deliveryMode(2) // 持久化消息 .contentType(\\\"application/json\\\").expiration(\\\"60000\\\") // 60秒过期 .build(); // 发送消息 channel.basicPublish(\\\"exchange_name\\\",\\\"routing_key\\\",properties,\\\"message content\\\".getBytes());\"]},\"150\":{\"h\":\"消息消费\",\"t\":[\"消息消费模式：\",\"推模式（Push）：服务器主动推送消息给消费者\",\"拉模式（Pull）：消费者主动从服务器拉取消息\",\"推模式示例：\",\"public static void main(String[] args) { // 自动确认模式 channel.basicConsume(\\\"queue_name\\\", true, (consumerTag, message) -> { String content = new String(message.getBody()); System.out.println(\\\"Received: \\\" + content); }, consumerTag -> { }); // 手动确认模式 channel.basicConsume(\\\"queue_name\\\", false, (consumerTag, message) -> { try { String content = new String(message.getBody()); System.out.println(\\\"Received: \\\" + content); channel.basicAck(message.getEnvelope().getDeliveryTag(), false); } catch (Exception e) { channel.basicNack(message.getEnvelope().getDeliveryTag(), false, true); } }, consumerTag -> { }); }\",\"拉模式示例：\",\"public static void main(String[] args) { // 拉取单条消息 GetResponse response = channel.basicGet(\\\"queue_name\\\", false); if (response != null) { String content = new String(response.getBody()); System.out.println(\\\"Received: \\\" + content); channel.basicAck(response.getEnvelope().getDeliveryTag(), false); } }\"]},\"151\":{\"h\":\"可靠性保证\",\"t\":[\"生产者可靠性：\",\"事务模式\",\"发布确认模式（Publisher Confirms）\",\"public static void main(String[] args) { // 开启发布确认 channel.confirmSelect(); // 异步确认 channel.addConfirmListener((deliveryTag, multiple) -> { // 消息确认成功 }, (deliveryTag, multiple) -> { // 消息确认失败 }); }\",\"消费者可靠性：\",\"自动确认（autoAck = true）\",\"手动确认（autoAck = false） \",\"basicAck：确认消息\",\"basicNack：拒绝消息\",\"basicReject：拒绝单条消息\"]},\"152\":{\"c\":[\"中间件\"]},\"153\":{\"c\":[\"RabbitMQ\"]},\"154\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"拒绝单条消息\",{\"1\":{\"151\":1}}],[\"拒绝消息\",{\"1\":{\"124\":1,\"151\":1}}],[\"事务模式\",{\"1\":{\"151\":1}}],[\"拉取单条消息\",{\"1\":{\"150\":1}}],[\"拉模式示例\",{\"1\":{\"150\":1}}],[\"拉模式\",{\"1\":{\"150\":1}}],[\"推模式示例\",{\"1\":{\"150\":1}}],[\"推模式\",{\"1\":{\"150\":1}}],[\"推荐仓储\",{\"1\":{\"102\":1}}],[\"推荐聚合\",{\"1\":{\"102\":1}}],[\"推荐生成服务\",{\"1\":{\"102\":1}}],[\"推荐规则\",{\"1\":{\"102\":1}}],[\"推荐项作为聚合根\",{\"1\":{\"102\":1}}],[\"推荐项\",{\"1\":{\"102\":1}}],[\"推荐系统\",{\"1\":{\"93\":1}}],[\"推荐使用该方式\",{\"1\":{\"15\":1}}],[\"自定义头信息\",{\"1\":{\"149\":1}}],[\"自动确认模式\",{\"1\":{\"150\":1}}],[\"自动确认\",{\"1\":{\"124\":1,\"151\":1}}],[\"自动将\",{\"1\":{\"45\":1}}],[\"自动转换后的\",{\"1\":{\"45\":1}}],[\"自动转换的顺序通常为\",{\"1\":{\"44\":1}}],[\"自动转换\",{\"1\":{\"44\":1}}],[\"自动类型转换\",{\"0\":{\"44\":1},\"1\":{\"43\":1,\"45\":1}}],[\"自动装箱\",{\"1\":{\"30\":1}}],[\"自动装箱和拆箱\",{\"1\":{\"30\":1}}],[\"过期时间\",{\"1\":{\"149\":1}}],[\"死信队列等\",{\"1\":{\"147\":1}}],[\"死信队列等机制\",{\"1\":{\"137\":1}}],[\"仅限此连接使用\",{\"1\":{\"147\":1}}],[\"仅仅返回值不一致时\",{\"1\":{\"52\":1}}],[\"限制最大连接数\",{\"1\":{\"144\":1}}],[\"限流和系统保护\",{\"1\":{\"81\":1}}],[\"限流等功能\",{\"1\":{\"77\":1}}],[\"协议\",{\"1\":{\"144\":1}}],[\"协调各个领域模型之间的交互\",{\"1\":{\"83\":1}}],[\"帮助系统解耦\",{\"1\":{\"140\":1}}],[\"帮助你使用ddd搭建spring\",{\"1\":{\"77\":1}}],[\"微服务架构等场景\",{\"1\":{\"140\":1}}],[\"微服务架构设计\",{\"0\":{\"77\":1}}],[\"广泛应用于分布式系统\",{\"1\":{\"140\":1}}],[\"广播消息到所有绑定的队列\",{\"1\":{\"146\":1}}],[\"广播模式\",{\"1\":{\"123\":1}}],[\"广播\",{\"1\":{\"121\":1}}],[\"平滑流量峰值\",{\"1\":{\"138\":1}}],[\"解耦系统\",{\"1\":{\"138\":1}}],[\"解链尾节点\",{\"1\":{\"71\":1}}],[\"解链头节点\",{\"1\":{\"71\":1}}],[\"解链\",{\"1\":{\"71\":2}}],[\"图片处理等\",{\"1\":{\"138\":1}}],[\"方便开发者根据业务需求扩展功能\",{\"1\":{\"137\":1}}],[\"方法进行包装\",{\"1\":{\"74\":1}}],[\"方法时经过的节点\",{\"1\":{\"73\":1}}],[\"方法通过遍历数组找到匹配元素并删除\",{\"1\":{\"56\":1}}],[\"方法删除指定位置的元素\",{\"1\":{\"56\":1}}],[\"方法在指定位置插入元素\",{\"1\":{\"55\":1}}],[\"方法直接在数组末尾添加元素\",{\"1\":{\"55\":1}}],[\"方法和变量修饰符\",{\"0\":{\"36\":1}}],[\"方法和成员变量生成\",{\"1\":{\"22\":1}}],[\"方法或变量\",{\"1\":{\"22\":1,\"36\":1}}],[\"方法还分构造方法和普通方法\",{\"1\":{\"16\":1}}],[\"方法体\",{\"1\":{\"16\":1}}],[\"方法名\",{\"1\":{\"16\":2}}],[\"方法就是完成特定功能的代码块\",{\"1\":{\"16\":1}}],[\"方法\",{\"0\":{\"16\":1}}],[\"插件系统\",{\"1\":{\"137\":1}}],[\"插入操作分为三种\",{\"1\":{\"70\":1}}],[\"插入元素\",{\"0\":{\"70\":1},\"1\":{\"74\":1}}],[\"灵活的路由\",{\"1\":{\"137\":1}}],[\"功能\",{\"1\":{\"137\":1}}],[\"尤其在微服务架构中扮演着重要角色\",{\"1\":{\"136\":1}}],[\"尤其是在需要高可用性和可扩展性的场景下\",{\"1\":{\"92\":1}}],[\"尤其是在列表的头部和尾部进行操作时\",{\"1\":{\"74\":1}}],[\"尤其是在不支持并行处理或并行处理不带来性能提升的情况下\",{\"1\":{\"73\":1}}],[\"采用了\",{\"1\":{\"136\":1}}],[\"简介\",{\"0\":{\"136\":1}}],[\"简化http通信\",{\"1\":{\"86\":1}}],[\"官方文档\",{\"1\":{\"133\":1}}],[\"更多信息请参考\",{\"1\":{\"133\":1}}],[\"更新链表头节点\",{\"1\":{\"71\":1}}],[\"更新链表大小和修改计数器\",{\"1\":{\"71\":4}}],[\"编程模型\",{\"0\":{\"143\":1}}],[\"编辑\",{\"1\":{\"133\":1}}],[\"编写单元测试\",{\"1\":{\"91\":1}}],[\"编写\",{\"1\":{\"36\":1}}],[\"端口号\",{\"1\":{\"144\":1}}],[\"端口占用\",{\"1\":{\"133\":1}}],[\"端口等信息\",{\"1\":{\"122\":1}}],[\"无法远程登录\",{\"1\":{\"130\":1}}],[\"增加远程访问用户并配置权限\",{\"1\":{\"130\":1}}],[\"增强\",{\"1\":{\"73\":2}}],[\"增强型\",{\"1\":{\"65\":1}}],[\"启动\",{\"1\":{\"130\":1}}],[\"启动和配置\",{\"1\":{\"130\":1}}],[\"命令安装\",{\"1\":{\"130\":2}}],[\"目录下\",{\"1\":{\"130\":2}}],[\"目录为例\",{\"1\":{\"130\":2}}],[\"目标数据类型\",{\"1\":{\"45\":1}}],[\"请参考\",{\"1\":{\"130\":1}}],[\"请删除版本号则默认安装最新版本\",{\"1\":{\"129\":1}}],[\"您必须安装受支持的\",{\"1\":{\"130\":1}}],[\"相关信息\",{\"1\":{\"129\":1}}],[\"相当于一个独立的小型\",{\"1\":{\"121\":1}}],[\"密码\",{\"1\":{\"129\":1,\"130\":2,\"144\":1}}],[\"验证安装\",{\"1\":{\"129\":1,\"130\":2}}],[\"安装\",{\"1\":{\"130\":2}}],[\"安装步骤\",{\"1\":{\"129\":1}}],[\"安装指南\",{\"0\":{\"128\":1}}],[\"版本要求\",{\"1\":{\"130\":1}}],[\"版本兼容性\",{\"1\":{\"130\":1}}],[\"版本\",{\"1\":{\"129\":1,\"130\":1}}],[\"本教程使用\",{\"1\":{\"129\":1}}],[\"群聊广播\",{\"1\":{\"125\":1}}],[\"日志处理\",{\"1\":{\"125\":1}}],[\"异步确认\",{\"1\":{\"151\":1}}],[\"异步处理\",{\"1\":{\"125\":1,\"138\":1}}],[\"异常\",{\"1\":{\"73\":1}}],[\"持久化消息\",{\"1\":{\"149\":1}}],[\"持久化\",{\"1\":{\"124\":4}}],[\"手动确认模式\",{\"1\":{\"150\":1}}],[\"手动确认\",{\"1\":{\"124\":1,\"151\":1}}],[\"路由到\",{\"1\":{\"124\":1}}],[\"确认消息\",{\"1\":{\"151\":1}}],[\"确认\",{\"1\":{\"124\":2}}],[\"确保数据同步和任务调度\",{\"1\":{\"138\":1}}],[\"确保消息的可靠传输\",{\"1\":{\"137\":1}}],[\"确保在系统崩溃或重启的情况下消息不丢失\",{\"1\":{\"137\":1}}],[\"确保系统的可维护性和可扩展性\",{\"1\":{\"117\":1}}],[\"确保系统在实现复杂业务逻辑时保持可维护性和可扩展性\",{\"1\":{\"78\":1}}],[\"确保每个模块都专注于特定的业务功能\",{\"1\":{\"92\":1}}],[\"确保每个微服务都能独立稳定地运作\",{\"1\":{\"92\":1}}],[\"确保每个微服务是自治的\",{\"1\":{\"80\":1}}],[\"确保微服务的功能正确性\",{\"1\":{\"91\":1}}],[\"确保你熟悉ddd的核心概念\",{\"1\":{\"78\":1}}],[\"确保执行的代码块\",{\"1\":{\"37\":1}}],[\"忽略路由键\",{\"1\":{\"123\":1}}],[\"零个或多个单词\",{\"1\":{\"123\":1}}],[\"模式匹配路由键\",{\"1\":{\"123\":1}}],[\"完全匹配的队列\",{\"1\":{\"123\":1}}],[\"精确匹配路由键\",{\"1\":{\"123\":1}}],[\"精度更高\",{\"1\":{\"10\":1}}],[\"预取计数\",{\"1\":{\"122\":1}}],[\"公平分发\",{\"1\":{\"122\":1}}],[\"公共访问权限\",{\"1\":{\"35\":1}}],[\"轮询\",{\"1\":{\"122\":1}}],[\"高可用性\",{\"1\":{\"137\":1}}],[\"高级特性\",{\"1\":{\"122\":1}}],[\"高内聚\",{\"1\":{\"105\":1}}],[\"及时发现连接故障\",{\"1\":{\"122\":1}}],[\"及以后\",{\"1\":{\"73\":1}}],[\"检测连接是否正常\",{\"1\":{\"122\":1}}],[\"检查服务状态\",{\"1\":{\"130\":1}}],[\"检查库存\",{\"1\":{\"107\":1}}],[\"检查是否在迭代过程中链表被修改\",{\"1\":{\"73\":1}}],[\"检查在迭代过程中链表是否被修改过\",{\"1\":{\"73\":1}}],[\"检查容量是否足够\",{\"1\":{\"54\":2,\"55\":1}}],[\"秒杀系统\",{\"1\":{\"125\":1}}],[\"秒\",{\"1\":{\"122\":1}}],[\"心跳机制\",{\"1\":{\"122\":1}}],[\"轻量级连接\",{\"1\":{\"122\":1}}],[\"长连接\",{\"1\":{\"122\":1}}],[\"长整型\",{\"1\":{\"38\":1}}],[\"监控插件等\",{\"1\":{\"137\":1}}],[\"监控服务调用链\",{\"1\":{\"90\":1}}],[\"监听\",{\"1\":{\"122\":1}}],[\"发送示例\",{\"1\":{\"149\":1}}],[\"发送时指定\",{\"1\":{\"124\":1}}],[\"发送消息\",{\"1\":{\"149\":1}}],[\"发送消息确认\",{\"1\":{\"122\":1}}],[\"发送消息到\",{\"1\":{\"122\":1}}],[\"发送到\",{\"1\":{\"122\":1}}],[\"发布确认模式\",{\"1\":{\"151\":1}}],[\"发布到\",{\"1\":{\"121\":1}}],[\"发布订单创建事件\",{\"1\":{\"108\":1}}],[\"发布一个\",{\"1\":{\"108\":1}}],[\"工具上传\",{\"1\":{\"130\":2}}],[\"工具解析\",{\"1\":{\"22\":1}}],[\"工作原理简述\",{\"0\":{\"139\":1}}],[\"工作原理\",{\"0\":{\"122\":1}}],[\"拥有自己的队列\",{\"1\":{\"121\":1}}],[\"虚拟主机\",{\"1\":{\"121\":1,\"144\":1}}],[\"复用\",{\"1\":{\"121\":1,\"122\":1}}],[\"连接池建议\",{\"1\":{\"144\":1}}],[\"连接示例\",{\"1\":{\"144\":1}}],[\"连接参数\",{\"1\":{\"144\":1}}],[\"连接\",{\"1\":{\"121\":1,\"122\":3,\"144\":1}}],[\"连接之上的虚拟连接\",{\"1\":{\"121\":1}}],[\"连接到\",{\"1\":{\"121\":1}}],[\"建立在\",{\"1\":{\"121\":1,\"122\":1}}],[\"信道是轻量级的\",{\"1\":{\"145\":1}}],[\"信道创建\",{\"1\":{\"145\":1}}],[\"信道\",{\"1\":{\"121\":1,\"122\":2,\"145\":1}}],[\"信息管理\",{\"1\":{\"94\":1}}],[\"之前\",{\"1\":{\"130\":1}}],[\"之前为循环链表\",{\"1\":{\"63\":1}}],[\"之上\",{\"1\":{\"122\":1}}],[\"之间的消息分发规则\",{\"1\":{\"121\":1}}],[\"之间的虚拟连接\",{\"1\":{\"121\":1}}],[\"绑定交换机\",{\"0\":{\"148\":1}}],[\"绑定\",{\"1\":{\"121\":1,\"148\":1}}],[\"交换器和绑定关系\",{\"1\":{\"121\":1}}],[\"交换机的绑定不需要\",{\"1\":{\"148\":1}}],[\"交换机类型\",{\"0\":{\"123\":1},\"1\":{\"146\":1}}],[\"交换机路由消息\",{\"1\":{\"122\":1}}],[\"交换机\",{\"1\":{\"121\":1,\"139\":1,\"146\":1}}],[\"交易金额\",{\"1\":{\"98\":1}}],[\"交易\",{\"1\":{\"98\":1}}],[\"队列名称\",{\"1\":{\"147\":1}}],[\"队列属性\",{\"1\":{\"147\":1}}],[\"队列存储消息\",{\"1\":{\"122\":1}}],[\"队列中的消息会被平均分摊给多个消费者\",{\"1\":{\"121\":1}}],[\"队列\",{\"1\":{\"121\":1,\"139\":1,\"147\":1}}],[\"队列和双端队列\",{\"1\":{\"74\":1}}],[\"订阅\",{\"1\":{\"122\":1}}],[\"订阅队列并处理消息\",{\"1\":{\"122\":1}}],[\"订阅队列\",{\"1\":{\"121\":1}}],[\"订单系统与库存系统解耦\",{\"1\":{\"125\":1}}],[\"订单处理\",{\"1\":{\"125\":1}}],[\"订单发货后需要更新订单的配送状态\",{\"1\":{\"116\":1}}],[\"订单发货后需要更新配送状态\",{\"1\":{\"104\":1}}],[\"订单服务订阅该事件并更新订单状态\",{\"1\":{\"114\":1}}],[\"订单服务发布订单创建事件\",{\"1\":{\"114\":1}}],[\"订单服务发布领域事件\",{\"1\":{\"108\":1}}],[\"订单服务通过用户id获取用户信息\",{\"1\":{\"112\":1}}],[\"订单与促销关系\",{\"1\":{\"110\":1}}],[\"订单与支付关系\",{\"1\":{\"108\":1}}],[\"订单与库存关系\",{\"1\":{\"107\":1}}],[\"订单可能使用优惠\",{\"1\":{\"104\":1}}],[\"订单支付后需要更新订单状态\",{\"1\":{\"104\":1}}],[\"订单取消事件\",{\"1\":{\"96\":1}}],[\"订单创建后需要进行支付\",{\"1\":{\"114\":1}}],[\"订单创建事件\",{\"1\":{\"96\":1,\"108\":1}}],[\"订单创建服务\",{\"1\":{\"96\":1}}],[\"订单仓储\",{\"1\":{\"96\":1}}],[\"订单作为聚合根\",{\"1\":{\"96\":1}}],[\"订单聚合\",{\"1\":{\"96\":1}}],[\"订单状态管理服务\",{\"1\":{\"96\":1}}],[\"订单金额和订单地址\",{\"1\":{\"96\":1}}],[\"订单金额\",{\"1\":{\"96\":1}}],[\"订单地址\",{\"1\":{\"96\":1}}],[\"订单项\",{\"1\":{\"96\":1}}],[\"订单\",{\"1\":{\"96\":1}}],[\"订单管理与物流与配送关联\",{\"1\":{\"104\":1}}],[\"订单管理与库存管理关联\",{\"1\":{\"104\":1}}],[\"订单管理与支付管理关联\",{\"1\":{\"104\":1}}],[\"订单管理\",{\"1\":{\"93\":1}}],[\"订单微服务\",{\"1\":{\"82\":1}}],[\"服务器主动推送消息给消费者\",{\"1\":{\"150\":1}}],[\"服务器地址\",{\"1\":{\"144\":1}}],[\"服务器之间的物理网络连接\",{\"1\":{\"144\":1}}],[\"服务器\",{\"1\":{\"121\":2}}],[\"接收到消息后\",{\"1\":{\"122\":1}}],[\"接收生产者发送的消息\",{\"1\":{\"121\":1}}],[\"接收消息的一方\",{\"1\":{\"121\":1}}],[\"接口的一部分\",{\"1\":{\"73\":1}}],[\"接口的骨架实现\",{\"1\":{\"50\":1}}],[\"接口\",{\"1\":{\"10\":1,\"50\":1,\"62\":5,\"74\":1}}],[\"消费\",{\"1\":{\"122\":1}}],[\"消费队列中的消息\",{\"1\":{\"121\":1}}],[\"消费者可靠性\",{\"1\":{\"151\":1}}],[\"消费者主动从服务器拉取消息\",{\"1\":{\"150\":1}}],[\"消费者从队列中取出消息进行处理\",{\"1\":{\"137\":1}}],[\"消费者处理消息\",{\"1\":{\"122\":1}}],[\"消费者\",{\"1\":{\"121\":1,\"139\":1}}],[\"消息消费模式\",{\"1\":{\"150\":1}}],[\"消息消费\",{\"0\":{\"150\":1}}],[\"消息类型\",{\"1\":{\"149\":1}}],[\"消息持久化\",{\"1\":{\"149\":1}}],[\"消息属性\",{\"1\":{\"149\":1}}],[\"消息发送\",{\"0\":{\"149\":1}}],[\"消息发送到\",{\"1\":{\"124\":1}}],[\"消息系统的可用性\",{\"1\":{\"137\":1}}],[\"消息队列\",{\"1\":{\"137\":1}}],[\"消息通讯\",{\"1\":{\"125\":1}}],[\"消息从\",{\"1\":{\"124\":1}}],[\"消息确认失败\",{\"1\":{\"151\":1}}],[\"消息确认成功\",{\"1\":{\"151\":1}}],[\"消息确认机制\",{\"1\":{\"137\":1}}],[\"消息确认\",{\"1\":{\"124\":1,\"137\":1}}],[\"消息将发送给所有绑定的队列\",{\"1\":{\"123\":1}}],[\"消息将被丢弃\",{\"1\":{\"122\":1}}],[\"消息会被转发到\",{\"1\":{\"123\":1}}],[\"消息重试可能破坏顺序\",{\"1\":{\"122\":1}}],[\"消息顺序性\",{\"1\":{\"122\":1}}],[\"消息优先级\",{\"1\":{\"122\":1}}],[\"消息分发\",{\"1\":{\"122\":1}}],[\"消息投递流程\",{\"1\":{\"122\":1}}],[\"消息流转过程\",{\"1\":{\"122\":1}}],[\"消息存储的地方\",{\"1\":{\"121\":1}}],[\"消息体\",{\"1\":{\"121\":1}}],[\"消息一般包含两个部分\",{\"1\":{\"121\":1}}],[\"消息中间件\",{\"1\":{\"121\":1}}],[\"消息传递\",{\"1\":{\"82\":1}}],[\"投递消息的一方\",{\"1\":{\"121\":1}}],[\"投诉处理服务\",{\"1\":{\"101\":1}}],[\"投诉类型\",{\"1\":{\"101\":1}}],[\"生产者可靠性\",{\"1\":{\"151\":1}}],[\"生产者发送消息\",{\"1\":{\"122\":1}}],[\"生产者\",{\"1\":{\"121\":1,\"139\":1}}],[\"维护消息的传输\",{\"1\":{\"121\":1}}],[\"系统的各个组件之间通过消息队列进行通信\",{\"1\":{\"138\":1}}],[\"系统架构\",{\"2\":{\"118\":1}}],[\"系统会分配默认初始值\",{\"1\":{\"11\":1}}],[\"物流服务通过防腐层与外部物流系统进行交互\",{\"1\":{\"116\":1}}],[\"物流与配送\",{\"1\":{\"93\":1}}],[\"让库存服务订阅这些事件并进行相应的库存操作\",{\"1\":{\"113\":1}}],[\"组装数据\",{\"1\":{\"110\":1}}],[\"应用程序将消息发布到队列中\",{\"1\":{\"137\":1}}],[\"应用解耦\",{\"1\":{\"125\":1}}],[\"应用场景\",{\"0\":{\"125\":1}}],[\"应用服务调用促销服务\",{\"1\":{\"115\":1}}],[\"应用服务用于协调领域之间的交互\",{\"1\":{\"110\":1}}],[\"应用层实现\",{\"1\":{\"83\":1}}],[\"应用层\",{\"1\":{\"82\":1}}],[\"使领域内的代码只依赖于防腐层提供的抽象接口\",{\"1\":{\"109\":1}}],[\"使用较少\",{\"1\":{\"123\":1}}],[\"使用防腐层封装物流系统的调用逻辑\",{\"1\":{\"116\":1}}],[\"使用应用服务来协调商品与促销服务之间的交互\",{\"1\":{\"115\":1}}],[\"使用领域事件\",{\"1\":{\"113\":1,\"116\":1}}],[\"使用领域服务\",{\"1\":{\"113\":1,\"117\":1}}],[\"使用领域边界来隔离领域之间的依赖\",{\"1\":{\"105\":1}}],[\"使用第三方物流系统的api发货\",{\"1\":{\"109\":1}}],[\"使用docker和kubernetes来实现容器化部署和自动化扩展\",{\"1\":{\"91\":1}}],[\"使用dubbo实现rpc通信\",{\"1\":{\"86\":1}}],[\"使用prometheus和grafana来实现指标监控和展示\",{\"1\":{\"90\":1}}],[\"使用zipkin或skywalking来实现分布式追踪\",{\"1\":{\"90\":1}}],[\"使用seata来实现分布式事务管理\",{\"1\":{\"88\":1}}],[\"使用sentinel来实现熔断和限流功能\",{\"1\":{\"87\":1}}],[\"使用spring\",{\"1\":{\"83\":2,\"86\":1,\"89\":1,\"90\":1}}],[\"使用rocketmq来实现基于消息的异步通信\",{\"1\":{\"86\":1}}],[\"使用rocketmq或kafka等实现消息传递\",{\"1\":{\"83\":1}}],[\"使用nacos\",{\"1\":{\"85\":1}}],[\"使用nacos作为服务注册与发现中心\",{\"1\":{\"84\":1}}],[\"使用流\",{\"1\":{\"73\":1}}],[\"使用迭代器遍历\",{\"1\":{\"65\":1}}],[\"使用的是\",{\"1\":{\"52\":1}}],[\"使用的是缓存对象\",{\"1\":{\"30\":1}}],[\"使用正确的注释可以使代码更易于理解和维护\",{\"1\":{\"22\":1}}],[\"使用之前必须赋值\",{\"1\":{\"11\":1}}],[\"使用\",{\"1\":{\"3\":2,\"12\":1,\"52\":1,\"64\":1,\"65\":2}}],[\"使用字符串字面量\",{\"1\":{\"2\":1}}],[\"使用字符串池来提高效率和节省内存\",{\"1\":{\"1\":1}}],[\"第三方物流系统集成\",{\"1\":{\"109\":1}}],[\"防止资源耗尽\",{\"1\":{\"144\":1}}],[\"防止外部变化直接影响领域模型\",{\"1\":{\"109\":1}}],[\"防腐层和应用服务等ddd的核心概念来解耦领域之间的依赖\",{\"1\":{\"117\":1}}],[\"防腐层实现类\",{\"1\":{\"109\":1}}],[\"防腐层接口\",{\"1\":{\"109\":1}}],[\"防腐层用于隔离不同领域或外部系统之间的依赖\",{\"1\":{\"109\":1}}],[\"触发支付流程\",{\"1\":{\"108\":1}}],[\"依赖倒置原则\",{\"1\":{\"105\":1}}],[\"明确边界\",{\"1\":{\"105\":1}}],[\"尽量减少与其他领域的耦合\",{\"1\":{\"105\":1}}],[\"低耦合\",{\"1\":{\"105\":1}}],[\"低耦合的架构\",{\"1\":{\"104\":1}}],[\"决定了系统各个领域之间的交互方式\",{\"1\":{\"104\":1}}],[\"电商系统可以更好地实现高内聚\",{\"1\":{\"104\":1}}],[\"电商系统的主要领域划分\",{\"0\":{\"93\":1}}],[\"各个领域之间可能会有一些关联\",{\"1\":{\"104\":1}}],[\"各微服务在启动时从nacos获取配置\",{\"1\":{\"85\":1}}],[\"站内信等\",{\"1\":{\"103\":1}}],[\"短信\",{\"1\":{\"103\":1}}],[\"短整型\",{\"1\":{\"38\":1}}],[\"售后服务\",{\"1\":{\"101\":1}}],[\"快递公司管理服务\",{\"1\":{\"100\":1}}],[\"快递公司管理等\",{\"1\":{\"100\":1}}],[\"快递公司\",{\"1\":{\"100\":1}}],[\"快速插入和删除\",{\"1\":{\"58\":1}}],[\"快速访问元素\",{\"1\":{\"58\":1}}],[\"配送完成事件\",{\"1\":{\"100\":1}}],[\"配送仓储\",{\"1\":{\"100\":1}}],[\"配送作为聚合根\",{\"1\":{\"100\":1}}],[\"配送聚合\",{\"1\":{\"100\":1}}],[\"配送服务\",{\"1\":{\"100\":1}}],[\"配送状态\",{\"1\":{\"100\":1}}],[\"配送地址\",{\"1\":{\"100\":1}}],[\"配送\",{\"1\":{\"100\":2}}],[\"配置各微服务注册到nacos\",{\"1\":{\"84\":1}}],[\"配置文件\",{\"1\":{\"82\":1}}],[\"配置管理插件\",{\"1\":{\"130\":1}}],[\"配置管理\",{\"1\":{\"77\":1}}],[\"优惠条件\",{\"1\":{\"99\":1}}],[\"优惠券管理服务\",{\"1\":{\"99\":1}}],[\"优惠券\",{\"1\":{\"99\":2}}],[\"折扣规则和优惠条件\",{\"1\":{\"99\":1}}],[\"折扣规则\",{\"1\":{\"99\":1}}],[\"折扣规则等\",{\"1\":{\"99\":1}}],[\"促销仓储\",{\"1\":{\"99\":1}}],[\"促销聚合\",{\"1\":{\"99\":1}}],[\"促销计算服务\",{\"1\":{\"99\":1}}],[\"促销活动作为聚合根\",{\"1\":{\"99\":1}}],[\"促销活动\",{\"1\":{\"99\":1}}],[\"促销与优惠与商品管理和订单管理关联\",{\"1\":{\"104\":1}}],[\"促销与优惠\",{\"1\":{\"93\":1}}],[\"退款事件\",{\"1\":{\"98\":1}}],[\"退款服务\",{\"1\":{\"98\":1}}],[\"退款\",{\"1\":{\"98\":1}}],[\"quantity\",{\"1\":{\"97\":1}}],[\"queuing\",{\"1\":{\"136\":1}}],[\"queuebind\",{\"1\":{\"148\":2}}],[\"queuename\",{\"1\":{\"147\":1}}],[\"queuedeclare\",{\"1\":{\"147\":2}}],[\"queues\",{\"1\":{\"137\":1}}],[\"queue\",{\"1\":{\"62\":2,\"74\":1,\"121\":3,\"122\":4,\"124\":2,\"139\":1,\"147\":2,\"148\":2,\"150\":3}}],[\"query\",{\"1\":{\"95\":1}}],[\"仓库\",{\"1\":{\"97\":1}}],[\"仓储实现\",{\"1\":{\"82\":1}}],[\"仓储\",{\"1\":{\"79\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"库存检查与扣减服务\",{\"1\":{\"107\":1}}],[\"库存变更事件\",{\"1\":{\"97\":1}}],[\"库存仓储\",{\"1\":{\"97\":1}}],[\"库存作为聚合根\",{\"1\":{\"97\":1}}],[\"库存聚合\",{\"1\":{\"97\":1}}],[\"库存更新服务\",{\"1\":{\"97\":1}}],[\"库存数量\",{\"1\":{\"97\":1}}],[\"库存\",{\"1\":{\"97\":1}}],[\"库存管理\",{\"1\":{\"93\":1}}],[\"历史记录等\",{\"1\":{\"96\":1}}],[\"状态更新\",{\"1\":{\"96\":1}}],[\"描述和规格参数\",{\"1\":{\"95\":1}}],[\"描述方法可能抛出的异常\",{\"1\":{\"22\":1}}],[\"描述方法的返回值\",{\"1\":{\"22\":1}}],[\"描述方法的参数\",{\"1\":{\"22\":1}}],[\"规格参数\",{\"1\":{\"95\":1}}],[\"品牌\",{\"1\":{\"95\":2}}],[\"商品可以参加促销活动\",{\"1\":{\"115\":1}}],[\"商品可能参与促销\",{\"1\":{\"104\":1}}],[\"商品仓储\",{\"1\":{\"95\":1}}],[\"商品作为聚合根\",{\"1\":{\"95\":1}}],[\"商品聚合\",{\"1\":{\"95\":1}}],[\"商品查询服务\",{\"1\":{\"95\":1}}],[\"商品描述\",{\"1\":{\"95\":1}}],[\"商品\",{\"1\":{\"95\":1}}],[\"商品管理\",{\"1\":{\"93\":1}}],[\"查询等\",{\"1\":{\"95\":1}}],[\"查找匹配的\",{\"1\":{\"122\":1}}],[\"查找和替换\",{\"1\":{\"6\":1}}],[\"查找字符或字符串\",{\"1\":{\"3\":1}}],[\"分布式系统通信\",{\"1\":{\"138\":1}}],[\"分类管理服务\",{\"1\":{\"95\":1}}],[\"分类\",{\"1\":{\"95\":2}}],[\"分为删除首尾节点与其他节点时候\",{\"1\":{\"71\":1}}],[\"授权服务\",{\"1\":{\"94\":1}}],[\"认证服务\",{\"1\":{\"94\":1}}],[\"认证等功能\",{\"1\":{\"89\":1}}],[\"地址\",{\"1\":{\"94\":1}}],[\"权限问题\",{\"1\":{\"133\":1}}],[\"权限控制的基本单位\",{\"1\":{\"121\":1}}],[\"权限\",{\"1\":{\"94\":1}}],[\"权限管理等\",{\"1\":{\"94\":1}}],[\"角色和权限\",{\"1\":{\"94\":1}}],[\"角色\",{\"1\":{\"94\":1}}],[\"登录成功后可以看到\",{\"1\":{\"129\":1,\"130\":1}}],[\"登录\",{\"1\":{\"94\":1}}],[\"负责接收消息并将其路由到一个或多个队列\",{\"1\":{\"146\":1}}],[\"负责接收和分发消息的应用\",{\"1\":{\"121\":1}}],[\"负责系统内外的通知管理\",{\"1\":{\"103\":1}}],[\"负责基于用户行为的推荐和个性化商品展示\",{\"1\":{\"102\":1}}],[\"负责售前\",{\"1\":{\"101\":1}}],[\"负责管理促销活动\",{\"1\":{\"99\":1}}],[\"负责订单的物流\",{\"1\":{\"100\":1}}],[\"负责订单的支付\",{\"1\":{\"98\":1}}],[\"负责订单的创建\",{\"1\":{\"96\":1}}],[\"负责商品库存的管理和更新\",{\"1\":{\"97\":1}}],[\"负责商品的创建\",{\"1\":{\"95\":1}}],[\"负责用户的注册\",{\"1\":{\"94\":1}}],[\"负载均衡\",{\"1\":{\"77\":1}}],[\"职责\",{\"1\":{\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"客户支持服务\",{\"1\":{\"101\":1}}],[\"客户工单作为聚合根\",{\"1\":{\"101\":1}}],[\"客户工单\",{\"1\":{\"101\":1}}],[\"客户反馈\",{\"1\":{\"101\":1}}],[\"客户服务仓储\",{\"1\":{\"101\":1}}],[\"客户服务聚合\",{\"1\":{\"101\":1}}],[\"客户服务\",{\"1\":{\"93\":1}}],[\"客户微服务\",{\"1\":{\"82\":1}}],[\"支付系统与物流系统解耦\",{\"1\":{\"125\":1}}],[\"支付服务发布支付成功事件\",{\"1\":{\"114\":1}}],[\"支付服务订阅领域事件\",{\"1\":{\"108\":1}}],[\"支付服务订阅该事件并触发支付流程\",{\"1\":{\"114\":1}}],[\"支付服务订阅该事件\",{\"1\":{\"108\":1}}],[\"支付成功后\",{\"1\":{\"114\":1}}],[\"支付成功后更新订单状态\",{\"1\":{\"114\":1}}],[\"支付成功事件\",{\"1\":{\"98\":1}}],[\"支付仓储\",{\"1\":{\"98\":1}}],[\"支付作为聚合根\",{\"1\":{\"98\":1}}],[\"支付聚合\",{\"1\":{\"98\":1}}],[\"支付处理服务\",{\"1\":{\"98\":1}}],[\"支付方式\",{\"1\":{\"98\":1}}],[\"支付\",{\"1\":{\"98\":1}}],[\"支付渠道管理等\",{\"1\":{\"98\":1}}],[\"支付管理\",{\"1\":{\"93\":1}}],[\"支持复杂的路由规则\",{\"1\":{\"137\":1}}],[\"支持多种插件\",{\"1\":{\"137\":1}}],[\"支持多种协议\",{\"1\":{\"137\":1}}],[\"支持多个\",{\"1\":{\"122\":1}}],[\"支持通配符\",{\"1\":{\"123\":1}}],[\"支持并发通信\",{\"1\":{\"122\":1}}],[\"支持消息持久化到磁盘\",{\"1\":{\"122\":1}}],[\"支持tcc\",{\"1\":{\"88\":1}}],[\"支持事件驱动架构\",{\"1\":{\"81\":1,\"86\":1}}],[\"支持随机访问\",{\"1\":{\"63\":1}}],[\"支持对象的序列化\",{\"1\":{\"50\":1}}],[\"支持对象的浅拷贝\",{\"1\":{\"50\":1}}],[\"能够帮助我们清晰地划分业务领域\",{\"1\":{\"92\":1}}],[\"同时保持与其他服务的良好协作\",{\"1\":{\"92\":1}}],[\"你可以使用ddd方法论和spring\",{\"1\":{\"92\":1}}],[\"集成第三方系统\",{\"1\":{\"109\":1}}],[\"集成测试和端到端测试\",{\"1\":{\"91\":1}}],[\"集合\",{\"1\":{\"65\":3}}],[\"集合的遍历\",{\"0\":{\"65\":1}}],[\"集合体系图\",{\"1\":{\"61\":1}}],[\"集合框架提供了丰富的选择\",{\"1\":{\"65\":1}}],[\"集合框架是一组用于存储和操作一组对象的接口和类的集合\",{\"1\":{\"61\":1}}],[\"集合框架介绍\",{\"0\":{\"61\":1}}],[\"集合框架\",{\"2\":{\"59\":1,\"75\":1}}],[\"集合中再赋值给属性\",{\"1\":{\"52\":1}}],[\"避免频繁创建和销毁连接的开销\",{\"1\":{\"144\":1}}],[\"避免系统过载\",{\"1\":{\"138\":1}}],[\"避免了直接调用导致的高耦合\",{\"1\":{\"138\":1}}],[\"避免领域之间的直接相互依赖\",{\"1\":{\"105\":1}}],[\"避免因为某个服务的故障导致整个系统不可用\",{\"1\":{\"87\":1}}],[\"避免默认大小的空数组占用内存\",{\"1\":{\"51\":1}}],[\"9\",{\"0\":{\"86\":1,\"102\":1}}],[\"暴露应用服务\",{\"1\":{\"83\":1}}],[\"一个连接可以包含多个信道\",{\"1\":{\"145\":1}}],[\"一个单词\",{\"1\":{\"123\":1}}],[\"一个领域的操作可以发布事件\",{\"1\":{\"108\":1}}],[\"一个典型的spring\",{\"1\":{\"82\":1}}],[\"一旦创建\",{\"1\":{\"1\":1}}],[\"管理其类型和内容\",{\"1\":{\"103\":1}}],[\"管理其用户行为和推荐规则\",{\"1\":{\"102\":1}}],[\"管理其客户反馈和投诉类型\",{\"1\":{\"101\":1}}],[\"管理其快递公司和配送状态\",{\"1\":{\"100\":1}}],[\"管理其优惠券\",{\"1\":{\"99\":1}}],[\"管理其交易和支付方式\",{\"1\":{\"98\":1}}],[\"管理其仓库和库存数量\",{\"1\":{\"97\":1}}],[\"管理其订单项\",{\"1\":{\"96\":1}}],[\"管理其分类\",{\"1\":{\"95\":1}}],[\"管理其个人信息\",{\"1\":{\"94\":1}}],[\"管理\",{\"1\":{\"79\":1,\"95\":1,\"96\":1}}],[\"识别出核心业务领域\",{\"1\":{\"79\":1}}],[\"领域内的代码可以不依赖于外部的复杂实现\",{\"1\":{\"109\":1}}],[\"领域间的依赖应通过接口和抽象类进行\",{\"1\":{\"105\":1}}],[\"领域关系处理是领域驱动设计\",{\"1\":{\"104\":1}}],[\"领域之间的关系\",{\"0\":{\"104\":1}}],[\"领域驱动设计\",{\"1\":{\"92\":1}}],[\"领域层实现\",{\"1\":{\"83\":1}}],[\"领域层\",{\"1\":{\"82\":1}}],[\"领域事件是领域间解耦的一种有效方式\",{\"1\":{\"108\":1}}],[\"领域事件和防腐层等机制来管理跨领域的交互\",{\"1\":{\"104\":1}}],[\"领域事件\",{\"1\":{\"79\":1,\"82\":1,\"96\":1,\"97\":1,\"98\":1,\"100\":1,\"103\":1,\"117\":1}}],[\"领域事件等\",{\"1\":{\"78\":1}}],[\"领域服务用于处理跨聚合和跨领域的业务逻辑\",{\"1\":{\"107\":1}}],[\"领域服务\",{\"1\":{\"78\":1,\"79\":1,\"82\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"聚合和领域服务\",{\"1\":{\"83\":1}}],[\"聚合等\",{\"1\":{\"82\":1}}],[\"聚合\",{\"1\":{\"78\":1,\"79\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"熔断\",{\"1\":{\"77\":1,\"89\":1}}],[\"网关\",{\"1\":{\"77\":1}}],[\"稳定且可扩展的微服务架构\",{\"1\":{\"92\":1}}],[\"稳定\",{\"1\":{\"77\":1}}],[\"还支持\",{\"1\":{\"137\":1}}],[\"还要利用spring\",{\"1\":{\"77\":1}}],[\"还有二维数组以及三维数组\",{\"1\":{\"15\":1}}],[\"除了\",{\"1\":{\"137\":1}}],[\"除了ddd的基本原则外\",{\"1\":{\"77\":1}}],[\"除法\",{\"1\":{\"13\":1}}],[\"搭建spring\",{\"1\":{\"77\":1}}],[\"搜索元素\",{\"1\":{\"74\":1}}],[\"有序集合\",{\"1\":{\"74\":1}}],[\"有序性\",{\"1\":{\"58\":1}}],[\"特别是当流操作被并行化时\",{\"1\":{\"73\":1}}],[\"特别是在列表头部和中间\",{\"1\":{\"63\":1}}],[\"进行模式匹配\",{\"1\":{\"146\":1}}],[\"进行精确匹配\",{\"1\":{\"146\":1}}],[\"进行遍历在语法上更加简洁\",{\"1\":{\"73\":1}}],[\"进入下一次循环\",{\"1\":{\"14\":1,\"37\":1}}],[\"直到被消费者消费\",{\"1\":{\"147\":1}}],[\"直到找到索引为index的节点\",{\"1\":{\"70\":2}}],[\"直接匹配\",{\"1\":{\"121\":1}}],[\"直接使用迭代器遍历\",{\"1\":{\"73\":1}}],[\"上表现较差\",{\"1\":{\"73\":1}}],[\"上一个节点的连接\",{\"1\":{\"71\":1}}],[\"性能较差\",{\"1\":{\"123\":1}}],[\"性能通常比普通\",{\"1\":{\"73\":1}}],[\"性能对比与分析\",{\"1\":{\"73\":1}}],[\"性能相对较差\",{\"1\":{\"58\":1}}],[\"流量削峰\",{\"1\":{\"125\":1,\"138\":1}}],[\"流量控制\",{\"1\":{\"122\":1}}],[\"流控\",{\"1\":{\"122\":1}}],[\"流可能不是最优选择\",{\"1\":{\"73\":1}}],[\"流\",{\"1\":{\"73\":2}}],[\"流程控制\",{\"0\":{\"14\":1}}],[\"耗时\",{\"1\":{\"73\":5}}],[\"普通\",{\"1\":{\"73\":2}}],[\"普通方式\",{\"1\":{\"69\":1}}],[\"假设\",{\"1\":{\"73\":1}}],[\"假设使用了一个linkedlist\",{\"1\":{\"73\":1}}],[\"千万数据的集合\",{\"1\":{\"73\":1}}],[\"首先要理解和设计领域模型\",{\"1\":{\"79\":1}}],[\"首先\",{\"1\":{\"73\":1}}],[\"种方式\",{\"1\":{\"73\":2}}],[\"迭代器核心方法\",{\"1\":{\"73\":1}}],[\"迭代器\",{\"1\":{\"73\":2}}],[\"迭代器遍历\",{\"1\":{\"57\":1}}],[\"迭代器遍历等方式\",{\"1\":{\"57\":1}}],[\"设置\",{\"1\":{\"71\":1,\"130\":1}}],[\"设置为新节点\",{\"1\":{\"70\":1}}],[\"设置为链表的第一个节点\",{\"1\":{\"70\":1}}],[\"设置为\",{\"1\":{\"70\":2,\"71\":3}}],[\"待删除节点的上一个节点\",{\"1\":{\"71\":1}}],[\"待删除节点的下一个节点\",{\"1\":{\"71\":1}}],[\"待删除的节点\",{\"1\":{\"71\":1}}],[\"清理被删除节点的元素和引用\",{\"1\":{\"71\":2}}],[\"清理被删除节点\",{\"1\":{\"71\":2}}],[\"操作是\",{\"1\":{\"73\":1}}],[\"操作\",{\"1\":{\"71\":1,\"73\":1}}],[\"操作元素\",{\"1\":{\"57\":2}}],[\"底层是\",{\"1\":{\"71\":1}}],[\"底层基于\",{\"1\":{\"67\":1}}],[\"判断是否还有前一个节点\",{\"1\":{\"73\":1}}],[\"判断是否还有下一个节点可以遍历\",{\"1\":{\"73\":1}}],[\"判断下一个节点的下标是否小于链表的大小\",{\"1\":{\"73\":1}}],[\"判断还有没有下一个节点\",{\"1\":{\"73\":1}}],[\"判断链表是否被其他线程修改过\",{\"1\":{\"73\":1}}],[\"判断删除节点是否为尾节点\",{\"1\":{\"71\":1}}],[\"判断删除节点是否为头节点\",{\"1\":{\"71\":1}}],[\"判断\",{\"1\":{\"70\":1}}],[\"判断给定的\",{\"1\":{\"70\":1}}],[\"节点的前一个节点引用设置为新节点\",{\"1\":{\"70\":1}}],[\"否则将下一个节点的引用\",{\"1\":{\"71\":1}}],[\"否则将删除节点\",{\"1\":{\"71\":2}}],[\"否则\",{\"1\":{\"70\":4,\"71\":1}}],[\"否则报错\",{\"1\":{\"11\":1}}],[\"也就是当前节点的后继节点的下标\",{\"1\":{\"73\":1}}],[\"也设置为\",{\"1\":{\"71\":1}}],[\"也是链表的头节点\",{\"1\":{\"70\":1}}],[\"也是链表的尾节点\",{\"1\":{\"70\":1}}],[\"也称为条件运算符\",{\"1\":{\"13\":1}}],[\"说明安装成功\",{\"1\":{\"129\":1,\"130\":1}}],[\"说明链表为空\",{\"1\":{\"70\":2}}],[\"说明某个功能从哪个版本开始存在\",{\"1\":{\"22\":1}}],[\"即高级消息队列协议\",{\"1\":{\"136\":1}}],[\"即时通讯\",{\"1\":{\"125\":1}}],[\"即无业务逻辑漂移到基础设施层或其他领域\",{\"1\":{\"107\":1}}],[\"即删除节点的上一个节点变为链表的尾节点或中间的某个节点\",{\"1\":{\"71\":1}}],[\"即删除节点的下一个节点变为链表的头节点或中间的某个节点\",{\"1\":{\"71\":1}}],[\"即它没有上一个节点\",{\"1\":{\"71\":1}}],[\"即当前节点\",{\"1\":{\"70\":2}}],[\"即当前链表的第一个节点\",{\"1\":{\"70\":1}}],[\"即最后一个节点\",{\"1\":{\"70\":1}}],[\"即扩容为当前容量的\",{\"1\":{\"58\":1}}],[\"赋值给\",{\"1\":{\"70\":3}}],[\"头插\",{\"1\":{\"70\":2}}],[\"头节点\",{\"1\":{\"67\":1}}],[\"404\",{\"1\":{\"154\":1}}],[\"4\",{\"0\":{\"81\":1,\"97\":1,\"110\":1,\"115\":1},\"1\":{\"69\":1,\"130\":1,\"133\":1}}],[\"前置指针指向前一个节点\",{\"1\":{\"67\":1}}],[\"前置指针为\",{\"1\":{\"67\":1}}],[\"尾插\",{\"1\":{\"70\":1}}],[\"尾插和中间插\",{\"1\":{\"70\":1}}],[\"尾尾点\",{\"1\":{\"67\":1}}],[\"尾部添加和删除效率高\",{\"1\":{\"63\":1}}],[\"后置指针为\",{\"1\":{\"67\":1}}],[\"后置指针指向第一个节点\",{\"1\":{\"67\":1}}],[\"后续\",{\"1\":{\"16\":1}}],[\"链表是一种线性数据结构\",{\"1\":{\"67\":1}}],[\"双向迭代器\",{\"1\":{\"73\":1}}],[\"双向链表结构\",{\"0\":{\"68\":1}}],[\"双向链表\",{\"1\":{\"67\":1,\"74\":1}}],[\"双精度浮点型\",{\"1\":{\"38\":1}}],[\"双精度\",{\"1\":{\"10\":1}}],[\"正确的代码至关重要\",{\"1\":{\"65\":1}}],[\"理解它们的特点和适用场景对于编写高效\",{\"1\":{\"65\":1}}],[\"理解和正确使用字符串操作是编写高效\",{\"1\":{\"6\":1}}],[\"总之\",{\"1\":{\"65\":1}}],[\"总结\",{\"0\":{\"6\":1,\"31\":1,\"58\":1,\"74\":1,\"92\":1,\"117\":1,\"140\":1}}],[\"获取消息进行处理\",{\"1\":{\"122\":1}}],[\"获取商品的促销信息\",{\"1\":{\"115\":1}}],[\"获取用户信息\",{\"1\":{\"112\":1}}],[\"获取用户的优惠信息\",{\"1\":{\"110\":1}}],[\"获取促销信息\",{\"1\":{\"110\":1}}],[\"获取前一个节点\",{\"1\":{\"73\":1}}],[\"获取下一个节点\",{\"1\":{\"73\":1}}],[\"获取链表指定索引位置的元素值\",{\"1\":{\"72\":1}}],[\"获取链表的最后一个元素\",{\"1\":{\"72\":1}}],[\"获取链表的第一个元素\",{\"1\":{\"72\":1}}],[\"获取元素\",{\"0\":{\"72\":1}}],[\"获取被删除节点的上一个节点\",{\"1\":{\"71\":1}}],[\"获取被删除节点的下一个节点\",{\"1\":{\"71\":1}}],[\"获取当前节点\",{\"1\":{\"70\":1}}],[\"获取当前链表的最后一个节点\",{\"1\":{\"70\":1}}],[\"获取当前链表的第一个节点\",{\"1\":{\"70\":1}}],[\"获取指定索引位置的节点\",{\"1\":{\"70\":1,\"72\":1}}],[\"获取键值对的集合进行遍历\",{\"1\":{\"65\":1}}],[\"获取键的集合\",{\"1\":{\"65\":1}}],[\"获取字符串长度\",{\"1\":{\"3\":1}}],[\"适用于频繁插入和删除操作的场景\",{\"1\":{\"74\":1}}],[\"适用于在多线程环境下使用\",{\"1\":{\"5\":1}}],[\"适用于在单线程环境下使用\",{\"1\":{\"5\":1}}],[\"适用场景\",{\"1\":{\"74\":1}}],[\"适用\",{\"1\":{\"64\":1}}],[\"若要对键进行排序\",{\"1\":{\"64\":1}}],[\"若不关心键的顺序\",{\"1\":{\"64\":1}}],[\"若需要元素自动排序\",{\"1\":{\"64\":1}}],[\"选择\",{\"1\":{\"64\":2}}],[\"选择合适的集合类型\",{\"0\":{\"64\":1}}],[\"key\",{\"1\":{\"130\":1,\"146\":2,\"148\":3,\"149\":1}}],[\"keyset\",{\"1\":{\"65\":1}}],[\"key2\",{\"1\":{\"63\":1}}],[\"key1\",{\"1\":{\"63\":1}}],[\"像这样\",{\"1\":{\"63\":1}}],[\"按照\",{\"1\":{\"122\":1}}],[\"按照集合批量删除\",{\"1\":{\"71\":1}}],[\"按照键的自然顺序或指定的比较器对键进行排序\",{\"1\":{\"63\":1}}],[\"按位取反\",{\"1\":{\"13\":1}}],[\"按位异或\",{\"1\":{\"13\":1}}],[\"按位或\",{\"1\":{\"13\":1}}],[\"按位与\",{\"1\":{\"13\":1}}],[\"比如订单处理\",{\"1\":{\"138\":1}}],[\"比如\",{\"1\":{\"63\":1}}],[\"比较\",{\"1\":{\"6\":1,\"73\":1}}],[\"存储消息\",{\"1\":{\"139\":1}}],[\"存储键值对时不保证顺序\",{\"1\":{\"63\":1}}],[\"存储元素的数组\",{\"1\":{\"51\":1}}],[\"时效率较高\",{\"1\":{\"63\":1}}],[\"时间复杂度为\",{\"1\":{\"58\":3}}],[\"非尾部插入和删除效率低\",{\"1\":{\"63\":1}}],[\"原则存储消息\",{\"1\":{\"122\":1}}],[\"原则\",{\"1\":{\"62\":1,\"121\":1}}],[\"遵循先进先出\",{\"1\":{\"62\":1}}],[\"实体\",{\"1\":{\"78\":1,\"79\":1,\"82\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"实际上是使用迭代器\",{\"1\":{\"73\":1}}],[\"实际元素个数\",{\"1\":{\"51\":1}}],[\"实现多线程通信\",{\"1\":{\"121\":1}}],[\"实现了\",{\"1\":{\"74\":1}}],[\"实现接口\",{\"1\":{\"74\":1}}],[\"实现\",{\"1\":{\"63\":1,\"67\":1}}],[\"实现类如\",{\"1\":{\"62\":1}}],[\"遍历\",{\"1\":{\"73\":1}}],[\"遍历元素\",{\"0\":{\"73\":1}}],[\"遍历等\",{\"1\":{\"62\":1}}],[\"遍历方式\",{\"0\":{\"57\":1},\"1\":{\"73\":1}}],[\"删除节点\",{\"1\":{\"71\":3}}],[\"删除操作的源码都差不多\",{\"1\":{\"71\":1}}],[\"删除尾节点\",{\"1\":{\"71\":2}}],[\"删除头节点\",{\"1\":{\"71\":2}}],[\"删除元素\",{\"0\":{\"71\":1},\"1\":{\"74\":1}}],[\"删除\",{\"1\":{\"62\":1,\"71\":1}}],[\"主要特点\",{\"0\":{\"137\":1}}],[\"主要取决于它们如何与\",{\"1\":{\"73\":1}}],[\"主要接口\",{\"0\":{\"62\":1}}],[\"主要是因为它的实现方式\",{\"1\":{\"52\":1}}],[\"源码\",{\"2\":{\"60\":1,\"76\":1}}],[\"源码分析\",{\"0\":{\"48\":1,\"66\":1}}],[\"容器\",{\"2\":{\"59\":1,\"75\":1}}],[\"具有唯一标识符的对象\",{\"1\":{\"79\":1}}],[\"具有高效的随机访问性能\",{\"1\":{\"58\":1}}],[\"具体计算逻辑为\",{\"1\":{\"58\":1}}],[\"对节点的\",{\"1\":{\"71\":1}}],[\"对于简单的遍历和累加操作\",{\"1\":{\"73\":1}}],[\"对于\",{\"1\":{\"65\":3,\"73\":2}}],[\"对于键值对存储\",{\"1\":{\"64\":1}}],[\"对于在末尾添加和删除元素\",{\"1\":{\"58\":1}}],[\"对象是不可变的\",{\"1\":{\"1\":1}}],[\"必须手动同步或者使用线程安全的集合类\",{\"1\":{\"58\":1}}],[\"线程不安全\",{\"1\":{\"58\":1,\"74\":1}}],[\"线程不安全的\",{\"1\":{\"5\":1}}],[\"允许存储\",{\"1\":{\"74\":1}}],[\"允许存储重复的元素\",{\"1\":{\"74\":1}}],[\"允许键值对为\",{\"1\":{\"63\":1}}],[\"允许包含重复的元素\",{\"1\":{\"58\":1}}],[\"允许重复元素\",{\"1\":{\"58\":1}}],[\"由后台的消费者异步执行\",{\"1\":{\"138\":1}}],[\"由聚合根\",{\"1\":{\"79\":1}}],[\"由一个或多个实体和值对象组成的聚合体\",{\"1\":{\"79\":1}}],[\"由于需要保留一定的空余容量以便动态扩展\",{\"1\":{\"58\":1}}],[\"由于\",{\"1\":{\"58\":1}}],[\"由系统决定长度\",{\"1\":{\"15\":1}}],[\"由系统给出初始化值\",{\"1\":{\"15\":1}}],[\"随机访问\",{\"1\":{\"58\":1}}],[\"保持系统的高内聚和低耦合\",{\"1\":{\"117\":1}}],[\"保持元素的插入顺序\",{\"1\":{\"58\":1}}],[\"保证服务的可用性和扩展性\",{\"1\":{\"91\":1}}],[\"保存被删除节点的元素\",{\"1\":{\"71\":2}}],[\"保存要删除节点的信息\",{\"1\":{\"71\":2}}],[\"保留元素的插入顺序\",{\"1\":{\"74\":1}}],[\"保留关键字\",{\"1\":{\"40\":2}}],[\"保留字\",{\"0\":{\"40\":1}}],[\"元素\",{\"1\":{\"74\":2}}],[\"元素会自动按照自然顺序或指定的比较器进行排序\",{\"1\":{\"63\":1}}],[\"元素的存储顺序是不确定的\",{\"1\":{\"63\":1}}],[\"元素类型\",{\"1\":{\"58\":1}}],[\"元素可以通过索引进行访问和操作\",{\"1\":{\"58\":1}}],[\"元素删除\",{\"0\":{\"56\":1}}],[\"元素添加\",{\"0\":{\"55\":1}}],[\"需要先启用管理插件\",{\"1\":{\"129\":1}}],[\"需要与第三方物流系统集成\",{\"1\":{\"109\":1}}],[\"需要检查库存是否足够并进行扣减\",{\"1\":{\"107\":1}}],[\"需要根据具体场景选择合适的数据结构\",{\"1\":{\"58\":1}}],[\"需要将指定位置及之后的元素向后移动\",{\"1\":{\"55\":1}}],[\"需要进行类型转换\",{\"1\":{\"52\":1}}],[\"需要进行强制类型转换\",{\"1\":{\"45\":1}}],[\"此时可以直接初始化一个预先设定好的长度\",{\"1\":{\"54\":1}}],[\"减少性能开销\",{\"1\":{\"121\":1}}],[\"减少\",{\"1\":{\"54\":1}}],[\"减法\",{\"1\":{\"13\":1}}],[\"旧容量右移\",{\"1\":{\"54\":1}}],[\"旧容量\",{\"1\":{\"54\":1}}],[\"新添加的节点\",{\"1\":{\"70\":2}}],[\"新容量\",{\"1\":{\"54\":1}}],[\"新的容量为原容量的\",{\"1\":{\"54\":1}}],[\"核心组件\",{\"0\":{\"121\":1}}],[\"核心扩容逻辑\",{\"1\":{\"54\":1}}],[\"核心字段\",{\"0\":{\"51\":1}}],[\"添加元素\",{\"1\":{\"54\":1,\"74\":1}}],[\"倍\",{\"1\":{\"54\":2,\"58\":1}}],[\"扩容策略\",{\"1\":{\"58\":1}}],[\"扩容方法\",{\"1\":{\"54\":1}}],[\"扩容机制\",{\"0\":{\"54\":1}}],[\"扩容则需要申请新的数组长度\",{\"1\":{\"49\":1}}],[\"排序arrays\",{\"1\":{\"52\":1}}],[\"二分查找arrays\",{\"1\":{\"52\":1}}],[\"里面还有一些非常好用的方法\",{\"1\":{\"52\":1}}],[\"另外这个\",{\"1\":{\"52\":1}}],[\"下载\",{\"1\":{\"130\":5}}],[\"下面详细描述每个领域的划分及其主要职责\",{\"1\":{\"93\":1}}],[\"下面我们来详细设计一个电商系统的领域划分\",{\"1\":{\"92\":1}}],[\"下面是一个详细的步骤指南\",{\"1\":{\"77\":1}}],[\"下面是一个示例\",{\"1\":{\"45\":1}}],[\"下一个节点的连接\",{\"1\":{\"71\":1}}],[\"下的\",{\"1\":{\"52\":1}}],[\"最终根据多态找到的具体实现\",{\"1\":{\"52\":1}}],[\"最大索引为数组长度减\",{\"1\":{\"15\":1}}],[\"得到的\",{\"1\":{\"52\":1}}],[\"构建出来的\",{\"1\":{\"52\":1}}],[\"构建的集合特点\",{\"1\":{\"52\":1}}],[\"构造函数使用的是\",{\"1\":{\"52\":1}}],[\"构造方法\",{\"0\":{\"52\":1},\"1\":{\"69\":1}}],[\"构造方法或代码块外的变量\",{\"1\":{\"11\":1}}],[\"造成原因\",{\"1\":{\"52\":1}}],[\"子类实现和父类同名的方法\",{\"1\":{\"52\":1}}],[\"子字符串\",{\"1\":{\"6\":1}}],[\"毕竟\",{\"1\":{\"52\":1}}],[\"返回被删除节点的元素值\",{\"1\":{\"71\":3}}],[\"返回的类型不一定就是object\",{\"1\":{\"52\":1}}],[\"返回值的描述\",{\"1\":{\"22\":1}}],[\"返回值\",{\"1\":{\"16\":1}}],[\"返回值类型\",{\"1\":{\"16\":1}}],[\"测试示例\",{\"1\":{\"52\":1}}],[\"观察传入集合进行初始化的构造方法看出\",{\"1\":{\"52\":1}}],[\"guest\",{\"1\":{\"130\":2,\"144\":4}}],[\"gitee\",{\"1\":{\"130\":1}}],[\"github\",{\"1\":{\"130\":2}}],[\"generation\",{\"1\":{\"102\":1}}],[\"getresponse\",{\"1\":{\"150\":1}}],[\"getdeliverytag\",{\"1\":{\"150\":3}}],[\"getenvelope\",{\"1\":{\"150\":3}}],[\"getbody\",{\"1\":{\"150\":3}}],[\"getbytes\",{\"1\":{\"149\":1}}],[\"getqueue\",{\"1\":{\"147\":1}}],[\"getuserid\",{\"1\":{\"110\":1}}],[\"getpromotionforuser\",{\"1\":{\"110\":1}}],[\"getshippingdetails\",{\"1\":{\"109\":1}}],[\"getid\",{\"1\":{\"108\":1}}],[\"getitems\",{\"1\":{\"107\":1}}],[\"get\",{\"1\":{\"72\":1,\"73\":3}}],[\"getlast\",{\"1\":{\"72\":1}}],[\"getfirst\",{\"1\":{\"72\":1}}],[\"getclass\",{\"1\":{\"52\":4}}],[\"gateway作为api网关\",{\"1\":{\"89\":1}}],[\"gateway\",{\"1\":{\"81\":1,\"89\":1}}],[\"grape\",{\"1\":{\"63\":1}}],[\"grow\",{\"1\":{\"54\":2}}],[\"gc\",{\"1\":{\"56\":1,\"71\":2}}],[\"goto\",{\"1\":{\"40\":1}}],[\"默认\",{\"1\":{\"144\":4}}],[\"默认用户名\",{\"1\":{\"129\":1,\"130\":1}}],[\"默认心跳间隔\",{\"1\":{\"122\":1}}],[\"默认使用尾插进行插入\",{\"1\":{\"70\":1}}],[\"默认调用的是子类的实现方法\",{\"1\":{\"52\":1}}],[\"默认构造方法\",{\"1\":{\"52\":1}}],[\"默认容量空数组\",{\"1\":{\"51\":1}}],[\"默认容量\",{\"1\":{\"51\":1}}],[\"传入集合进行初始化的构造方法\",{\"1\":{\"52\":2}}],[\"指针指向上一个节点\",{\"1\":{\"73\":1}}],[\"指定\",{\"1\":{\"148\":1}}],[\"指定位置插入\",{\"1\":{\"70\":1}}],[\"指定初始容量的构造方法\",{\"1\":{\"52\":2}}],[\"指向当前节点\",{\"1\":{\"73\":1}}],[\"指向上一个节点\",{\"1\":{\"71\":1}}],[\"指向\",{\"1\":{\"71\":2}}],[\"指向下一个节点\",{\"1\":{\"71\":1,\"73\":1}}],[\"指向下一个节点的指针\",{\"1\":{\"67\":1}}],[\"指向同一个字符串池中的对象\",{\"1\":{\"2\":1}}],[\"空数组实例\",{\"1\":{\"51\":1}}],[\"序列化版本\",{\"1\":{\"51\":1}}],[\"标准\",{\"1\":{\"136\":1}}],[\"标识实现支持快速随机访问\",{\"1\":{\"50\":1}}],[\"标记一个方法或类已过时\",{\"1\":{\"22\":1}}],[\"rsa\",{\"1\":{\"130\":1}}],[\"rpm\",{\"1\":{\"130\":12}}],[\"rabbitmqctl\",{\"1\":{\"130\":3,\"133\":3}}],[\"rabbitmq\",{\"1\":{\"121\":4,\"129\":5,\"130\":13,\"133\":3,\"136\":1,\"137\":7,\"138\":1,\"139\":1,\"140\":1,\"144\":4},\"2\":{\"127\":1,\"135\":1,\"142\":1,\"153\":1}}],[\"rangecheck\",{\"1\":{\"56\":1}}],[\"rangecheckforadd\",{\"1\":{\"55\":1}}],[\"randomaccess\",{\"1\":{\"50\":3,\"52\":1}}],[\"rules\",{\"1\":{\"99\":1,\"102\":1}}],[\"robin\",{\"1\":{\"122\":1}}],[\"round\",{\"1\":{\"122\":1}}],[\"routing\",{\"1\":{\"146\":2,\"148\":3,\"149\":1}}],[\"routingkey\",{\"1\":{\"122\":1,\"123\":1}}],[\"routes\",{\"1\":{\"89\":1}}],[\"role\",{\"1\":{\"94\":1}}],[\"rocketmq\",{\"1\":{\"81\":1}}],[\"root\",{\"1\":{\"79\":1}}],[\"received\",{\"1\":{\"150\":3}}],[\"recommendation\",{\"1\":{\"93\":1,\"102\":5}}],[\"relative\",{\"1\":{\"133\":1}}],[\"reject\",{\"1\":{\"124\":1}}],[\"request\",{\"1\":{\"107\":2,\"108\":1,\"110\":3}}],[\"requirenonnull\",{\"1\":{\"71\":1}}],[\"refund\",{\"1\":{\"98\":2}}],[\"response\",{\"1\":{\"150\":4}}],[\"resources\",{\"1\":{\"82\":1}}],[\"rest控制器\",{\"1\":{\"82\":1}}],[\"result\",{\"1\":{\"3\":4,\"13\":3,\"16\":1}}],[\"repositories\",{\"1\":{\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"repository\",{\"1\":{\"79\":1,\"82\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"112\":1}}],[\"replace\",{\"1\":{\"3\":2}}],[\"removeall\",{\"1\":{\"71\":1}}],[\"removelast\",{\"1\":{\"71\":1}}],[\"removefirst\",{\"1\":{\"71\":2}}],[\"remove\",{\"1\":{\"56\":4,\"71\":4}}],[\"return\",{\"1\":{\"14\":1,\"16\":2,\"22\":3,\"37\":1,\"54\":1,\"55\":1,\"56\":4,\"70\":3,\"71\":11,\"72\":5,\"73\":4,\"108\":1,\"110\":1,\"124\":1}}],[\"继承自\",{\"1\":{\"50\":1}}],[\"并确保消息的可靠传递\",{\"1\":{\"140\":1}}],[\"并将其应用到商品的展示和订单的价格计算中\",{\"1\":{\"115\":1}}],[\"并将其应用于订单中\",{\"1\":{\"110\":1}}],[\"并将其后的元素向前移动\",{\"1\":{\"56\":1}}],[\"并通过领域服务\",{\"1\":{\"104\":1}}],[\"并提供限流\",{\"1\":{\"89\":1}}],[\"并且只关注其领域内的逻辑\",{\"1\":{\"80\":1}}],[\"并且已经初始化\",{\"1\":{\"73\":1}}],[\"并且在第一次添加元素时进行第一次扩容为默认容量\",{\"1\":{\"58\":1}}],[\"并断开删除节点\",{\"1\":{\"71\":2}}],[\"并实现了\",{\"1\":{\"50\":1}}],[\"并把原数组元素拷贝到新数组中\",{\"1\":{\"49\":1}}],[\"并以\",{\"1\":{\"21\":1,\"22\":1}}],[\"定长\",{\"1\":{\"49\":1}}],[\"定义出领域模型\",{\"1\":{\"79\":1}}],[\"定义了交换机和队列之间的路由关系\",{\"1\":{\"148\":1}}],[\"定义了\",{\"1\":{\"121\":1}}],[\"定义了集合的基本操作\",{\"1\":{\"62\":1}}],[\"定义了列表数据结构的一般行为\",{\"1\":{\"50\":1}}],[\"定义包\",{\"1\":{\"39\":1}}],[\"定义方法\",{\"1\":{\"16\":1}}],[\"定义int类型的数组\",{\"1\":{\"15\":1}}],[\"定义数组\",{\"1\":{\"15\":1}}],[\"会将当前容量增加\",{\"1\":{\"58\":1}}],[\"会继续进行扩容\",{\"1\":{\"58\":1}}],[\"会根据需要自动调整其容量\",{\"1\":{\"58\":1}}],[\"会进行扩容操作\",{\"1\":{\"49\":1,\"54\":1}}],[\"会自动进行类型转换\",{\"1\":{\"44\":1}}],[\"初始容量可以指定\",{\"1\":{\"58\":1}}],[\"初始容量\",{\"0\":{\"53\":1}}],[\"初始容量为\",{\"1\":{\"49\":1,\"52\":1}}],[\"初始化一个包含\",{\"1\":{\"73\":1}}],[\"初始化一个空数组\",{\"1\":{\"52\":1}}],[\"初始化数据\",{\"1\":{\"73\":1}}],[\"初始化数组\",{\"1\":{\"15\":1}}],[\"初始化方式\",{\"1\":{\"69\":1}}],[\"初始化\",{\"0\":{\"69\":1}}],[\"初始化时\",{\"1\":{\"53\":1}}],[\"初始化变量\",{\"1\":{\"11\":1}}],[\"动态大小\",{\"1\":{\"74\":1}}],[\"动态调整大小\",{\"1\":{\"58\":1}}],[\"动态数组\",{\"1\":{\"49\":1}}],[\"动态数组object\",{\"1\":{\"49\":1}}],[\"动态初始化\",{\"1\":{\"15\":1}}],[\"可靠且灵活的消息队列系统\",{\"1\":{\"140\":1}}],[\"可靠性保证\",{\"0\":{\"151\":1}}],[\"可靠性\",{\"1\":{\"137\":1}}],[\"可靠性机制\",{\"0\":{\"124\":1}}],[\"可维护性和可扩展性\",{\"1\":{\"104\":1}}],[\"可独立部署的\",{\"1\":{\"80\":1}}],[\"可扩展的微服务架构\",{\"1\":{\"77\":1}}],[\"可重复元素\",{\"1\":{\"74\":1}}],[\"可重复的集合\",{\"1\":{\"62\":1}}],[\"可考虑\",{\"1\":{\"64\":1}}],[\"可能触发溢出策略\",{\"1\":{\"122\":1}}],[\"可能会比实际存储的数据占用更多的内存\",{\"1\":{\"58\":1}}],[\"可能会导致数据溢出\",{\"1\":{\"45\":1}}],[\"可能返回的不是\",{\"1\":{\"52\":1}}],[\"可能溢出的强制转换后的\",{\"1\":{\"45\":1}}],[\"可能导致数据溢出的强制类型转换\",{\"1\":{\"45\":1}}],[\"可以复用同一个连接创建多个信道\",{\"1\":{\"145\":1}}],[\"可以帮助不同微服务之间传递消息\",{\"1\":{\"138\":1}}],[\"可以将复杂的任务异步化\",{\"1\":{\"138\":1}}],[\"可以将业务划分为以下主要领域\",{\"1\":{\"93\":1}}],[\"可以根据不同的交换机\",{\"1\":{\"137\":1}}],[\"可以保证在集群节点出现故障时\",{\"1\":{\"137\":1}}],[\"可以与多种客户端和应用系统进行交互\",{\"1\":{\"137\":1}}],[\"可以有效地管理跨领域的交互\",{\"1\":{\"117\":1}}],[\"可以提高系统的可维护性和可扩展性\",{\"1\":{\"92\":1}}],[\"可以用作栈\",{\"1\":{\"74\":1}}],[\"可以用来替代简单的\",{\"1\":{\"13\":1}}],[\"可以随时增加或删除元素\",{\"1\":{\"74\":1}}],[\"可以存储任意类型的对象\",{\"1\":{\"58\":1}}],[\"可以参考\",{\"1\":{\"52\":1}}],[\"可以在微服务之间进行高效的远程调用\",{\"1\":{\"86\":1}}],[\"可以在任何地方访问\",{\"1\":{\"35\":1}}],[\"可以在同一个包内及不同包的子类中访问\",{\"1\":{\"35\":1}}],[\"可以通过消息队列缓冲系统流量\",{\"1\":{\"138\":1}}],[\"可以通过直接调用用户服务\",{\"1\":{\"112\":1}}],[\"可以通过索引进行快速的随机访问\",{\"1\":{\"58\":1}}],[\"可以通过索引遍历\",{\"1\":{\"57\":1}}],[\"可以通过\",{\"1\":{\"27\":1}}],[\"可以通过启动参数修改缓存范围\",{\"1\":{\"27\":1}}],[\"可以通过字面量或\",{\"1\":{\"6\":1}}],[\"可以跨多行使用\",{\"1\":{\"21\":1}}],[\"可以使用防腐层来封装第三方系统的接口\",{\"1\":{\"109\":1}}],[\"可以使用\",{\"1\":{\"6\":1,\"74\":1}}],[\"小结\",{\"1\":{\"52\":1}}],[\"小数部分会被截断\",{\"1\":{\"45\":1}}],[\"小于等于\",{\"1\":{\"13\":1}}],[\"小于\",{\"1\":{\"13\":1}}],[\"强制转换后的\",{\"1\":{\"45\":1}}],[\"强制将\",{\"1\":{\"45\":1}}],[\"强制类型转换可能会导致数据精度丢失或溢出\",{\"1\":{\"45\":1}}],[\"强制类型转换\",{\"0\":{\"45\":1},\"1\":{\"45\":1}}],[\"转换为\",{\"1\":{\"45\":2}}],[\"展示了数据类型转换的情况\",{\"1\":{\"45\":1}}],[\"值对象\",{\"1\":{\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"值\",{\"1\":{\"45\":4}}],[\"值为\",{\"1\":{\"38\":1}}],[\"将队列绑定到交换机\",{\"1\":{\"148\":1}}],[\"将任务放入队列中\",{\"1\":{\"138\":1}}],[\"将消息发送到\",{\"1\":{\"139\":1}}],[\"将消息存储起来\",{\"1\":{\"122\":1}}],[\"将消息路由到一个或多个队列\",{\"1\":{\"122\":1}}],[\"将消息路由到一个或多个\",{\"1\":{\"122\":1}}],[\"将消息分发到相应队列\",{\"1\":{\"121\":1}}],[\"将配置文件存储在nacos中\",{\"1\":{\"85\":1}}],[\"将系统划分为多个微服务\",{\"1\":{\"80\":1}}],[\"将被删除节点的上一个节点\",{\"1\":{\"71\":1}}],[\"将新节点\",{\"1\":{\"70\":1}}],[\"将新创建的节点设置为链表的尾节点\",{\"1\":{\"70\":1}}],[\"将新创建的节点设置为链表的头节点\",{\"1\":{\"70\":1}}],[\"将原来的最后一个节点\",{\"1\":{\"70\":1}}],[\"将原来的第一个节点\",{\"1\":{\"70\":1}}],[\"将\",{\"1\":{\"44\":1,\"45\":1,\"70\":2,\"71\":2,\"73\":3,\"130\":2}}],[\"显式类型转换\",{\"1\":{\"43\":1}}],[\"隐式类型转换\",{\"1\":{\"43\":1}}],[\"未来可能使用\",{\"0\":{\"40\":1}}],[\"引入其他包\",{\"1\":{\"39\":1}}],[\"引用设置为\",{\"1\":{\"71\":1}}],[\"引用当前类的对象\",{\"1\":{\"39\":1}}],[\"引用父类的对象\",{\"1\":{\"39\":1}}],[\"引用数据类型\",{\"1\":{\"10\":1}}],[\"整型\",{\"1\":{\"38\":1}}],[\"整数类型缓存池\",{\"0\":{\"27\":1}}],[\"字节类型\",{\"1\":{\"38\":1}}],[\"字符\",{\"1\":{\"38\":1}}],[\"字符类型\",{\"1\":{\"38\":1}}],[\"字符类型缓存池\",{\"0\":{\"28\":1}}],[\"字符数组转字符串\",{\"1\":{\"4\":1}}],[\"字符串转字符数组\",{\"1\":{\"4\":1}}],[\"字符串转换大小写\",{\"1\":{\"3\":1}}],[\"字符串与字符数组的转换\",{\"0\":{\"4\":1}}],[\"字符串比较\",{\"1\":{\"3\":1}}],[\"字符串拼接\",{\"1\":{\"3\":1}}],[\"字符串池\",{\"1\":{\"1\":1}}],[\"字符串的特性\",{\"0\":{\"1\":1}}],[\"字符串在\",{\"1\":{\"0\":1}}],[\"字符串是一种非常重要的数据类型\",{\"1\":{\"0\":1}}],[\"字符串\",{\"0\":{\"0\":1},\"2\":{\"8\":1}}],[\"布尔类型\",{\"1\":{\"38\":1}}],[\"布尔类型缓存池\",{\"0\":{\"29\":1}}],[\"抛出一个异常\",{\"1\":{\"37\":1}}],[\"处理完成后发送确认信息\",{\"1\":{\"139\":1}}],[\"处理电商系统中领域关系的关键在于明确领域职责\",{\"1\":{\"117\":1}}],[\"处理方式\",{\"1\":{\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1}}],[\"处理跨领域的工作流\",{\"1\":{\"110\":1}}],[\"处理支付逻辑\",{\"1\":{\"108\":1}}],[\"处理领域关系的关键在于明确每个领域的职责\",{\"1\":{\"104\":1}}],[\"处理客户的咨询和投诉\",{\"1\":{\"101\":1}}],[\"处理请求路由和负载均衡\",{\"1\":{\"89\":1}}],[\"处理链表头节点\",{\"1\":{\"71\":1}}],[\"处理链表尾节点\",{\"1\":{\"71\":1}}],[\"处理尾节点\",{\"1\":{\"71\":1}}],[\"处理头节点\",{\"1\":{\"71\":1}}],[\"处理\",{\"1\":{\"37\":1}}],[\"捕获异常的代码块\",{\"1\":{\"37\":1}}],[\"从而实现多线程下的并发操作\",{\"1\":{\"145\":1}}],[\"从而实现动态数组\",{\"1\":{\"49\":1}}],[\"从队列中消费消息并处理\",{\"1\":{\"139\":1}}],[\"从尾到头迭代\",{\"1\":{\"73\":1}}],[\"从头到尾迭代\",{\"1\":{\"73\":1}}],[\"从链表的尾部开始遍历\",{\"1\":{\"70\":1}}],[\"从以上的类继承体系图可以看出\",{\"1\":{\"52\":1}}],[\"从方法中返回结果\",{\"1\":{\"37\":1}}],[\"从第\",{\"1\":{\"3\":1}}],[\"跳过当前循环中的剩余语句\",{\"1\":{\"37\":1}}],[\"跳出当前循环或开关语句\",{\"1\":{\"37\":1}}],[\"结果\",{\"1\":{\"52\":1}}],[\"结合使用\",{\"1\":{\"37\":1}}],[\"结束\",{\"1\":{\"21\":1,\"22\":1}}],[\"结束当前方法\",{\"1\":{\"14\":1}}],[\"结束当前循环\",{\"1\":{\"14\":1}}],[\"结束单层循环\",{\"1\":{\"14\":1}}],[\"条件语句的其他分支\",{\"1\":{\"37\":1}}],[\"条件语句\",{\"1\":{\"37\":1}}],[\"控制语句\",{\"0\":{\"37\":1}}],[\"控制跳转语句\",{\"1\":{\"14\":1}}],[\"该方法用其他语言\",{\"1\":{\"36\":1}}],[\"表示当前遍历期望的修改计数值\",{\"1\":{\"73\":1}}],[\"表示当前节点数据\",{\"1\":{\"70\":1}}],[\"表示下一个要遍历的节点的下标\",{\"1\":{\"73\":1}}],[\"表示下一个要遍历的节点\",{\"1\":{\"73\":1}}],[\"表示上一次调用\",{\"1\":{\"73\":1}}],[\"表示一个类实现接口\",{\"1\":{\"36\":1}}],[\"表示继承一个类\",{\"1\":{\"36\":1}}],[\"受保护访问权限\",{\"1\":{\"35\":1}}],[\"私有访问权限\",{\"1\":{\"35\":1}}],[\"以\",{\"1\":{\"130\":2}}],[\"以便微服务的独立部署和扩展\",{\"1\":{\"104\":1}}],[\"以上五种遍历方式在性能上会有所不同\",{\"1\":{\"73\":1}}],[\"以满足不同的编程需求\",{\"1\":{\"61\":1}}],[\"以下是一些处理具体领域关系的常见方法和策略\",{\"1\":{\"104\":1}}],[\"以下是\",{\"1\":{\"34\":1}}],[\"以减少对象创建的开销\",{\"1\":{\"26\":1}}],[\"程序的效率\",{\"1\":{\"31\":1}}],[\"合理理解和利用缓存池机制可以有效提升\",{\"1\":{\"31\":1}}],[\"而不直接依赖第三方系统的具体实现\",{\"1\":{\"109\":1}}],[\"而不是具体实现\",{\"1\":{\"105\":1}}],[\"而超过此范围时\",{\"1\":{\"30\":1}}],[\"而且在\",{\"1\":{\"15\":1}}],[\"所以需要增加用户并配置权限\",{\"1\":{\"130\":1}}],[\"所以整个遍历的复杂度是\",{\"1\":{\"73\":1}}],[\"所以\",{\"1\":{\"30\":2}}],[\"所有对象共享同一个静态变量\",{\"1\":{\"11\":1}}],[\"内存不足\",{\"1\":{\"133\":1}}],[\"内存警告\",{\"1\":{\"122\":1}}],[\"内存占用\",{\"1\":{\"58\":1}}],[\"内部类\",{\"1\":{\"69\":1}}],[\"内部是通过数组实现的\",{\"1\":{\"58\":1}}],[\"内部字段和方法定义\",{\"1\":{\"50\":1}}],[\"内部使用一个\",{\"1\":{\"49\":1}}],[\"内\",{\"1\":{\"30\":1}}],[\"范围\",{\"1\":{\"30\":1}}],[\"范围内\",{\"1\":{\"27\":1}}],[\"范围内会被缓存\",{\"1\":{\"27\":2,\"28\":1}}],[\"等协议\",{\"1\":{\"137\":1}}],[\"等待消费者取出并处理\",{\"1\":{\"139\":1}}],[\"等待\",{\"1\":{\"122\":1}}],[\"等\",{\"1\":{\"62\":2}}],[\"等价于扩容为原容量的\",{\"1\":{\"54\":1}}],[\"等价于\",{\"1\":{\"30\":1}}],[\"等于\",{\"1\":{\"13\":1}}],[\"机制在缓存池中也发挥作用\",{\"1\":{\"30\":1}}],[\"username\",{\"1\":{\"144\":1}}],[\"user\",{\"1\":{\"93\":1,\"94\":3,\"102\":1,\"112\":2,\"130\":2,\"133\":2}}],[\"uri\",{\"1\":{\"89\":1}}],[\"util\",{\"1\":{\"52\":1,\"69\":1}}],[\"uid\",{\"1\":{\"51\":1}}],[\"unlinklast\",{\"1\":{\"71\":2}}],[\"unlinkfirst\",{\"1\":{\"71\":2}}],[\"unlink\",{\"1\":{\"71\":4}}],[\"unicode\",{\"1\":{\"38\":1}}],[\"unboxing\",{\"1\":{\"30\":1}}],[\"updating\",{\"1\":{\"130\":1}}],[\"update\",{\"1\":{\"14\":1,\"97\":1}}],[\"upper\",{\"1\":{\"3\":2}}],[\"60秒过期\",{\"1\":{\"149\":1}}],[\"60000\",{\"1\":{\"149\":1}}],[\"6026dfca\",{\"1\":{\"130\":1}}],[\"60\",{\"1\":{\"122\":1}}],[\"6\",{\"0\":{\"83\":1,\"99\":1},\"1\":{\"63\":1}}],[\"65\",{\"1\":{\"28\":2}}],[\"64\",{\"1\":{\"10\":2,\"38\":2,\"130\":2}}],[\"来触发订单状态更新操作\",{\"1\":{\"116\":1}}],[\"来实现解耦\",{\"1\":{\"114\":1}}],[\"来实现\",{\"1\":{\"107\":1}}],[\"来构建一个高效\",{\"1\":{\"77\":1}}],[\"来说\",{\"1\":{\"73\":1}}],[\"来存储元素\",{\"1\":{\"49\":1}}],[\"来调整缓存范围\",{\"1\":{\"27\":1}}],[\"来处理可变的字符串\",{\"1\":{\"6\":1}}],[\"json\",{\"1\":{\"149\":1}}],[\"jdk1\",{\"1\":{\"63\":2}}],[\"jvm\",{\"1\":{\"27\":1}}],[\"java的自动装箱\",{\"1\":{\"30\":1}}],[\"javadoc\",{\"1\":{\"22\":1}}],[\"java\",{\"1\":{\"0\":3,\"1\":1,\"3\":2,\"6\":2,\"15\":1,\"19\":1,\"25\":1,\"26\":1,\"27\":1,\"31\":2,\"34\":2,\"40\":2,\"43\":1,\"50\":1,\"52\":2,\"58\":1,\"61\":1,\"65\":1,\"69\":1,\"73\":1,\"82\":1},\"2\":{\"42\":1}}],[\"都被缓存\",{\"1\":{\"27\":1}}],[\"都会创建一个新的字符串对象\",{\"1\":{\"1\":1}}],[\"缓存池的使用\",{\"0\":{\"30\":1}}],[\"缓存池\",{\"1\":{\"27\":4,\"28\":1}}],[\"缓存池简介\",{\"0\":{\"26\":1}}],[\"提高异步处理能力\",{\"1\":{\"140\":1}}],[\"提高系统的灵活性\",{\"1\":{\"104\":1}}],[\"提高系统性能\",{\"1\":{\"31\":1}}],[\"提供连接的自动恢复机制\",{\"1\":{\"144\":1}}],[\"提供一种传输服务\",{\"1\":{\"121\":1}}],[\"提供了发布确认\",{\"1\":{\"137\":1}}],[\"提供了消息持久化\",{\"1\":{\"137\":1}}],[\"提供了丰富的数据结构和操作方法\",{\"1\":{\"61\":1}}],[\"提供了多种构造方法\",{\"1\":{\"52\":1}}],[\"提供了\",{\"1\":{\"50\":1}}],[\"提供参考链接\",{\"1\":{\"22\":1}}],[\"提升性能\",{\"1\":{\"26\":1}}],[\"提示\",{\"1\":{\"1\":1,\"13\":1,\"14\":1,\"16\":1,\"44\":1,\"49\":1,\"52\":1,\"54\":1,\"58\":1,\"71\":2,\"129\":1,\"130\":1}}],[\"的第一步\",{\"1\":{\"144\":1}}],[\"的交换机\",{\"1\":{\"139\":1}}],[\"的管理控制台界面\",{\"1\":{\"129\":1,\"130\":1}}],[\"的确认\",{\"1\":{\"124\":2}}],[\"的核心部分\",{\"1\":{\"104\":1}}],[\"的大小可以动态变化\",{\"1\":{\"74\":1}}],[\"的节点结构\",{\"1\":{\"73\":1}}],[\"的语法糖\",{\"1\":{\"73\":1}}],[\"的复杂度\",{\"1\":{\"73\":1}}],[\"的内部结构进行交互\",{\"1\":{\"73\":1}}],[\"的遍历都是通用的\",{\"1\":{\"73\":2}}],[\"的遍历的核心就是它的迭代器的实现\",{\"1\":{\"73\":1}}],[\"的上一个节点\",{\"1\":{\"71\":1}}],[\"的上一个节点的引用\",{\"1\":{\"71\":1}}],[\"的下一个节点的引用\",{\"1\":{\"71\":1}}],[\"的下一个节点\",{\"1\":{\"71\":1}}],[\"的前一个节点\",{\"1\":{\"70\":2}}],[\"的性能较好\",{\"1\":{\"58\":1}}],[\"的\",{\"1\":{\"49\":1,\"70\":3,\"71\":1,\"73\":3,\"130\":2}}],[\"的基本数据类型缓存池是一个性能优化机制\",{\"1\":{\"31\":1}}],[\"的基本数据类型缓存池机制是一种优化策略\",{\"1\":{\"25\":1}}],[\"的描述\",{\"1\":{\"22\":2}}],[\"的文档注释\",{\"1\":{\"22\":1}}],[\"的值为\",{\"1\":{\"13\":2}}],[\"z\",{\"1\":{\"22\":2}}],[\"文档\",{\"1\":{\"22\":1}}],[\"文档注释常见的标签包括\",{\"1\":{\"22\":1}}],[\"文档注释会被\",{\"1\":{\"22\":1}}],[\"文档注释以\",{\"1\":{\"22\":1}}],[\"文档注释\",{\"0\":{\"22\":1}}],[\"通信机制\",{\"1\":{\"122\":1}}],[\"通配符匹配\",{\"1\":{\"121\":1}}],[\"通知发送事件\",{\"1\":{\"103\":1}}],[\"通知发送服务\",{\"1\":{\"103\":1}}],[\"通知仓储\",{\"1\":{\"103\":1}}],[\"通知作为聚合根\",{\"1\":{\"103\":1}}],[\"通知聚合\",{\"1\":{\"103\":1}}],[\"通知内容\",{\"1\":{\"103\":1}}],[\"通知类型\",{\"1\":{\"103\":1}}],[\"通知\",{\"1\":{\"103\":1}}],[\"通知管理\",{\"1\":{\"93\":1}}],[\"通常使用迭代器或增强型\",{\"1\":{\"65\":1}}],[\"通常用于为类\",{\"1\":{\"22\":1}}],[\"通过镜像队列\",{\"1\":{\"137\":1}}],[\"通过这些策略\",{\"1\":{\"117\":1}}],[\"通过领域事件\",{\"1\":{\"114\":1}}],[\"通过领域划分\",{\"1\":{\"92\":1}}],[\"通过防腐层\",{\"1\":{\"109\":1}}],[\"通过清晰的领域划分和合理的领域建模\",{\"1\":{\"104\":1}}],[\"通过以上步骤\",{\"1\":{\"92\":1}}],[\"通过与业务领域专家的沟通\",{\"1\":{\"79\":1}}],[\"通过集合转换\",{\"1\":{\"52\":2}}],[\"通过数组转换\",{\"1\":{\"52\":2}}],[\"通过缓存常用值来减少对象创建的开销\",{\"1\":{\"31\":1}}],[\"通过索引访问\",{\"1\":{\"15\":1}}],[\"通过\",{\"1\":{\"2\":1,\"65\":1}}],[\"your\",{\"1\":{\"130\":1}}],[\"yaml\",{\"1\":{\"85\":1}}],[\"yml\",{\"1\":{\"82\":1,\"84\":2}}],[\"y\",{\"1\":{\"21\":1}}],[\"被初始化为\",{\"1\":{\"20\":1}}],[\"x86\",{\"1\":{\"130\":2}}],[\"xx\",{\"1\":{\"27\":2,\"73\":5}}],[\"x\",{\"1\":{\"20\":2,\"70\":8,\"71\":31,\"72\":8}}],[\"这种机制保证了消息的顺序和可靠传输\",{\"1\":{\"137\":1}}],[\"这种架构非常适合复杂的业务系统\",{\"1\":{\"92\":1}}],[\"这个服务会被订单领域调用\",{\"1\":{\"107\":1}}],[\"这个过程涉及到多个层次的设计与实现\",{\"1\":{\"92\":1}}],[\"这里可以通过一个\",{\"1\":{\"107\":1}}],[\"这里的数组指的是一维数组\",{\"1\":{\"15\":1}}],[\"这些模型可以分为不同的层次\",{\"1\":{\"79\":1}}],[\"这些关键字在编写代码时有特殊的含义和用途\",{\"1\":{\"34\":1}}],[\"这些包装类会缓存一定范围内的常用数值\",{\"1\":{\"26\":1}}],[\"这是集合框架的根接口\",{\"1\":{\"62\":1}}],[\"这是部分源码\",{\"1\":{\"52\":1}}],[\"这是参数\",{\"1\":{\"22\":2}}],[\"这是一个方法的文档注释\",{\"1\":{\"22\":1}}],[\"这是一个变量\",{\"1\":{\"22\":1}}],[\"这是一个文档注释\",{\"1\":{\"22\":1}}],[\"这是一个多行注释\",{\"1\":{\"21\":1}}],[\"这是一个单行注释\",{\"1\":{\"20\":1}}],[\"开启发布确认\",{\"1\":{\"151\":1}}],[\"开机自启\",{\"1\":{\"130\":1}}],[\"开关语句中的默认分支\",{\"1\":{\"37\":1}}],[\"开关语句中的分支\",{\"1\":{\"37\":1}}],[\"开关语句\",{\"1\":{\"37\":1}}],[\"开头\",{\"1\":{\"20\":1,\"21\":1,\"22\":1}}],[\"开始\",{\"1\":{\"15\":1}}],[\"每个线程一个\",{\"1\":{\"122\":1}}],[\"每个线程创建单独的\",{\"1\":{\"121\":1}}],[\"每个\",{\"1\":{\"121\":1}}],[\"每个领域应专注于自己的核心业务逻辑\",{\"1\":{\"105\":1}}],[\"每个领域可以进一步细分为多个子域\",{\"1\":{\"93\":1}}],[\"每个微服务应该是一个独立的业务领域或子域\",{\"1\":{\"80\":1}}],[\"每个节点包含指向前一个节点和后一个节点的引用\",{\"1\":{\"74\":1}}],[\"每个节点包含三个部分\",{\"1\":{\"67\":1}}],[\"每个元素称为节点\",{\"1\":{\"67\":1}}],[\"每种注释类型都有其特定的用途和格式\",{\"1\":{\"19\":1}}],[\"每当对字符串进行操作时\",{\"1\":{\"1\":1}}],[\"多队列或多消费者不保证顺序\",{\"1\":{\"122\":1}}],[\"多个消费者可以订阅同一个队列\",{\"1\":{\"121\":1}}],[\"多行注释以\",{\"1\":{\"21\":1}}],[\"多行注释\",{\"0\":{\"21\":1}}],[\"多行注释和文档注释\",{\"1\":{\"19\":1}}],[\"多维数组\",{\"1\":{\"15\":1}}],[\"注释有三种主要类型\",{\"1\":{\"19\":1}}],[\"注意\",{\"1\":{\"11\":2,\"15\":1,\"45\":1,\"52\":1,\"130\":1}}],[\"代码注释\",{\"0\":{\"19\":1},\"2\":{\"24\":1}}],[\"代码的关键\",{\"1\":{\"6\":1}}],[\"章节会详细介绍\",{\"1\":{\"16\":1}}],[\"面向对象的编程语言\",{\"1\":{\"34\":1}}],[\"面向对象\",{\"1\":{\"16\":1}}],[\"26\",{\"1\":{\"130\":3}}],[\"200\",{\"1\":{\"27\":2,\"30\":2}}],[\"20\",{\"1\":{\"21\":1,\"63\":1}}],[\"2\",{\"0\":{\"79\":1,\"95\":1,\"106\":1,\"107\":1,\"108\":2,\"109\":1,\"110\":1,\"113\":1},\"1\":{\"16\":1,\"52\":2,\"69\":1,\"130\":4,\"149\":1}}],[\"调用方法\",{\"1\":{\"16\":1}}],[\"示例\",{\"1\":{\"16\":1,\"63\":2,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"148\":1}}],[\"参数\",{\"1\":{\"27\":1}}],[\"参数名2\",{\"1\":{\"16\":1}}],[\"参数名1\",{\"1\":{\"16\":1}}],[\"参数类型\",{\"1\":{\"16\":2}}],[\"参数列表和方法体\",{\"1\":{\"16\":1}}],[\"访问管理界面\",{\"1\":{\"129\":1,\"130\":1}}],[\"访问元素\",{\"1\":{\"74\":1}}],[\"访问控制修饰符\",{\"0\":{\"35\":1}}],[\"访问权限修饰符\",{\"1\":{\"16\":1}}],[\"访问数组元素\",{\"1\":{\"15\":1}}],[\"语法\",{\"1\":{\"45\":1}}],[\"语法格式\",{\"1\":{\"16\":1}}],[\"语句块中抛出的异常\",{\"1\":{\"37\":1}}],[\"语句\",{\"1\":{\"13\":1,\"14\":2}}],[\"百度百科\",{\"1\":{\"15\":1}}],[\"如需安装最新版本\",{\"1\":{\"129\":1}}],[\"如订单发货事件\",{\"1\":{\"116\":1}}],[\"如订单创建事件和支付成功事件\",{\"1\":{\"114\":1}}],[\"如订单创建事件和订单取消事件\",{\"1\":{\"113\":1}}],[\"如库存检查与扣减服务\",{\"1\":{\"113\":1}}],[\"如验证用户身份或获取用户的配送地址\",{\"1\":{\"112\":1}}],[\"如领域模型\",{\"1\":{\"78\":1}}],[\"如添加\",{\"1\":{\"62\":1}}],[\"如\",{\"1\":{\"36\":1,\"58\":1,\"65\":3,\"79\":1,\"147\":1}}],[\"如感兴趣可查阅\",{\"1\":{\"15\":1}}],[\"如果无法访问管理界面\",{\"1\":{\"129\":1}}],[\"如果队列已满\",{\"1\":{\"122\":1}}],[\"如果没有匹配的队列\",{\"1\":{\"122\":1}}],[\"如果没有前一个节点\",{\"1\":{\"73\":1}}],[\"如果没有则抛出\",{\"1\":{\"73\":1}}],[\"如果是则表示还有下一个元素可以遍历\",{\"1\":{\"73\":1}}],[\"如果是则将尾节点\",{\"1\":{\"71\":1}}],[\"如果是则将头节点\",{\"1\":{\"71\":1}}],[\"如果被删除节点\",{\"1\":{\"71\":2}}],[\"如果为空\",{\"1\":{\"70\":1}}],[\"如果index小于链表大小的一半\",{\"1\":{\"70\":1}}],[\"如果需要线程安全的集合\",{\"1\":{\"74\":1}}],[\"如果需要在列表的头部和中间频繁进行插入和删除操作\",{\"1\":{\"64\":1}}],[\"如果需要快速随机访问和在尾部进行高效的添加和删除操作\",{\"1\":{\"64\":1}}],[\"如果在多线程环境中使用\",{\"1\":{\"58\":1}}],[\"如果不指定\",{\"1\":{\"58\":1}}],[\"如果未指定初始容量\",{\"1\":{\"53\":1}}],[\"如果超过定长长度\",{\"1\":{\"49\":1}}],[\"如果\",{\"1\":{\"13\":2}}],[\"如果已经存在相同的字符串\",{\"1\":{\"1\":1}}],[\"0\",{\"1\":{\"15\":2,\"28\":1,\"52\":3,\"54\":3,\"56\":4,\"57\":1,\"70\":1,\"72\":1,\"73\":3,\"133\":1}}],[\"索引从\",{\"1\":{\"15\":1}}],[\"给出初始化值\",{\"1\":{\"15\":1}}],[\"给变量赋予初始值\",{\"1\":{\"11\":1}}],[\"静态初始化\",{\"1\":{\"15\":1}}],[\"静态变量\",{\"1\":{\"11\":2}}],[\"个性化服务\",{\"1\":{\"102\":1}}],[\"个人信息\",{\"1\":{\"94\":1}}],[\"个\",{\"1\":{\"15\":1}}],[\"只能本地登录\",{\"1\":{\"130\":1}}],[\"只能通过\",{\"1\":{\"52\":1}}],[\"只能在所属类内访问\",{\"1\":{\"35\":1}}],[\"只要实现\",{\"1\":{\"52\":1}}],[\"只指定长度\",{\"1\":{\"15\":1}}],[\"只有\",{\"1\":{\"10\":1}}],[\"然后遍历键获取对应的值\",{\"1\":{\"65\":1}}],[\"然后再判断条件\",{\"1\":{\"14\":1}}],[\"然后是变量名\",{\"1\":{\"11\":1}}],[\"先进先出\",{\"1\":{\"121\":1}}],[\"先执行一次循环体\",{\"1\":{\"14\":1}}],[\"先指定数据类型\",{\"1\":{\"11\":1}}],[\"执行插入\",{\"1\":{\"70\":1}}],[\"执行循环体\",{\"1\":{\"14\":1}}],[\"执行的代码\",{\"1\":{\"14\":8}}],[\"当最后一个消费者断开连接后\",{\"1\":{\"147\":1}}],[\"当订单创建成功后\",{\"1\":{\"108\":1}}],[\"当不允许重复元素且不关心元素顺序时\",{\"1\":{\"64\":1}}],[\"当需要扩容时\",{\"1\":{\"58\":1}}],[\"当已知要填充多少个元素到\",{\"1\":{\"54\":1}}],[\"当添加元素导致数组容量不足时\",{\"1\":{\"54\":1}}],[\"当\",{\"1\":{\"53\":1}}],[\"当元素数量超过当前容量时\",{\"1\":{\"49\":1,\"58\":1}}],[\"当把一个取值范围大的数据类型的值赋给一个取值范围小的数据类型的变量时\",{\"1\":{\"45\":1}}],[\"当把一个取值范围小的数据类型的值赋给一个取值范围大的数据类型的变量时\",{\"1\":{\"44\":1}}],[\"当条件为真时\",{\"1\":{\"14\":1}}],[\"当一个字符串字面量被创建时\",{\"1\":{\"1\":1}}],[\"循环类似\",{\"1\":{\"73\":1}}],[\"循环要好\",{\"1\":{\"73\":1}}],[\"循环遍历\",{\"1\":{\"65\":2}}],[\"循环通过索引遍历\",{\"1\":{\"65\":1}}],[\"循环索引遍历\",{\"1\":{\"57\":1}}],[\"循环语句\",{\"1\":{\"37\":3}}],[\"循环\",{\"1\":{\"14\":3,\"73\":5}}],[\"durable\",{\"1\":{\"147\":1}}],[\"durable=true\",{\"1\":{\"124\":2}}],[\"dubbo\",{\"1\":{\"81\":1}}],[\"dispatch\",{\"1\":{\"122\":1}}],[\"discount\",{\"1\":{\"93\":1,\"99\":1}}],[\"discovery\",{\"1\":{\"84\":2,\"89\":1}}],[\"direct\",{\"1\":{\"121\":1,\"123\":1,\"137\":1,\"146\":3}}],[\"dip\",{\"1\":{\"105\":1}}],[\"dashboard\",{\"1\":{\"87\":1}}],[\"data等工具与数据库交互\",{\"1\":{\"83\":1}}],[\"ddd项目的结构如下\",{\"1\":{\"82\":1}}],[\"ddd的核心思想是将业务逻辑和应用程序的技术实现相分离\",{\"1\":{\"78\":1}}],[\"ddd\",{\"0\":{\"77\":1},\"1\":{\"77\":1,\"92\":1,\"104\":1},\"2\":{\"119\":1}}],[\"d\",{\"1\":{\"27\":2,\"30\":3}}],[\"dev\",{\"1\":{\"130\":7}}],[\"description\",{\"1\":{\"95\":1}}],[\"deliverytag\",{\"1\":{\"151\":2}}],[\"deliverymode\",{\"1\":{\"149\":2}}],[\"deliverymode=2\",{\"1\":{\"124\":1}}],[\"delivery\",{\"1\":{\"93\":1,\"100\":7}}],[\"deque\",{\"1\":{\"74\":1}}],[\"deprecated\",{\"1\":{\"22\":1}}],[\"defaultcapacity\",{\"1\":{\"51\":1}}],[\"default\",{\"1\":{\"14\":1,\"37\":1,\"51\":1,\"52\":1,\"53\":1}}],[\"docker\",{\"0\":{\"129\":1},\"1\":{\"129\":1}}],[\"domaineventpublisher\",{\"1\":{\"108\":2}}],[\"domain\",{\"1\":{\"79\":2,\"82\":1,\"94\":1,\"95\":1,\"96\":2,\"97\":2,\"98\":2,\"99\":1,\"100\":2,\"101\":1,\"102\":1,\"103\":2}}],[\"do\",{\"1\":{\"14\":3,\"37\":1,\"56\":1}}],[\"double>\",{\"1\":{\"63\":1}}],[\"doublenum\",{\"1\":{\"45\":2}}],[\"doublevalue\",{\"1\":{\"45\":2}}],[\"double\",{\"1\":{\"10\":1,\"12\":1,\"38\":1,\"44\":1,\"45\":5}}],[\"根据预定的路由规则将消息转发到对应的队列\",{\"1\":{\"139\":1}}],[\"根据\",{\"1\":{\"122\":1,\"146\":2}}],[\"根据消息的头信息进行路由\",{\"1\":{\"146\":1}}],[\"根据消息的\",{\"1\":{\"122\":1}}],[\"根据消息属性匹配\",{\"1\":{\"121\":1,\"123\":1}}],[\"根据路由键转发到绑定的队列\",{\"1\":{\"121\":1}}],[\"根据领域模型\",{\"1\":{\"80\":1}}],[\"根据指定对象删除\",{\"1\":{\"71\":1}}],[\"根据索引删除\",{\"1\":{\"71\":1}}],[\"根据表达式的值选择执行不同的代码块\",{\"1\":{\"14\":1}}],[\"根据条件执行不同的代码块\",{\"1\":{\"14\":1}}],[\"则抛出异常\",{\"1\":{\"73\":1}}],[\"则将链表的头节点\",{\"1\":{\"71\":1}}],[\"则将链表的尾节点\",{\"1\":{\"71\":1}}],[\"则新添加的节点\",{\"1\":{\"70\":1}}],[\"则从链表的头开始遍历\",{\"1\":{\"70\":1}}],[\"则更新头节点\",{\"1\":{\"70\":1}}],[\"则更新尾节点\",{\"1\":{\"70\":1}}],[\"则使用默认容量\",{\"1\":{\"58\":1}}],[\"则默认为\",{\"1\":{\"53\":1}}],[\"则\",{\"1\":{\"13\":2}}],[\"则不会创建新的实例\",{\"1\":{\"1\":1}}],[\"为了提高性能\",{\"1\":{\"54\":1}}],[\"为了提高效率\",{\"1\":{\"6\":1}}],[\"为\",{\"1\":{\"13\":2,\"30\":2}}],[\"vm\",{\"1\":{\"133\":1}}],[\"version\",{\"1\":{\"130\":2}}],[\"verifying\",{\"1\":{\"130\":1}}],[\"vector\",{\"1\":{\"58\":1}}],[\"v4\",{\"1\":{\"130\":1}}],[\"vhost\",{\"1\":{\"121\":1}}],[\"virtualhost\",{\"1\":{\"144\":1}}],[\"virtual\",{\"1\":{\"121\":1}}],[\"volatile\",{\"1\":{\"36\":1}}],[\"void\",{\"1\":{\"11\":3,\"14\":5,\"39\":1,\"45\":1,\"52\":1,\"54\":2,\"55\":1,\"56\":1,\"57\":1,\"70\":4,\"73\":6,\"108\":1,\"109\":2,\"150\":2,\"151\":1}}],[\"value\",{\"1\":{\"79\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"valueof\",{\"1\":{\"27\":10,\"28\":2,\"29\":2,\"30\":1}}],[\"value2\",{\"1\":{\"13\":2,\"14\":1}}],[\"value1\",{\"1\":{\"13\":2,\"14\":1}}],[\"其他参数\",{\"1\":{\"147\":1}}],[\"其他相关领域可以订阅这些事件并作出相应处理\",{\"1\":{\"108\":1}}],[\"其他关键字\",{\"0\":{\"39\":1}}],[\"其实现方式与增强\",{\"1\":{\"73\":1}}],[\"其中pred表示前一个节点引用\",{\"1\":{\"70\":1}}],[\"其中l表示前一个节点引用\",{\"1\":{\"70\":1}}],[\"其中null表示前一个节点引用\",{\"1\":{\"70\":1}}],[\"其中元素按顺序排列\",{\"1\":{\"67\":1}}],[\"其子接口包括\",{\"1\":{\"62\":1}}],[\"其类型取决于其返回的实际类型\",{\"1\":{\"52\":1}}],[\"其语法格式如下\",{\"1\":{\"13\":1}}],[\"其值就不能更改\",{\"1\":{\"1\":1}}],[\"ivh\",{\"1\":{\"130\":2}}],[\"ip\",{\"1\":{\"122\":1,\"130\":1}}],[\"id\",{\"1\":{\"89\":1,\"130\":1}}],[\"iselementindex\",{\"1\":{\"70\":1,\"72\":1}}],[\"itr\",{\"1\":{\"73\":2}}],[\"it\",{\"1\":{\"71\":4,\"129\":1}}],[\"iterable\",{\"1\":{\"73\":1}}],[\"iterator<integer>\",{\"1\":{\"73\":1}}],[\"iterator<\",{\"1\":{\"71\":1}}],[\"iterator<e>\",{\"1\":{\"57\":1}}],[\"iterator\",{\"1\":{\"57\":3,\"71\":2,\"73\":8}}],[\"item\",{\"1\":{\"68\":2,\"71\":8,\"72\":3,\"73\":2,\"96\":1,\"102\":1}}],[\"its\",{\"1\":{\"56\":1}}],[\"i++\",{\"1\":{\"57\":1,\"70\":1,\"72\":1,\"73\":2}}],[\"illegal\",{\"1\":{\"52\":1}}],[\"illegalargumentexception\",{\"1\":{\"52\":1}}],[\"io\",{\"1\":{\"50\":1,\"52\":1}}],[\"i\",{\"1\":{\"44\":1,\"57\":2,\"70\":5,\"72\":5,\"73\":6,\"133\":2}}],[\"import\",{\"1\":{\"39\":1,\"69\":1}}],[\"implements\",{\"1\":{\"36\":1,\"50\":1,\"52\":1,\"73\":1,\"109\":1}}],[\"if\",{\"1\":{\"13\":1,\"14\":3,\"37\":1,\"52\":4,\"54\":3,\"56\":5,\"70\":8,\"71\":10,\"72\":3,\"73\":2,\"150\":1}}],[\"installing\",{\"1\":{\"130\":1}}],[\"instancevar\",{\"1\":{\"11\":3}}],[\"inventoryservice\",{\"1\":{\"107\":7}}],[\"inventory\",{\"1\":{\"93\":1,\"97\":5,\"113\":1}}],[\"infrastructure\",{\"1\":{\"82\":1}}],[\"init\",{\"1\":{\"73\":1}}],[\"initialcapacity\",{\"1\":{\"52\":5}}],[\"initialization\",{\"1\":{\"14\":1}}],[\"index++\",{\"1\":{\"56\":2}}],[\"indexof\",{\"1\":{\"3\":2}}],[\"index\",{\"1\":{\"3\":4,\"55\":7,\"56\":19,\"58\":1,\"70\":11,\"71\":3,\"72\":8,\"73\":2}}],[\"intnum\",{\"1\":{\"45\":2}}],[\"intvalue\",{\"1\":{\"45\":2}}],[\"interface\",{\"1\":{\"36\":1,\"109\":1}}],[\"integer>\",{\"1\":{\"63\":1}}],[\"integer\",{\"1\":{\"26\":1,\"27\":10,\"30\":6,\"73\":6}}],[\"int\",{\"1\":{\"3\":3,\"10\":1,\"11\":4,\"15\":5,\"16\":4,\"20\":1,\"21\":1,\"22\":4,\"38\":1,\"44\":3,\"45\":9,\"51\":2,\"52\":1,\"54\":4,\"55\":2,\"56\":7,\"57\":1,\"70\":4,\"71\":1,\"72\":4,\"73\":6}}],[\"三目运算符\",{\"1\":{\"13\":2}}],[\"右移\",{\"1\":{\"13\":1}}],[\"左移\",{\"1\":{\"13\":1}}],[\"~\",{\"1\":{\"13\":1}}],[\"^\",{\"1\":{\"13\":1}}],[\"|\",{\"1\":{\"13\":1}}],[\"||\",{\"1\":{\"13\":1}}],[\"逻辑非\",{\"1\":{\"13\":1}}],[\"逻辑或\",{\"1\":{\"13\":1}}],[\"逻辑与\",{\"1\":{\"13\":1}}],[\"逻辑运算符\",{\"1\":{\"13\":1}}],[\"<<\",{\"1\":{\"13\":1}}],[\"<=\",{\"1\":{\"13\":1}}],[\"<\",{\"1\":{\"13\":1,\"54\":1,\"56\":2,\"57\":1,\"70\":3,\"72\":2,\"73\":3}}],[\"大于等于\",{\"1\":{\"13\":1}}],[\"大于\",{\"1\":{\"13\":1}}],[\">>\",{\"1\":{\"13\":1,\"54\":1,\"58\":1,\"70\":2,\"72\":1}}],[\">=\",{\"1\":{\"13\":1}}],[\">\",{\"1\":{\"13\":1,\"44\":5,\"52\":2,\"54\":2,\"56\":2,\"70\":1,\"71\":2,\"72\":1,\"73\":3,\"150\":4,\"151\":2}}],[\"关系描述\",{\"1\":{\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1}}],[\"关系运算符\",{\"1\":{\"13\":1}}],[\"关键字的详细列表和它们的简要说明\",{\"1\":{\"34\":1}}],[\"关键字定义常量\",{\"1\":{\"12\":1}}],[\"关键字声明\",{\"1\":{\"11\":1}}],[\"关键字创建\",{\"1\":{\"6\":1}}],[\"关键字\",{\"0\":{\"34\":1},\"1\":{\"2\":1},\"2\":{\"42\":1}}],[\"取消订单时需要恢复库存\",{\"1\":{\"113\":1}}],[\"取消了循环\",{\"1\":{\"63\":1}}],[\"取余\",{\"1\":{\"13\":1}}],[\"取值范围\",{\"1\":{\"10\":2}}],[\"乘法\",{\"1\":{\"13\":1}}],[\"加法\",{\"1\":{\"13\":1}}],[\"算术运算符\",{\"1\":{\"13\":1}}],[\"运算符\",{\"0\":{\"13\":1}}],[\"3\",{\"0\":{\"80\":1,\"96\":1,\"109\":1,\"111\":1,\"112\":1,\"113\":1,\"114\":2,\"115\":1,\"116\":1},\"1\":{\"12\":1,\"15\":2,\"45\":1,\"52\":2,\"69\":2,\"129\":1,\"130\":1}}],[\"32\",{\"1\":{\"10\":2,\"38\":2}}],[\"32767\",{\"1\":{\"10\":1}}],[\"32768\",{\"1\":{\"10\":1}}],[\"常见使用场景\",{\"0\":{\"138\":1}}],[\"常见的交换机类型包括\",{\"1\":{\"137\":1}}],[\"常见的实现类有\",{\"1\":{\"62\":2}}],[\"常见问题\",{\"0\":{\"133\":1}}],[\"常见实现类\",{\"0\":{\"63\":1}}],[\"常量\",{\"0\":{\"12\":1}}],[\"常用于分布式系统中\",{\"1\":{\"136\":1}}],[\"常用\",{\"1\":{\"63\":2}}],[\"常用的方法包括获取长度\",{\"1\":{\"6\":1}}],[\"常用字符串方法\",{\"0\":{\"3\":1}}],[\"multiple\",{\"1\":{\"151\":2}}],[\"mqtt\",{\"1\":{\"137\":1}}],[\"mkdir\",{\"1\":{\"130\":1}}],[\"mirrored\",{\"1\":{\"137\":1}}],[\"microservice\",{\"1\":{\"84\":1}}],[\"mincapacity\",{\"1\":{\"54\":7}}],[\"mvc或spring\",{\"1\":{\"83\":1}}],[\"message\",{\"1\":{\"124\":1,\"136\":1,\"149\":1,\"150\":6}}],[\"messaging\",{\"1\":{\"82\":1}}],[\"memory\",{\"1\":{\"122\":1,\"133\":1}}],[\"method\",{\"1\":{\"11\":1,\"98\":1}}],[\"model\",{\"1\":{\"82\":1}}],[\"modcount\",{\"1\":{\"73\":2}}],[\"modcount++\",{\"1\":{\"54\":1,\"56\":1,\"70\":3,\"71\":3}}],[\"modified\",{\"1\":{\"71\":3}}],[\"macos\",{\"0\":{\"131\":1}}],[\"manual\",{\"1\":{\"124\":1}}],[\"management\",{\"1\":{\"93\":6,\"95\":1,\"96\":1,\"99\":1,\"100\":1,\"129\":1,\"130\":1}}],[\"mango\",{\"1\":{\"63\":1}}],[\"map\",{\"1\":{\"62\":1,\"63\":2,\"65\":1}}],[\"max\",{\"1\":{\"54\":1}}],[\"main\",{\"1\":{\"11\":6,\"45\":1,\"82\":1,\"150\":2,\"151\":1}}],[\"包至\",{\"1\":{\"130\":4}}],[\"包\",{\"1\":{\"130\":3}}],[\"包含认证\",{\"1\":{\"122\":1}}],[\"包括邮件\",{\"1\":{\"103\":1}}],[\"包括服务注册与发现\",{\"1\":{\"77\":1}}],[\"包括基本类型的包装类\",{\"1\":{\"58\":1}}],[\"包括默认构造方法\",{\"1\":{\"52\":1}}],[\"包括返回值类型\",{\"1\":{\"16\":1}}],[\"包括方法声明和代码块中的\",{\"1\":{\"11\":1}}],[\"包的一部分\",{\"1\":{\"0\":1}}],[\"声明队列\",{\"0\":{\"147\":1}}],[\"声明示例\",{\"1\":{\"146\":1,\"147\":1}}],[\"声明交换机\",{\"0\":{\"146\":1}}],[\"声明时指定\",{\"1\":{\"124\":2}}],[\"声明要监听的队列\",{\"1\":{\"122\":1}}],[\"声明\",{\"1\":{\"122\":1}}],[\"声明方法无返回值\",{\"1\":{\"39\":1}}],[\"声明方法可能抛出的异常\",{\"1\":{\"37\":1}}],[\"声明方法或代码块为同步\",{\"1\":{\"36\":1}}],[\"声明类的静态成员\",{\"1\":{\"36\":1}}],[\"声明一个临时队列\",{\"1\":{\"147\":1}}],[\"声明一个持久化的队列\",{\"1\":{\"147\":1}}],[\"声明一个\",{\"1\":{\"146\":3}}],[\"声明一个本地方法\",{\"1\":{\"36\":1}}],[\"声明一个接口\",{\"1\":{\"36\":1}}],[\"声明一个类\",{\"1\":{\"36\":1}}],[\"声明最终的类\",{\"1\":{\"36\":1}}],[\"声明抽象类或抽象方法\",{\"1\":{\"36\":1}}],[\"声明在方法内的变量\",{\"1\":{\"11\":1}}],[\"声明变量每次使用时都从主存中获取\",{\"1\":{\"36\":1}}],[\"声明变量不被序列化\",{\"1\":{\"36\":1}}],[\"声明变量\",{\"1\":{\"11\":1}}],[\"局部变量没有默认初始值\",{\"1\":{\"11\":1}}],[\"局部变量\",{\"1\":{\"11\":2}}],[\"p\",{\"1\":{\"130\":1,\"133\":1}}],[\"plugins\",{\"1\":{\"129\":1,\"130\":1}}],[\"personalization\",{\"1\":{\"102\":1}}],[\"permissions\",{\"1\":{\"130\":1,\"133\":1}}],[\"permission\",{\"1\":{\"94\":1}}],[\"pear\",{\"1\":{\"63\":1}}],[\"port\",{\"1\":{\"84\":1,\"144\":1}}],[\"pull\",{\"1\":{\"150\":1}}],[\"push\",{\"1\":{\"150\":1}}],[\"publisher\",{\"1\":{\"122\":1,\"124\":2,\"137\":1,\"151\":1}}],[\"publish\",{\"1\":{\"108\":1}}],[\"public\",{\"1\":{\"11\":6,\"14\":5,\"16\":1,\"22\":2,\"35\":1,\"45\":1,\"50\":1,\"52\":5,\"53\":1,\"54\":1,\"55\":2,\"56\":2,\"57\":1,\"69\":2,\"70\":2,\"71\":6,\"72\":3,\"73\":10,\"107\":3,\"108\":5,\"109\":4,\"110\":3,\"150\":2,\"151\":1}}],[\"put\",{\"1\":{\"63\":2}}],[\"password\",{\"1\":{\"133\":1,\"144\":1}}],[\"payload\",{\"1\":{\"121\":1}}],[\"paymenteventhandler\",{\"1\":{\"108\":1}}],[\"payment\",{\"1\":{\"93\":1,\"98\":6}}],[\"path=\",{\"1\":{\"89\":1}}],[\"package\",{\"1\":{\"39\":1}}],[\"param\",{\"1\":{\"22\":3}}],[\"properties\",{\"1\":{\"149\":2}}],[\"protocol\",{\"1\":{\"136\":1}}],[\"protected\",{\"1\":{\"35\":1}}],[\"producer\",{\"1\":{\"121\":1,\"122\":1,\"124\":1,\"139\":1}}],[\"product\",{\"1\":{\"93\":1,\"95\":5}}],[\"processing\",{\"1\":{\"98\":1}}],[\"profile\",{\"1\":{\"94\":1}}],[\"promotionservice\",{\"1\":{\"110\":7}}],[\"promotion\",{\"1\":{\"93\":1,\"99\":5,\"110\":3}}],[\"preparing\",{\"1\":{\"130\":1}}],[\"prefetch\",{\"1\":{\"122\":1}}],[\"predicates\",{\"1\":{\"89\":1}}],[\"pred\",{\"1\":{\"70\":8}}],[\"previous\",{\"1\":{\"73\":2}}],[\"prev\",{\"1\":{\"67\":1,\"68\":4,\"70\":6,\"71\":20,\"72\":1,\"73\":1}}],[\"priorityqueue\",{\"1\":{\"62\":1}}],[\"private\",{\"1\":{\"22\":1,\"35\":1,\"51\":5,\"52\":1,\"54\":2,\"56\":1,\"68\":1,\"70\":1,\"71\":2,\"73\":5,\"107\":1,\"108\":1,\"109\":1,\"110\":2}}],[\"println\",{\"1\":{\"2\":3,\"3\":11,\"4\":2,\"5\":2,\"11\":3,\"27\":5,\"28\":1,\"29\":1,\"30\":2,\"45\":3,\"52\":2,\"73\":5,\"150\":3}}],[\"pi\",{\"1\":{\"12\":1}}],[\"成员变量如果没有赋予初始值\",{\"1\":{\"11\":1}}],[\"成员变量又称为实例变量\",{\"1\":{\"11\":1}}],[\"成员变量\",{\"1\":{\"11\":2}}],[\"name\",{\"1\":{\"84\":2,\"146\":1,\"147\":2,\"148\":3,\"149\":1,\"150\":3}}],[\"nacos\",{\"1\":{\"81\":1,\"84\":4,\"85\":1}}],[\"native\",{\"1\":{\"36\":1}}],[\"n^2\",{\"1\":{\"73\":1}}],[\"not\",{\"1\":{\"154\":1}}],[\"notification\",{\"1\":{\"93\":1,\"103\":7}}],[\"noarch\",{\"1\":{\"130\":1}}],[\"nokey\",{\"1\":{\"130\":1}}],[\"nosuchelementexception\",{\"1\":{\"71\":2,\"72\":2,\"73\":3}}],[\"node<>\",{\"1\":{\"70\":6}}],[\"node<e>\",{\"1\":{\"68\":5,\"70\":10,\"71\":11,\"72\":5,\"73\":2}}],[\"node\",{\"1\":{\"67\":1,\"68\":1,\"70\":2,\"71\":1,\"72\":2}}],[\"ncopies\",{\"1\":{\"69\":2}}],[\"nextindex++\",{\"1\":{\"73\":1}}],[\"nextindex\",{\"1\":{\"73\":4}}],[\"next\",{\"1\":{\"67\":1,\"68\":4,\"70\":5,\"71\":23,\"72\":1,\"73\":15}}],[\"newconnection\",{\"1\":{\"144\":1}}],[\"newcapacity\",{\"1\":{\"54\":6,\"58\":1}}],[\"newnode\",{\"1\":{\"70\":23}}],[\"newstr\",{\"1\":{\"3\":4}}],[\"new\",{\"1\":{\"2\":3,\"4\":1,\"5\":2,\"6\":1,\"11\":1,\"15\":2,\"36\":1,\"52\":5,\"53\":1,\"54\":1,\"57\":1,\"63\":6,\"69\":4,\"70\":3,\"71\":2,\"72\":2,\"73\":3,\"108\":1,\"144\":1,\"149\":1,\"150\":3}}],[\"n\",{\"1\":{\"58\":1,\"73\":2,\"74\":4}}],[\"null表示后一个节点\",{\"1\":{\"70\":1}}],[\"null\",{\"1\":{\"56\":4,\"63\":1,\"67\":2,\"70\":10,\"71\":30,\"72\":2,\"73\":1,\"74\":2,\"147\":1,\"150\":1}}],[\"nummoved\",{\"1\":{\"56\":6}}],[\"num\",{\"1\":{\"11\":2,\"45\":2}}],[\"例如管理界面插件\",{\"1\":{\"137\":1}}],[\"例如\",{\"1\":{\"11\":2,\"12\":1,\"15\":1,\"27\":1,\"30\":1,\"44\":1,\"52\":1,\"54\":1,\"57\":1,\"62\":1,\"63\":1,\"104\":1}}],[\"变量\",{\"0\":{\"11\":1},\"1\":{\"20\":1}}],[\"数据部分\",{\"1\":{\"67\":1}}],[\"数据结构\",{\"0\":{\"67\":1}}],[\"数据存储结构\",{\"0\":{\"49\":1}}],[\"数据缓存池\",{\"2\":{\"33\":1}}],[\"数据类型转换分为两种\",{\"1\":{\"43\":1}}],[\"数据类型转换\",{\"0\":{\"43\":1},\"2\":{\"47\":1}}],[\"数据类型\",{\"0\":{\"10\":1},\"1\":{\"15\":4}}],[\"数组原本是\",{\"1\":{\"49\":1}}],[\"数组可以存放\",{\"1\":{\"15\":1}}],[\"数组长度\",{\"1\":{\"15\":1}}],[\"数组名\",{\"1\":{\"15\":3}}],[\"数组\",{\"0\":{\"15\":1}}],[\"数组等\",{\"1\":{\"10\":1}}],[\"两个值都被缓存\",{\"1\":{\"29\":1}}],[\"两个值\",{\"1\":{\"10\":1}}],[\"用户名\",{\"1\":{\"130\":1,\"144\":1}}],[\"用户注册邮件通知\",{\"1\":{\"125\":1}}],[\"用户下单会创建一个订单\",{\"1\":{\"112\":1}}],[\"用户下单时会创建订单\",{\"1\":{\"104\":1}}],[\"用户行为\",{\"1\":{\"102\":1}}],[\"用户仓储\",{\"1\":{\"94\":1}}],[\"用户作为聚合根\",{\"1\":{\"94\":1}}],[\"用户聚合\",{\"1\":{\"94\":1}}],[\"用户\",{\"1\":{\"94\":1}}],[\"用户管理与订单管理关联\",{\"1\":{\"104\":1}}],[\"用户管理\",{\"1\":{\"93\":1}}],[\"用户接口层实现\",{\"1\":{\"83\":1}}],[\"用户接口层\",{\"1\":{\"82\":1}}],[\"用法\",{\"1\":{\"63\":1}}],[\"用于存储消息\",{\"1\":{\"147\":1}}],[\"用于存储键值对形式的数据\",{\"1\":{\"62\":1}}],[\"用于执行消息相关的操作\",{\"1\":{\"145\":1}}],[\"用于在不同的系统和应用程序之间传递消息\",{\"1\":{\"136\":1}}],[\"用于api网关\",{\"1\":{\"81\":1}}],[\"用于rpc通信\",{\"1\":{\"81\":1}}],[\"用于分布式事务管理\",{\"1\":{\"81\":1}}],[\"用于消息队列\",{\"1\":{\"81\":1}}],[\"用于熔断\",{\"1\":{\"81\":1}}],[\"用于服务注册与发现和配置管理\",{\"1\":{\"81\":1}}],[\"用于微服务架构中的各种组件\",{\"1\":{\"81\":1}}],[\"用于构建微服务的基础框架\",{\"1\":{\"81\":1}}],[\"用于描述领域中发生的事件\",{\"1\":{\"79\":1}}],[\"用于持久化聚合的接口\",{\"1\":{\"79\":1}}],[\"用于处理特定业务逻辑的服务\",{\"1\":{\"79\":1}}],[\"用于和\",{\"1\":{\"73\":1}}],[\"用于实现队列数据结构\",{\"1\":{\"62\":1}}],[\"用于精确浮点运算\",{\"1\":{\"36\":1}}],[\"用于减少内存分配和提高性能\",{\"1\":{\"25\":1}}],[\"用于生成html格式的文档\",{\"1\":{\"22\":1}}],[\"用于注释单行代码\",{\"1\":{\"20\":1}}],[\"用于重复执行一段代码\",{\"1\":{\"14\":1}}],[\"用于表示和操作文本\",{\"1\":{\"0\":1}}],[\"用\",{\"1\":{\"11\":1}}],[\"用单引号括起来\",{\"1\":{\"10\":1}}],[\"单队列单消费者保证顺序\",{\"1\":{\"122\":1}}],[\"单行注释以\",{\"1\":{\"20\":1}}],[\"单行注释\",{\"0\":{\"20\":1},\"1\":{\"19\":1}}],[\"单个字符\",{\"1\":{\"10\":1}}],[\"单精度浮点型\",{\"1\":{\"38\":1}}],[\"单精度\",{\"1\":{\"10\":1}}],[\"是在连接内部建立的逻辑连接\",{\"1\":{\"145\":1}}],[\"是客户端和\",{\"1\":{\"144\":1}}],[\"是高效的\",{\"1\":{\"73\":1}}],[\"是链表的唯一节点\",{\"1\":{\"71\":1}}],[\"是链表的最后一个节点\",{\"1\":{\"71\":1}}],[\"是链表的头节点\",{\"1\":{\"70\":1}}],[\"是否自动删除\",{\"1\":{\"147\":1}}],[\"是否排他\",{\"1\":{\"147\":1}}],[\"是否持久化\",{\"1\":{\"147\":1}}],[\"是否为空\",{\"1\":{\"70\":1}}],[\"是否小于链表大小的一半\",{\"1\":{\"70\":1}}],[\"是个好选择\",{\"1\":{\"64\":1}}],[\"是\",{\"1\":{\"58\":1,\"73\":2}}],[\"是父类\",{\"1\":{\"52\":1}}],[\"是一种强类型\",{\"1\":{\"34\":1}}],[\"是一种简洁的条件语句\",{\"1\":{\"13\":1}}],[\"是一个高效\",{\"1\":{\"140\":1}}],[\"是一个开源的消息代理软件\",{\"1\":{\"136\":1}}],[\"是一个双向链表实现\",{\"1\":{\"74\":1}}],[\"是一个不允许重复元素的集合\",{\"1\":{\"62\":1}}],[\"是一个有序的\",{\"1\":{\"62\":1}}],[\"是一个泛型类\",{\"1\":{\"58\":1}}],[\"是一个私有类\",{\"1\":{\"52\":1}}],[\"是一个布尔表达式\",{\"1\":{\"13\":1}}],[\"是一个可变的字符序列\",{\"1\":{\"5\":1}}],[\"是直接声明在类中方法\",{\"1\":{\"11\":1}}],[\"是最常用的整数类型\",{\"1\":{\"10\":1}}],[\"13\",{\"0\":{\"90\":1}}],[\"130\",{\"1\":{\"45\":1}}],[\"11\",{\"0\":{\"88\":1}}],[\"15672\",{\"1\":{\"129\":1,\"130\":1,\"133\":1}}],[\"15\",{\"1\":{\"54\":1}}],[\"1\",{\"0\":{\"78\":1,\"94\":1,\"105\":1,\"107\":1,\"112\":1},\"1\":{\"15\":1,\"16\":1,\"52\":2,\"54\":5,\"55\":3,\"56\":4,\"58\":4,\"69\":1,\"70\":3,\"72\":2,\"73\":1,\"74\":1,\"130\":5}}],[\"14\",{\"0\":{\"91\":1},\"1\":{\"12\":1,\"45\":1,\"129\":1,\"130\":2}}],[\"10000000\",{\"1\":{\"73\":1}}],[\"100l\",{\"1\":{\"27\":2}}],[\"100\",{\"1\":{\"27\":4,\"30\":3,\"45\":1,\"130\":3}}],[\"10\",{\"0\":{\"87\":1,\"103\":1},\"1\":{\"11\":3,\"20\":2,\"27\":2,\"44\":1,\"49\":1,\"51\":1,\"52\":1,\"53\":1,\"58\":1,\"63\":1}}],[\"16\",{\"1\":{\"10\":1,\"38\":2}}],[\"127\",{\"1\":{\"10\":1,\"27\":4,\"28\":1,\"30\":1}}],[\"128\",{\"1\":{\"10\":1,\"27\":4,\"30\":1,\"45\":1}}],[\"12\",{\"0\":{\"89\":1},\"1\":{\"3\":2,\"129\":1,\"130\":1}}],[\"到\",{\"1\":{\"10\":2,\"27\":4,\"28\":1,\"30\":1,\"52\":1}}],[\"8080\",{\"1\":{\"87\":1}}],[\"8848\",{\"1\":{\"84\":3,\"85\":1}}],[\"8683452581122892189l\",{\"1\":{\"51\":1}}],[\"8\",{\"0\":{\"85\":1,\"101\":1},\"1\":{\"10\":1,\"38\":1,\"73\":1}}],[\"build\",{\"1\":{\"149\":1}}],[\"builder\",{\"1\":{\"149\":1}}],[\"basicreject\",{\"1\":{\"151\":1}}],[\"basicget\",{\"1\":{\"150\":1}}],[\"basicnack\",{\"1\":{\"150\":1,\"151\":1}}],[\"basicack\",{\"1\":{\"150\":2,\"151\":1}}],[\"basicconsume\",{\"1\":{\"150\":2}}],[\"basicpublish\",{\"1\":{\"149\":1}}],[\"basicproperties\",{\"1\":{\"149\":2}}],[\"banana\",{\"1\":{\"63\":1}}],[\"bindingkey\",{\"1\":{\"123\":1}}],[\"binding\",{\"1\":{\"121\":1,\"148\":1}}],[\"binarysearch\",{\"1\":{\"52\":1}}],[\"beam\",{\"1\":{\"130\":1}}],[\"behavior\",{\"1\":{\"102\":1}}],[\"before\",{\"1\":{\"73\":1}}],[\"broker\",{\"1\":{\"121\":1}}],[\"brand\",{\"1\":{\"95\":1}}],[\"break\",{\"1\":{\"14\":3,\"37\":1}}],[\"boot\",{\"1\":{\"81\":1,\"90\":1}}],[\"boolean\",{\"1\":{\"3\":1,\"10\":1,\"26\":1,\"29\":5,\"38\":1,\"54\":1,\"55\":1,\"56\":1,\"70\":1,\"71\":3,\"73\":2}}],[\"b\",{\"1\":{\"16\":2,\"22\":4,\"27\":8,\"28\":2,\"29\":2,\"30\":3,\"44\":2,\"45\":1,\"57\":1,\"69\":2}}],[\"bytevalue\",{\"1\":{\"45\":2}}],[\"byte\",{\"1\":{\"10\":1,\"26\":1,\"27\":8,\"38\":1,\"44\":3,\"45\":6}}],[\"基于\",{\"1\":{\"144\":1}}],[\"基于队列机制工作\",{\"1\":{\"137\":1}}],[\"基于红黑树实现\",{\"1\":{\"63\":2}}],[\"基于哈希表实现\",{\"1\":{\"63\":2}}],[\"基于双向链表\",{\"1\":{\"63\":1}}],[\"基于动态数组实现\",{\"1\":{\"63\":1}}],[\"基于数组实现\",{\"1\":{\"58\":2}}],[\"基本操作时间复杂度\",{\"1\":{\"74\":1}}],[\"基本包括\",{\"1\":{\"73\":2}}],[\"基本类型\",{\"0\":{\"38\":1}}],[\"基本数据类型缓存池\",{\"0\":{\"25\":1}}],[\"基本数据类型\",{\"1\":{\"10\":1}}],[\"基础设施层实现\",{\"1\":{\"83\":1}}],[\"基础设施层\",{\"1\":{\"82\":1}}],[\"基础语法\",{\"0\":{\"9\":1},\"2\":{\"18\":1}}],[\"基础知识\",{\"0\":{\"120\":1},\"2\":{\"7\":1,\"17\":1,\"23\":1,\"32\":1,\"41\":1,\"46\":1}}],[\"但不应包含业务逻辑\",{\"1\":{\"110\":1}}],[\"但库存的业务逻辑仍然保留在库存领域内\",{\"1\":{\"107\":1}}],[\"但其逻辑应保持领域纯净\",{\"1\":{\"107\":1}}],[\"但应尽量保持每个领域的独立性\",{\"1\":{\"104\":1}}],[\"但可能会引入额外的开销\",{\"1\":{\"73\":1}}],[\"但在插入和删除元素时可能需要移动大量元素\",{\"1\":{\"58\":1}}],[\"但是\",{\"1\":{\"58\":1}}],[\"但是需要注意线程安全问题\",{\"1\":{\"6\":1}}],[\"但它是线程安全的\",{\"1\":{\"5\":1}}],[\"或直接调用库存服务接口\",{\"1\":{\"113\":1}}],[\"或通过用户仓储\",{\"1\":{\"112\":1}}],[\"或\",{\"1\":{\"6\":1,\"22\":1,\"38\":1,\"58\":1,\"73\":1}}],[\"拼接\",{\"1\":{\"6\":1}}],[\"与\",{\"1\":{\"5\":1,\"37\":1,\"52\":1,\"71\":2,\"73\":2,\"130\":1}}],[\"amqp\",{\"1\":{\"136\":1,\"137\":1,\"149\":2}}],[\"amount\",{\"1\":{\"96\":1,\"98\":1}}],[\"advanced\",{\"1\":{\"136\":1}}],[\"administrator\",{\"1\":{\"130\":1,\"133\":1}}],[\"admin\",{\"1\":{\"129\":2,\"130\":6,\"133\":3}}],[\"addconfirmlistener\",{\"1\":{\"151\":1}}],[\"address\",{\"1\":{\"94\":1,\"96\":1,\"100\":1}}],[\"addr\",{\"1\":{\"84\":2,\"85\":1}}],[\"addall\",{\"1\":{\"69\":1}}],[\"addlast\",{\"1\":{\"63\":1}}],[\"addfirst\",{\"1\":{\"63\":1}}],[\"add\",{\"1\":{\"16\":2,\"22\":1,\"54\":1,\"55\":4,\"57\":3,\"63\":4,\"69\":3,\"70\":2,\"73\":1,\"130\":1,\"133\":1}}],[\"alarm\",{\"1\":{\"122\":1}}],[\"alibaba生态系统来构建一个灵活\",{\"1\":{\"92\":1}}],[\"alibaba\",{\"1\":{\"81\":1,\"82\":1}}],[\"alibaba微服务项目\",{\"1\":{\"77\":1}}],[\"alibaba微服务项目时\",{\"1\":{\"77\":1}}],[\"alibaba提供了一套完整的微服务解决方案\",{\"1\":{\"77\":1}}],[\"alibaba的特性\",{\"1\":{\"77\":1}}],[\"acknowledgements\",{\"1\":{\"137\":1}}],[\"ack\",{\"1\":{\"122\":1,\"124\":2}}],[\"actuator提供基本的监控信息\",{\"1\":{\"90\":1}}],[\"autoack\",{\"1\":{\"151\":2}}],[\"autodelete\",{\"1\":{\"147\":1}}],[\"auto\",{\"1\":{\"124\":1}}],[\"autoboxing\",{\"1\":{\"30\":1}}],[\"autoboxcachemax=200\",{\"1\":{\"27\":1}}],[\"autoboxcachemax=<size>\",{\"1\":{\"27\":1}}],[\"authorization\",{\"1\":{\"94\":1}}],[\"authentication\",{\"1\":{\"94\":1}}],[\"and\",{\"1\":{\"93\":2}}],[\"at\",{\"1\":{\"88\":1}}],[\"aggregates\",{\"1\":{\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"aggregate\",{\"1\":{\"79\":2,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"async\",{\"1\":{\"130\":1}}],[\"assert\",{\"1\":{\"70\":2,\"71\":3,\"72\":1}}],[\"aslist\",{\"1\":{\"52\":6,\"69\":2}}],[\"abstractlist<e>\",{\"1\":{\"50\":1,\"52\":1}}],[\"abstractlist\",{\"1\":{\"50\":2}}],[\"abstract\",{\"1\":{\"36\":1}}],[\"application\",{\"1\":{\"82\":2,\"84\":4,\"149\":1}}],[\"apple\",{\"1\":{\"63\":1}}],[\"append\",{\"1\":{\"5\":2}}],[\"api控制器\",{\"1\":{\"83\":1}}],[\"api\",{\"1\":{\"22\":1}}],[\"a\",{\"1\":{\"16\":2,\"22\":4,\"27\":8,\"28\":2,\"29\":2,\"30\":3,\"52\":2,\"57\":1,\"69\":3,\"84\":1}}],[\"arguments\",{\"1\":{\"147\":1}}],[\"args\",{\"1\":{\"11\":2,\"45\":1,\"150\":2,\"151\":1}}],[\"arrasys\",{\"1\":{\"52\":1}}],[\"arraycopy\",{\"1\":{\"55\":1,\"56\":2}}],[\"array\",{\"1\":{\"54\":1}}],[\"arraylist<string>\",{\"1\":{\"63\":1}}],[\"arraylist<>\",{\"1\":{\"54\":1,\"57\":1,\"63\":1}}],[\"arraylist<integer>\",{\"1\":{\"52\":2}}],[\"arraylist<e>\",{\"1\":{\"50\":1,\"52\":1}}],[\"arraylist\",{\"0\":{\"48\":1},\"1\":{\"49\":1,\"50\":1,\"52\":9,\"53\":2,\"54\":2,\"58\":12,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"73\":2},\"2\":{\"60\":1}}],[\"arrays是一个工具包\",{\"1\":{\"52\":1}}],[\"arrays\",{\"1\":{\"4\":1,\"52\":10,\"54\":1,\"69\":2}}],[\"arr\",{\"1\":{\"15\":3}}],[\"arr2\",{\"1\":{\"15\":1}}],[\"arr1\",{\"1\":{\"15\":1}}],[\"和消费者确认\",{\"1\":{\"137\":1}}],[\"和集群\",{\"1\":{\"137\":1}}],[\"和标签\",{\"1\":{\"121\":1}}],[\"和删除头节点一致\",{\"1\":{\"71\":1}}],[\"和指向前一个节点的指针\",{\"1\":{\"67\":1}}],[\"和强制类型转换\",{\"1\":{\"43\":1}}],[\"和拆箱\",{\"1\":{\"30\":1}}],[\"和\",{\"0\":{\"5\":1},\"1\":{\"10\":1,\"29\":1,\"50\":1,\"62\":1,\"73\":1,\"74\":1,\"121\":2,\"122\":2,\"123\":1,\"137\":1}}],[\"ops\",{\"1\":{\"130\":7}}],[\"openfeign来声明式地定义服务接口\",{\"1\":{\"86\":1}}],[\"otp\",{\"1\":{\"130\":1}}],[\"override\",{\"1\":{\"109\":1}}],[\"overflow\",{\"1\":{\"54\":1}}],[\"orderapplicationservice\",{\"1\":{\"110\":2}}],[\"ordercreatedevent\",{\"1\":{\"108\":3}}],[\"orderrequest\",{\"1\":{\"107\":1,\"108\":1,\"110\":1}}],[\"orderservice\",{\"1\":{\"107\":2,\"108\":2,\"110\":7}}],[\"order\",{\"1\":{\"82\":1,\"84\":1,\"89\":3,\"93\":1,\"96\":10,\"107\":1,\"108\":5,\"109\":5,\"110\":4}}],[\"orange\",{\"1\":{\"63\":1}}],[\"oldvalue\",{\"1\":{\"56\":2}}],[\"oldcapacity\",{\"1\":{\"54\":3,\"58\":2}}],[\"objects\",{\"1\":{\"71\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"object\",{\"1\":{\"51\":3,\"52\":11,\"53\":1,\"56\":2,\"71\":1,\"79\":1}}],[\"o\",{\"1\":{\"4\":2,\"56\":4,\"58\":3,\"71\":3,\"73\":3,\"74\":5}}],[\"out\",{\"1\":{\"2\":3,\"3\":11,\"4\":2,\"5\":2,\"11\":3,\"27\":5,\"28\":1,\"29\":1,\"30\":2,\"45\":3,\"52\":2,\"73\":5,\"150\":3}}],[\"etc\",{\"1\":{\"133\":1}}],[\"emulator\",{\"1\":{\"130\":1}}],[\"empty\",{\"1\":{\"51\":2,\"52\":2}}],[\"erl\",{\"1\":{\"130\":1}}],[\"erlang\",{\"1\":{\"130\":15}}],[\"eventlistener\",{\"1\":{\"108\":1}}],[\"eventpublisher\",{\"1\":{\"108\":5}}],[\"events\",{\"1\":{\"96\":1,\"97\":1,\"98\":1,\"100\":1,\"103\":1}}],[\"event\",{\"1\":{\"79\":1,\"82\":1,\"96\":2,\"97\":1,\"98\":2,\"100\":1,\"103\":1,\"108\":1}}],[\"e表示当前节点数据\",{\"1\":{\"70\":2}}],[\"enable\",{\"1\":{\"129\":1,\"130\":2}}],[\"enabled\",{\"1\":{\"89\":1}}],[\"entities\",{\"1\":{\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"entity\",{\"1\":{\"79\":1}}],[\"entryset\",{\"1\":{\"65\":1}}],[\"ensureexplicitcapacity\",{\"1\":{\"54\":1}}],[\"ensurecapacityinternal\",{\"1\":{\"54\":1,\"55\":2}}],[\"e>\",{\"1\":{\"52\":1,\"69\":1}}],[\"el8\",{\"1\":{\"130\":1}}],[\"el9\",{\"1\":{\"130\":3}}],[\"element\",{\"1\":{\"55\":3,\"68\":2,\"70\":3,\"71\":6}}],[\"elementdata\",{\"1\":{\"49\":1,\"51\":3,\"52\":13,\"53\":1,\"54\":5,\"55\":4,\"56\":9}}],[\"else\",{\"1\":{\"13\":1,\"14\":3,\"37\":1,\"52\":3,\"56\":1,\"70\":5,\"71\":5,\"72\":1}}],[\"exec\",{\"1\":{\"129\":1}}],[\"exclusive\",{\"1\":{\"147\":1}}],[\"exchangedeclare\",{\"1\":{\"146\":3}}],[\"exchange\",{\"1\":{\"121\":3,\"122\":7,\"123\":4,\"124\":3,\"137\":1,\"139\":1,\"146\":8,\"148\":2,\"149\":1}}],[\"exception\",{\"1\":{\"22\":1,\"150\":1}}],[\"externallogisticsservice\",{\"1\":{\"109\":2}}],[\"extension\",{\"1\":{\"85\":1}}],[\"extends\",{\"1\":{\"36\":1,\"50\":1,\"52\":3,\"69\":1}}],[\"expiration\",{\"1\":{\"149\":2}}],[\"expectedmodcount\",{\"1\":{\"73\":1}}],[\"expression\",{\"1\":{\"14\":1}}],[\"example\",{\"1\":{\"22\":1,\"82\":1}}],[\"e\",{\"1\":{\"4\":2,\"54\":3,\"55\":7,\"56\":2,\"68\":2,\"70\":17,\"71\":10,\"72\":3,\"73\":2,\"150\":1}}],[\"equals\",{\"1\":{\"3\":2,\"56\":1,\"71\":1}}],[\"cd\",{\"1\":{\"130\":2}}],[\"centos\",{\"0\":{\"130\":1},\"1\":{\"130\":4}}],[\"createchannel\",{\"1\":{\"145\":1}}],[\"createorder\",{\"1\":{\"107\":1,\"108\":1,\"110\":2}}],[\"created\",{\"1\":{\"96\":1}}],[\"creation\",{\"1\":{\"96\":1}}],[\"customer\",{\"1\":{\"82\":1,\"93\":1,\"101\":5}}],[\"currenttimemillis\",{\"1\":{\"73\":10}}],[\"channel\",{\"1\":{\"121\":2,\"122\":5,\"145\":3,\"146\":3,\"147\":2,\"148\":2,\"149\":1,\"150\":6,\"151\":2}}],[\"changed\",{\"1\":{\"97\":1}}],[\"character\",{\"1\":{\"26\":1,\"28\":6}}],[\"chararray\",{\"1\":{\"4\":4}}],[\"char\",{\"1\":{\"4\":2,\"10\":1,\"28\":2,\"38\":1}}],[\"checkanddeductstock\",{\"1\":{\"107\":1}}],[\"checkforcomodification\",{\"1\":{\"73\":2}}],[\"checkelementindex\",{\"1\":{\"71\":1,\"72\":1}}],[\"checkpositionindex\",{\"1\":{\"70\":1}}],[\"clustering\",{\"1\":{\"137\":1}}],[\"client\",{\"1\":{\"109\":5}}],[\"cloud\",{\"1\":{\"77\":4,\"81\":2,\"82\":1,\"84\":2,\"85\":1,\"86\":1,\"87\":1,\"89\":2,\"92\":1}}],[\"cloneable\",{\"1\":{\"50\":3,\"74\":1}}],[\"clear\",{\"1\":{\"56\":1}}],[\"class<\",{\"1\":{\"52\":1}}],[\"class\",{\"1\":{\"11\":3,\"22\":1,\"36\":1,\"50\":1,\"52\":6,\"68\":1,\"73\":1,\"107\":1,\"108\":2,\"109\":1,\"110\":1}}],[\"calculation\",{\"1\":{\"99\":1}}],[\"canceled\",{\"1\":{\"96\":1}}],[\"category\",{\"1\":{\"95\":2}}],[\"catch\",{\"1\":{\"37\":1,\"150\":1}}],[\"capacity\",{\"1\":{\"51\":1,\"52\":2,\"53\":1}}],[\"case\",{\"1\":{\"14\":2,\"37\":1}}],[\"c++\",{\"1\":{\"36\":1}}],[\"c\",{\"1\":{\"27\":2,\"30\":3,\"36\":1,\"52\":3,\"57\":1,\"69\":3,\"71\":3}}],[\"count\",{\"1\":{\"122\":1}}],[\"courier\",{\"1\":{\"100\":2}}],[\"coupon\",{\"1\":{\"99\":2}}],[\"complaint\",{\"1\":{\"101\":2}}],[\"completed\",{\"1\":{\"100\":1}}],[\"company\",{\"1\":{\"100\":2}}],[\"compareto\",{\"1\":{\"3\":2}}],[\"com\",{\"1\":{\"82\":1}}],[\"code\",{\"1\":{\"54\":1}}],[\"collections\",{\"1\":{\"58\":1,\"69\":2,\"74\":1}}],[\"collection\",{\"1\":{\"52\":1,\"62\":1}}],[\"collection<\",{\"1\":{\"52\":1,\"69\":1,\"71\":1}}],[\"copyof\",{\"1\":{\"52\":4,\"54\":1}}],[\"conf\",{\"1\":{\"133\":1}}],[\"confirmselect\",{\"1\":{\"151\":1}}],[\"confirms\",{\"1\":{\"137\":1,\"151\":1}}],[\"confirm\",{\"1\":{\"124\":1}}],[\"config\",{\"1\":{\"85\":1}}],[\"config来管理配置文件\",{\"1\":{\"85\":1}}],[\"connectionfactory\",{\"1\":{\"144\":2}}],[\"connection\",{\"1\":{\"121\":1,\"122\":4,\"144\":3,\"145\":1}}],[\"control\",{\"1\":{\"122\":1}}],[\"controller\",{\"1\":{\"82\":1}}],[\"contenttype\",{\"1\":{\"149\":2}}],[\"content\",{\"1\":{\"103\":1,\"149\":1,\"150\":6}}],[\"contains\",{\"1\":{\"71\":1}}],[\"continue\",{\"1\":{\"14\":1,\"37\":1}}],[\"consumertag\",{\"1\":{\"150\":4}}],[\"consumer\",{\"1\":{\"121\":1,\"122\":3,\"124\":1,\"137\":1,\"139\":1}}],[\"conscious\",{\"1\":{\"54\":1}}],[\"const\",{\"1\":{\"40\":1}}],[\"conditions\",{\"1\":{\"99\":1}}],[\"condition\",{\"1\":{\"13\":4,\"14\":4}}],[\"ttl\",{\"1\":{\"147\":1}}],[\"tags\",{\"1\":{\"130\":1,\"133\":1}}],[\"tcp\",{\"1\":{\"121\":1,\"122\":2,\"144\":1}}],[\"type\",{\"1\":{\"101\":1,\"103\":1}}],[\"ticket\",{\"1\":{\"101\":1}}],[\"t\",{\"1\":{\"52\":1}}],[\"threads\",{\"1\":{\"130\":1}}],[\"throw\",{\"1\":{\"37\":1,\"52\":1,\"71\":2,\"72\":2,\"73\":2}}],[\"throws\",{\"1\":{\"22\":1,\"37\":1}}],[\"thirdpartylogisticsclient\",{\"1\":{\"109\":2}}],[\"this\",{\"1\":{\"39\":1,\"52\":5,\"53\":1,\"68\":3,\"69\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":2}}],[\"transaction\",{\"1\":{\"98\":2}}],[\"transport\",{\"1\":{\"87\":1}}],[\"transient\",{\"1\":{\"36\":1,\"51\":1}}],[\"treemap<>\",{\"1\":{\"63\":1}}],[\"treemap<string\",{\"1\":{\"63\":1}}],[\"treemap\",{\"1\":{\"62\":1,\"63\":3,\"64\":1,\"65\":1}}],[\"treeset<>\",{\"1\":{\"63\":1}}],[\"treeset<string>\",{\"1\":{\"63\":1}}],[\"treeset\",{\"1\":{\"62\":1,\"63\":3,\"64\":1,\"65\":1}}],[\"try\",{\"1\":{\"37\":2,\"150\":1}}],[\"true\",{\"1\":{\"2\":1,\"3\":1,\"10\":1,\"13\":1,\"27\":4,\"28\":1,\"29\":4,\"30\":2,\"38\":1,\"52\":1,\"54\":1,\"55\":1,\"56\":2,\"70\":1,\"71\":3,\"89\":1,\"146\":3,\"147\":1,\"150\":2,\"151\":1}}],[\"test\",{\"1\":{\"11\":3,\"14\":5,\"52\":2,\"57\":1,\"73\":10}}],[\"testinstancevar\",{\"1\":{\"11\":3}}],[\"topic\",{\"1\":{\"121\":1,\"123\":1,\"137\":1,\"146\":4}}],[\"to\",{\"1\":{\"56\":1}}],[\"toarray\",{\"1\":{\"52\":5}}],[\"tostring\",{\"1\":{\"4\":1,\"5\":2}}],[\"tochararray\",{\"1\":{\"4\":1}}],[\"touppercase\",{\"1\":{\"3\":1}}],[\"tolowercase\",{\"1\":{\"3\":1}}],[\"high\",{\"1\":{\"133\":1}}],[\"http\",{\"1\":{\"129\":1,\"130\":1}}],[\"host\",{\"1\":{\"121\":1,\"144\":1}}],[\"header\",{\"1\":{\"130\":1}}],[\"headers\",{\"1\":{\"121\":1,\"123\":1,\"137\":1,\"146\":1,\"149\":1}}],[\"help\",{\"1\":{\"71\":2}}],[\"hello\",{\"1\":{\"2\":4,\"3\":15,\"4\":2,\"5\":4}}],[\"handleordercreated\",{\"1\":{\"108\":1}}],[\"handling\",{\"1\":{\"101\":1}}],[\"hasprevious\",{\"1\":{\"73\":2}}],[\"hashmap<>\",{\"1\":{\"63\":1}}],[\"hashmap<string\",{\"1\":{\"63\":1}}],[\"hashmap\",{\"1\":{\"62\":1,\"63\":1,\"64\":1,\"65\":1}}],[\"hashset<>\",{\"1\":{\"63\":1}}],[\"hashset<string>\",{\"1\":{\"63\":1}}],[\"hashset\",{\"1\":{\"62\":1,\"63\":1,\"64\":1,\"65\":1}}],[\"hasnext\",{\"1\":{\"57\":1,\"71\":1,\"73\":3}}],[\"hugecapacity\",{\"1\":{\"54\":1}}],[\"h\",{\"1\":{\"3\":2,\"4\":2}}],[\"替换字符或字符串\",{\"1\":{\"3\":1}}],[\"watermark\",{\"1\":{\"133\":1}}],[\"warning\",{\"1\":{\"130\":1}}],[\"warehouse\",{\"1\":{\"97\":1}}],[\"windows\",{\"0\":{\"132\":1}}],[\"webflux实现rest\",{\"1\":{\"83\":1}}],[\"web\",{\"1\":{\"82\":1}}],[\"work\",{\"1\":{\"56\":1}}],[\"world\",{\"1\":{\"3\":14,\"5\":4}}],[\"while\",{\"1\":{\"14\":6,\"37\":2,\"57\":1,\"71\":1,\"73\":1}}],[\"w\",{\"1\":{\"3\":1}}],[\"位置定位\",{\"1\":{\"70\":1}}],[\"位\",{\"1\":{\"38\":1,\"54\":1}}],[\"位整数\",{\"1\":{\"38\":4}}],[\"位运算是直接对二进制补码进行运算\",{\"1\":{\"13\":1}}],[\"位运算符\",{\"1\":{\"13\":1}}],[\"位浮点数\",{\"1\":{\"10\":2,\"38\":2}}],[\"位有符号整数\",{\"1\":{\"10\":4}}],[\"位结束\",{\"1\":{\"3\":1}}],[\"位开始截取到第\",{\"1\":{\"3\":1}}],[\"7\",{\"0\":{\"84\":1,\"100\":1},\"1\":{\"3\":4,\"63\":1}}],[\"截取字符串\",{\"1\":{\"3\":1}}],[\"因为迭代器直接利用了\",{\"1\":{\"73\":1}}],[\"因为它避免了\",{\"1\":{\"73\":1}}],[\"因为二维数组和三维数组相对一维数组更复杂一些\",{\"1\":{\"15\":1}}],[\"因为\",{\"1\":{\"3\":1,\"73\":1}}],[\"因此性能也相当\",{\"1\":{\"73\":1}}],[\"因此可以通过索引\",{\"1\":{\"58\":1}}],[\"因此不能被继承和改变\",{\"1\":{\"1\":1}}],[\"因此使用时不需要显式导入\",{\"1\":{\"0\":1}}],[\"+=\",{\"1\":{\"73\":5}}],[\"+\",{\"1\":{\"3\":2,\"13\":1,\"16\":1,\"22\":1,\"45\":3,\"52\":3,\"54\":3,\"55\":3,\"56\":2,\"58\":1,\"73\":5,\"150\":3}}],[\"5672\",{\"1\":{\"133\":1,\"144\":2}}],[\"50\",{\"1\":{\"58\":1}}],[\"5\",{\"0\":{\"82\":1,\"98\":1,\"116\":1},\"1\":{\"3\":1,\"11\":1,\"54\":2,\"58\":1,\"63\":1,\"73\":2,\"130\":7}}],[\"lsof\",{\"1\":{\"133\":2}}],[\"lb\",{\"1\":{\"89\":1}}],[\"linkfirst\",{\"1\":{\"70\":1}}],[\"linkbefore\",{\"1\":{\"70\":2}}],[\"linklast\",{\"1\":{\"70\":3}}],[\"linkedlist<integer>\",{\"1\":{\"73\":1}}],[\"linkedlist<>\",{\"1\":{\"63\":1,\"69\":4,\"73\":1}}],[\"linkedlist<string>\",{\"1\":{\"63\":1,\"69\":4}}],[\"linkedlist\",{\"0\":{\"66\":1},\"1\":{\"62\":1,\"63\":4,\"64\":1,\"65\":1,\"67\":1,\"69\":7,\"73\":16,\"74\":7},\"2\":{\"76\":1}}],[\"listiterator<e>\",{\"1\":{\"73\":1}}],[\"listitr\",{\"1\":{\"73\":1}}],[\"list2\",{\"1\":{\"52\":2}}],[\"list1\",{\"1\":{\"52\":2}}],[\"list<string>\",{\"1\":{\"54\":1,\"57\":1}}],[\"list<integer>\",{\"1\":{\"52\":1,\"73\":1}}],[\"list<e>\",{\"1\":{\"50\":1}}],[\"list\",{\"1\":{\"50\":3,\"52\":2,\"54\":1,\"57\":6,\"62\":2,\"63\":3,\"65\":1,\"73\":9,\"74\":1}}],[\"let\",{\"1\":{\"56\":1}}],[\"length\",{\"1\":{\"3\":3,\"52\":1,\"54\":2}}],[\"label\",{\"1\":{\"121\":1}}],[\"lastreturned\",{\"1\":{\"73\":7}}],[\"last\",{\"1\":{\"70\":5,\"71\":7,\"72\":2,\"73\":1}}],[\"largevalue\",{\"1\":{\"45\":2}}],[\"lang\",{\"1\":{\"0\":1}}],[\"logisticsservice\",{\"1\":{\"109\":2}}],[\"logistics\",{\"1\":{\"93\":1}}],[\"locator\",{\"1\":{\"89\":1}}],[\"localhost\",{\"1\":{\"84\":2,\"85\":1,\"87\":1,\"129\":1,\"144\":1}}],[\"localvar\",{\"1\":{\"11\":2}}],[\"long\",{\"1\":{\"10\":1,\"26\":1,\"27\":6,\"38\":1,\"44\":1,\"51\":1,\"73\":5}}],[\"lower\",{\"1\":{\"3\":2}}],[\"l\",{\"1\":{\"4\":4,\"70\":8,\"71\":11,\"72\":3}}],[\"不同的促销活动可以应用于商品\",{\"1\":{\"115\":1}}],[\"不同数据类型有不同的默认初始值\",{\"1\":{\"11\":1}}],[\"不可变且没有唯一标识符的对象\",{\"1\":{\"79\":1}}],[\"不可变性\",{\"1\":{\"1\":1}}],[\"不需要预先分配固定的内存空间\",{\"1\":{\"74\":1}}],[\"不在需要指向下一个节点\",{\"1\":{\"71\":1}}],[\"不在需要指向前一个节点\",{\"1\":{\"71\":1}}],[\"不在字符串池中\",{\"1\":{\"2\":1}}],[\"不允许重复元素\",{\"1\":{\"63\":1}}],[\"不是线程安全的\",{\"1\":{\"58\":1,\"74\":1}}],[\"不是同一个\",{\"1\":{\"52\":1}}],[\"不能添加和删除\",{\"1\":{\"52\":1}}],[\"不能单独创建\",{\"1\":{\"52\":1}}],[\"不能删除元素\",{\"1\":{\"52\":1}}],[\"不能再添加元素\",{\"1\":{\"52\":1}}],[\"不能赋值给\",{\"1\":{\"52\":1}}],[\"不能被继承或修改\",{\"1\":{\"36\":1}}],[\"不会有问题\",{\"1\":{\"44\":1}}],[\"不论是否发生异常\",{\"1\":{\"37\":1}}],[\"不等于\",{\"1\":{\"13\":1}}],[\"创建信道\",{\"0\":{\"145\":1}}],[\"创建连接是使用\",{\"1\":{\"144\":1}}],[\"创建连接\",{\"0\":{\"144\":1}}],[\"创建\",{\"1\":{\"122\":3}}],[\"创建消息属性\",{\"1\":{\"149\":1}}],[\"创建消息\",{\"1\":{\"121\":1,\"122\":1}}],[\"创建订单时需要检查并扣减库存\",{\"1\":{\"113\":1}}],[\"创建订单时需要传入用户id作为参数\",{\"1\":{\"112\":1}}],[\"创建订单\",{\"1\":{\"110\":1}}],[\"创建订单逻辑\",{\"1\":{\"107\":1,\"108\":1}}],[\"创建订单后需要扣减库存\",{\"1\":{\"104\":1}}],[\"创建新的节点对象new\",{\"1\":{\"70\":3}}],[\"创建新实例\",{\"1\":{\"36\":1}}],[\"创建的是新对象\",{\"1\":{\"30\":1}}],[\"创建了不同的对象\",{\"1\":{\"2\":1}}],[\"创建字符串\",{\"0\":{\"2\":1}}],[\"found\",{\"1\":{\"154\":1}}],[\"foreach\",{\"1\":{\"73\":6}}],[\"for1\",{\"1\":{\"73\":1}}],[\"for0\",{\"1\":{\"73\":1}}],[\"for\",{\"1\":{\"14\":3,\"37\":1,\"56\":2,\"57\":2,\"65\":3,\"70\":2,\"71\":2,\"72\":2,\"73\":9,\"84\":2}}],[\"flow\",{\"1\":{\"122\":1}}],[\"float\",{\"1\":{\"10\":1,\"38\":1,\"44\":1}}],[\"feedback\",{\"1\":{\"101\":1}}],[\"f表示后一个节点引用\",{\"1\":{\"70\":1}}],[\"f\",{\"1\":{\"70\":8,\"71\":11,\"72\":3}}],[\"file\",{\"1\":{\"85\":1}}],[\"first\",{\"1\":{\"70\":6,\"71\":9,\"72\":2}}],[\"fifo\",{\"1\":{\"62\":1,\"121\":1,\"122\":1}}],[\"finally\",{\"1\":{\"37\":1}}],[\"final\",{\"1\":{\"1\":1,\"12\":2,\"36\":1,\"51\":4,\"70\":6,\"71\":9,\"72\":2,\"107\":1,\"108\":1,\"109\":1,\"110\":2}}],[\"factory\",{\"1\":{\"144\":7}}],[\"fair\",{\"1\":{\"122\":1}}],[\"fanout\",{\"1\":{\"121\":1,\"123\":1,\"137\":1,\"146\":4,\"148\":2}}],[\"fastremove\",{\"1\":{\"56\":3}}],[\"false\",{\"1\":{\"2\":2,\"10\":1,\"13\":1,\"27\":1,\"29\":1,\"30\":2,\"38\":1,\"52\":1,\"56\":1,\"71\":2,\"147\":2,\"150\":5,\"151\":1}}],[\"输出结果\",{\"1\":{\"130\":2}}],[\"输出负数\",{\"1\":{\"3\":1}}],[\"输出\",{\"1\":{\"2\":3,\"3\":10,\"4\":2,\"5\":2,\"27\":5,\"28\":1,\"29\":1,\"30\":2}}],[\"smp\",{\"1\":{\"130\":1}}],[\"sftp\",{\"1\":{\"130\":2}}],[\"sha256\",{\"1\":{\"130\":1}}],[\"shiporder\",{\"1\":{\"109\":2}}],[\"short\",{\"1\":{\"10\":1,\"26\":1,\"27\":8,\"38\":1,\"44\":1}}],[\"specifications\",{\"1\":{\"95\":1}}],[\"spring\",{\"1\":{\"77\":1,\"81\":3,\"84\":2,\"85\":1,\"87\":1,\"89\":1}}],[\"saga等多种事务模式\",{\"1\":{\"88\":1}}],[\"src\",{\"1\":{\"82\":1}}],[\"sort等\",{\"1\":{\"52\":1}}],[\"signature\",{\"1\":{\"130\":1}}],[\"size++\",{\"1\":{\"54\":1,\"55\":2,\"70\":3}}],[\"size\",{\"1\":{\"51\":1,\"52\":4,\"54\":2,\"55\":3,\"56\":6,\"57\":1,\"70\":4,\"71\":3,\"72\":2,\"73\":2}}],[\"since\",{\"1\":{\"22\":1}}],[\"send\",{\"1\":{\"109\":1}}],[\"sending\",{\"1\":{\"103\":1}}],[\"sent\",{\"1\":{\"103\":1}}],[\"sentinel可以帮助你保护系统的稳定性\",{\"1\":{\"87\":1}}],[\"sentinel\",{\"1\":{\"81\":1,\"87\":1}}],[\"seata可以帮助你在分布式系统中保持数据的一致性\",{\"1\":{\"88\":1}}],[\"seata\",{\"1\":{\"81\":1}}],[\"server\",{\"1\":{\"84\":5,\"85\":1,\"121\":1,\"130\":5}}],[\"services\",{\"1\":{\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1}}],[\"service\",{\"1\":{\"79\":1,\"82\":1,\"84\":1,\"89\":2,\"93\":1,\"94\":2,\"95\":2,\"96\":2,\"97\":1,\"98\":2,\"99\":2,\"100\":2,\"101\":4,\"102\":2,\"103\":1,\"112\":1,\"113\":1}}],[\"serialversionuid\",{\"1\":{\"51\":1}}],[\"serializable\",{\"1\":{\"50\":3,\"52\":1}}],[\"setvirtualhost\",{\"1\":{\"144\":1}}],[\"setpassword\",{\"1\":{\"144\":1}}],[\"setport\",{\"1\":{\"144\":1}}],[\"setusername\",{\"1\":{\"144\":1}}],[\"sethost\",{\"1\":{\"144\":1}}],[\"set\",{\"1\":{\"62\":2,\"63\":2,\"65\":1,\"130\":2,\"133\":2}}],[\"see\",{\"1\":{\"22\":1}}],[\"sudo\",{\"1\":{\"130\":8}}],[\"support\",{\"1\":{\"101\":1}}],[\"super\",{\"1\":{\"39\":1}}],[\"successful\",{\"1\":{\"98\":1}}],[\"succ表示后一个节点引用\",{\"1\":{\"70\":1}}],[\"succ\",{\"1\":{\"70\":11}}],[\"substring\",{\"1\":{\"3\":1}}],[\"substr\",{\"1\":{\"3\":2}}],[\"synchronizedlist\",{\"1\":{\"58\":1,\"74\":1}}],[\"synchronized\",{\"1\":{\"36\":1}}],[\"systemctl\",{\"1\":{\"130\":3}}],[\"system\",{\"1\":{\"2\":3,\"3\":11,\"4\":2,\"5\":2,\"11\":3,\"27\":5,\"28\":1,\"29\":1,\"30\":2,\"45\":3,\"52\":2,\"55\":1,\"56\":2,\"73\":15,\"93\":1,\"150\":3}}],[\"switch\",{\"1\":{\"14\":3,\"37\":1}}],[\"stomp\",{\"1\":{\"137\":1}}],[\"stock\",{\"1\":{\"97\":1}}],[\"start\",{\"1\":{\"130\":1}}],[\"starttime\",{\"1\":{\"73\":10}}],[\"status\",{\"1\":{\"96\":1,\"100\":1,\"130\":1}}],[\"staticvar\",{\"1\":{\"11\":3}}],[\"static\",{\"1\":{\"11\":4,\"36\":1,\"45\":1,\"51\":4,\"52\":1,\"68\":1,\"150\":2,\"151\":1}}],[\"stream\",{\"1\":{\"73\":5}}],[\"strictfp\",{\"1\":{\"36\":1}}],[\"stringbuffer\",{\"0\":{\"5\":1},\"1\":{\"5\":4,\"6\":1}}],[\"stringbuilder\",{\"0\":{\"5\":1},\"1\":{\"5\":5,\"6\":1}}],[\"string\",{\"1\":{\"0\":1,\"1\":2,\"2\":6,\"3\":16,\"4\":3,\"11\":2,\"45\":1,\"147\":1,\"150\":8,\"151\":1}}],[\"str\",{\"1\":{\"3\":13,\"4\":4}}],[\"str4\",{\"1\":{\"2\":2}}],[\"str3\",{\"1\":{\"2\":4,\"3\":2}}],[\"str2\",{\"1\":{\"2\":2,\"3\":6}}],[\"str1\",{\"1\":{\"2\":3,\"3\":6}}],[\"sb\",{\"1\":{\"5\":6}}],[\"==\",{\"1\":{\"2\":3,\"13\":1,\"27\":5,\"28\":1,\"29\":1,\"30\":4,\"52\":3,\"56\":2,\"70\":6,\"71\":10,\"72\":2,\"73\":1}}],[\"=\",{\"1\":{\"2\":4,\"3\":22,\"4\":4,\"5\":2,\"11\":5,\"12\":1,\"13\":2,\"15\":2,\"16\":1,\"20\":1,\"21\":1,\"27\":10,\"28\":2,\"29\":2,\"30\":4,\"44\":2,\"45\":8,\"51\":4,\"52\":11,\"53\":1,\"54\":8,\"55\":2,\"56\":7,\"57\":3,\"58\":1,\"63\":6,\"68\":3,\"69\":4,\"70\":25,\"71\":38,\"72\":8,\"73\":15,\"107\":1,\"108\":2,\"109\":1,\"110\":4,\"133\":1,\"144\":2,\"145\":1,\"147\":1,\"149\":1,\"150\":5,\"151\":2}}],[\"修饰的\",{\"1\":{\"1\":1}}],[\"它的主要功能是异步传递消息和解耦系统组件\",{\"1\":{\"136\":1}}],[\"它负责调用不同领域的服务\",{\"1\":{\"110\":1}}],[\"它们通常包含在应用服务中\",{\"1\":{\"107\":1}}],[\"它们在类加载时被初始化\",{\"1\":{\"11\":1}}],[\"它可以是其他任意类型\",{\"1\":{\"52\":1}}],[\"它可以跨越多行进行注释\",{\"1\":{\"21\":1}}],[\"它有许多保留关键字\",{\"1\":{\"34\":1}}],[\"它通常用于描述类\",{\"1\":{\"22\":1}}],[\"它会被放入字符串池中\",{\"1\":{\"1\":1}}],[\"它是一个领域服务\",{\"1\":{\"107\":1}}],[\"它是\",{\"1\":{\"0\":1}}],[\"类中\",{\"1\":{\"52\":1}}],[\"类的都可以作为入参\",{\"1\":{\"52\":1}}],[\"类声明\",{\"0\":{\"50\":1}}],[\"类型来定向消息到不同的队列\",{\"1\":{\"137\":1}}],[\"类型和绑定规则\",{\"1\":{\"122\":1}}],[\"类型\",{\"1\":{\"73\":1,\"121\":1,\"122\":1}}],[\"类型默认缓存值在\",{\"1\":{\"27\":1}}],[\"类型的交换机\",{\"1\":{\"146\":3}}],[\"类型的数组\",{\"1\":{\"52\":1}}],[\"类型的变量\",{\"1\":{\"44\":1,\"45\":1}}],[\"类型的\",{\"1\":{\"29\":1}}],[\"类型的所有值\",{\"1\":{\"27\":1}}],[\"类型的值赋给\",{\"1\":{\"44\":1,\"45\":1}}],[\"类型的值在\",{\"1\":{\"27\":2,\"28\":1}}],[\"类型的值\",{\"1\":{\"15\":1}}],[\"类变量也称为静态变量\",{\"1\":{\"11\":1}}],[\"类似\",{\"1\":{\"5\":1}}],[\"类是\",{\"1\":{\"1\":1}}],[\"类\",{\"0\":{\"36\":1},\"1\":{\"0\":1,\"10\":1,\"50\":1}}],[\"中间件\",{\"2\":{\"126\":1,\"134\":1,\"141\":1,\"152\":1}}],[\"中间插\",{\"1\":{\"70\":1}}],[\"中常用的动态数组实现\",{\"1\":{\"58\":1}}],[\"中时\",{\"1\":{\"54\":1}}],[\"中未使用\",{\"1\":{\"40\":2}}],[\"中的拷贝操作\",{\"1\":{\"54\":1}}],[\"中的缓存池主要用于以下基本数据类型的包装类\",{\"1\":{\"26\":1}}],[\"中的字符串是不可变的\",{\"1\":{\"6\":1}}],[\"中使用较少就不做过多介绍\",{\"1\":{\"15\":1}}],[\"中被实现为\",{\"1\":{\"0\":1}}],[\"中\",{\"1\":{\"0\":1,\"43\":1,\"121\":1,\"122\":1,\"144\":1}}],[\"在分布式系统中\",{\"1\":{\"138\":1}}],[\"在安装\",{\"1\":{\"130\":1}}],[\"在订单领域中\",{\"1\":{\"112\":1}}],[\"在订单创建时\",{\"1\":{\"107\":1}}],[\"在应用服务中调用促销服务\",{\"1\":{\"110\":1}}],[\"在应用层中实现应用服务\",{\"1\":{\"83\":1}}],[\"在物流与配送领域\",{\"1\":{\"109\":1}}],[\"在这个电商系统中\",{\"1\":{\"104\":1}}],[\"在电商系统中\",{\"1\":{\"92\":1,\"93\":1,\"104\":1}}],[\"在基础设施层中实现仓储接口\",{\"1\":{\"83\":1}}],[\"在领域层中实现实体\",{\"1\":{\"83\":1}}],[\"在开始搭建之前\",{\"1\":{\"78\":1}}],[\"在使用领域驱动设计\",{\"1\":{\"77\":1}}],[\"在中间\",{\"1\":{\"74\":1}}],[\"在中间位置插入或删除元素需要移动后续的元素\",{\"1\":{\"58\":1}}],[\"在头部或尾部\",{\"1\":{\"74\":1}}],[\"在插入和删除操作\",{\"1\":{\"63\":1}}],[\"在实际应用中\",{\"1\":{\"58\":1}}],[\"在通过转为数组以及拷贝\",{\"1\":{\"52\":1}}],[\"在字典顺序中小于\",{\"1\":{\"3\":1}}],[\"在\",{\"1\":{\"0\":1,\"30\":1,\"43\":1,\"73\":2,\"144\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
